import{_ as t,c as e,o as i,a as l}from"./app.6aa74d9a.js";const f=JSON.parse('{"title":"\u7B14\u8BB0","description":"","frontmatter":{},"headers":[{"level":3,"title":"1\u3001Data types and formats","slug":"_1\u3001data-types-and-formats","link":"#_1\u3001data-types-and-formats","children":[]},{"level":3,"title":"2\u30013D building","slug":"_2\u30013d-building","link":"#_2\u30013d-building","children":[]},{"level":2,"title":"Importing","slug":"importing","link":"#importing","children":[{"level":3,"title":"3\u30013D models","slug":"_3\u30013d-models","link":"#_3\u30013d-models","children":[]}]}],"relativePath":"GIS/Cesium/3DTiling.md"}'),r={name:"GIS/Cesium/3DTiling.md"},a=l('<h1 id="\u7B14\u8BB0" tabindex="-1">\u7B14\u8BB0 <a class="header-anchor" href="#\u7B14\u8BB0" aria-hidden="true">#</a></h1><h3 id="_1\u3001data-types-and-formats" tabindex="-1">1\u3001Data types and formats <a class="header-anchor" href="#_1\u3001data-types-and-formats" aria-hidden="true">#</a></h3><ul><li>\u6709\u54EA\u4E9B\u6570\u636E\u53EF\u4EE5\u652F\u6301\u5C55\u793A <ul><li><a href="https://cesium.com/learn/3d-tiling/ion-tile-photogrammetry/" target="_blank" rel="noreferrer">Photogrammetry or LiDAR-derived mesh</a></li><li><a href="https://cesium.com/learn/3d-tiling/ion-tile-3d-models/" target="_blank" rel="noreferrer">BIM, CAD, or other 3D model</a></li><li><a href="https://cesium.com/learn/3d-tiling/ion-tile-point-clouds/" target="_blank" rel="noreferrer">Point Clouds</a></li><li><a href="https://cesium.com/learn/3d-tiling/ion-tile-3d-buildings/" target="_blank" rel="noreferrer">3D Buildings</a></li><li><a href="https://cesium.com/learn/3d-tiling/ion-tile-terrain/" target="_blank" rel="noreferrer">Terrain</a></li><li><a href="https://cesium.com/learn/3d-tiling/ion-tile-imagery/" target="_blank" rel="noreferrer">Satellite or Drone Imagery</a></li></ul></li></ul><h3 id="_2\u30013d-building" tabindex="-1">2\u30013D building <a class="header-anchor" href="#_2\u30013d-building" aria-hidden="true">#</a></h3><h2 id="importing" tabindex="-1">Importing <a class="header-anchor" href="#importing" aria-hidden="true">#</a></h2><p>Cesium ion tiles your buildings into 3D Tiles when you upload them. Here are sample files you can download to try this out:</p><ul><li><a href="https://cesium.com/public/learn/AGI_HQ.kmz" target="_blank" rel="noreferrer">KML/COLLADA</a></li><li><a href="https://cesium.com/public/learn/Reichstag.zip" target="_blank" rel="noreferrer">CityGML</a></li></ul><ol><li>On the <a href="https://cesium.com/ion/assets" target="_blank" rel="noreferrer"><strong>My Assets</strong></a> tab of Cesium ion, press <strong>Add Data</strong> to upload your model.</li><li>Select <strong>KML/COLLADA (tile as 3D Tiles)</strong> or <strong>CityGML</strong>.</li><li>Select the options you want to apply, including clamping the buildings to terrain.</li></ol><p>Select the <strong>Clamp to terrain</strong> option to move individual buildings down to the underlying ground height during tiling. Use this option to get accurate real-world building heights, or if you are visualizing your buildings on top of a 3D terrain layer.</p><h3 id="_3\u30013d-models" tabindex="-1">3\u30013D models <a class="header-anchor" href="#_3\u30013d-models" aria-hidden="true">#</a></h3><ul><li>3Dbuilding\u9664\u4E863Dtiles\u5916\u8FD8\u652F\u6301\u7684\u6570\u636E\u683C\u5F0F</li></ul><table><thead><tr><th style="text-align:left;">Format</th><th style="text-align:left;">File extensions</th></tr></thead><tbody><tr><td style="text-align:left;">Wavefront OBJ</td><td style="text-align:left;">.obj</td></tr><tr><td style="text-align:left;">Filmbox</td><td style="text-align:left;">.fbx</td></tr><tr><td style="text-align:left;">Digital Asset Exchange</td><td style="text-align:left;">.dae</td></tr><tr><td style="text-align:left;">glTF</td><td style="text-align:left;">.gltf</td></tr><tr><td style="text-align:left;">Binary glTF</td><td style="text-align:left;">.glb</td></tr></tbody></table><ul><li>Files may be zipped.</li><li>Your model must use <strong>local coordinates</strong> (the geometry must be centered around the origin).</li><li>Units are assumed to be in meters.</li></ul>',13),n=[a];function o(s,d,g,h,u,m){return i(),e("div",null,n)}const p=t(r,[["render",o]]);export{f as __pageData,p as default};
