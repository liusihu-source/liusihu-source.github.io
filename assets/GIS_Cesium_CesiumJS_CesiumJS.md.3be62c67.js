import{_ as e,o as a,c as s,Q as o}from"./chunks/framework.a7175731.js";const l="/assets/image-20240305160328869.1fc86697.png",t="/assets/image-20240305155703335.0a39ea4c.png",r="/assets/image-20240304110909498.dbf971f5.png",i="/assets/image-20230425214353102.065aac8d.png",n="/assets/image-20240304110805282.68f13400.png",p="/assets/image-20240304223149036.f6def4b4.png",S=JSON.parse('{"title":"CesiumJS --笔记","description":"","frontmatter":{},"headers":[],"relativePath":"GIS/Cesium/CesiumJS/CesiumJS.md","filePath":"GIS/Cesium/CesiumJS/CesiumJS.md","lastUpdated":null}'),c={name:"GIS/Cesium/CesiumJS/CesiumJS.md"},m=o('<h1 id="cesiumjs-笔记" tabindex="-1">CesiumJS --笔记 <a class="header-anchor" href="#cesiumjs-笔记" aria-label="Permalink to &quot;CesiumJS --笔记&quot;">​</a></h1><h2 id="一、viewer类" tabindex="-1">一、Viewer类 <a class="header-anchor" href="#一、viewer类" aria-label="Permalink to &quot;一、Viewer类&quot;">​</a></h2><p><img src="'+l+'" alt="image-20240305160328869"></p><p><img src="'+t+`" alt="image-20240305155703335"></p><ol><li><strong>Primitives（基元）</strong>： <ul><li><code>Primitives</code> 是 Cesium 中的原始几何图元，例如点、线、多边形等，它们可以直接添加到场景中。</li><li>每个 <code>Primitive</code> 对象代表一个单独的几何体，通常是静态的，不能动态更新。因此，对于频繁更新的数据，不适合使用 <code>Primitives</code>。</li><li><code>Primitives</code> 适合于加载相对简单的几何体，例如地图标记、简单的边界等。</li></ul></li><li><strong>Datasources（数据源）</strong>： <ul><li><code>Datasources</code> 允许加载更复杂的地理空间数据，例如 GeoJSON、KML、GPX 等格式的数据，甚至支持加载 3D Tiles 等大规模、复杂的数据集。</li><li><code>Datasources</code> 允许动态添加、移除和更新数据，因此非常适合用于实时或动态更新的数据展示。</li><li>Cesium 提供了丰富的数据源类（如 <code>GeoJsonDataSource</code>、<code>KmlDataSource</code> 等），方便开发者加载不同格式的数据。</li></ul></li></ol><h2 id="二、datasourcedispaly类" tabindex="-1">二、dataSourceDispaly类 <a class="header-anchor" href="#二、datasourcedispaly类" aria-label="Permalink to &quot;二、dataSourceDispaly类&quot;">​</a></h2><blockquote><p><a href="https://sandcastle.cesium.com/index.html?src=CZML.html&amp;label=DataSources" target="_blank" rel="noreferrer">https://sandcastle.cesium.com/index.html?src=CZML.html&amp;label=DataSources</a></p></blockquote><p>可视化DataSource实例的集合。并可通过viewer直接访问dataSources并添加模型，如下示例</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">viewer.dataSources.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    Cesium.CzmlDataSource.</span><span style="color:#B392F0;">load</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;../SampleData/simple.czml&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">viewer.dataSources.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    Cesium.CzmlDataSource.</span><span style="color:#6F42C1;">load</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;../SampleData/simple.czml&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">);</span></span></code></pre></div><p>💡 <code>其中dataSources可加载默认的CzmlDataSource、GeoJsonDataSource、GpxDataSource 和 KmlDataSource</code></p><p>💡 <code>defaultDataSource可加载默认的entities（entityCollection），并通过entityCollection.add() 加载具体entity</code></p><p>💡 viewer/Entities作用</p><ul><li>方便创建直观的对象，同时做到性能优化（billboard，point等）</li><li>提供一些方便使用的函数：flyTo/zoomTo</li><li>赋予Entity对象时间这个属性，对象具备动态特性/Primitive不具备</li><li>提供一些UI（homeButton/sceneModePicker/projectionPicker/baseLayerPicker）</li><li>大量的快捷方式，如viewer.camera</li><li>dataSource可加载大规模数据，如Geojson</li></ul><h2 id="三、cesiumwidget-viewer类" tabindex="-1">三、CesiumWidget &amp; Viewer类 <a class="header-anchor" href="#三、cesiumwidget-viewer类" aria-label="Permalink to &quot;三、CesiumWidget  &amp;  Viewer类&quot;">​</a></h2><p>💡 两个类同样可以通过div实例化一个场景，Viewer类实例后会自动创建带有UI等工具的场景，以及会带有dataSource，而CesiumWidget只会有一个三维地图的场景，没有任何UI工具</p><p>📖 Cesium中所有涉及场景的都在scene中处理，再有就是最外层的skybox天空盒（图片围成）</p><p><img src="`+r+'" alt="image-20240304110909498"></p><h2 id="四、小部件工具" tabindex="-1">四、小部件工具 <a class="header-anchor" href="#四、小部件工具" aria-label="Permalink to &quot;四、小部件工具&quot;">​</a></h2><p>Timeline</p><p><img src="'+i+'" alt="image-20230425214353102"></p><p>可以控制时间前进倒退，倍速，比如可以看到星辰的变化</p><h2 id="五、scene" tabindex="-1">五、Scene <a class="header-anchor" href="#五、scene" aria-label="Permalink to &quot;五、Scene&quot;">​</a></h2><p>Scene内置了图元，如globe、skybox、sun 和 moon等，还有两个用户自行控制存放对象的数组，primitives（非贴地图元） 和 groundPrimitives贴地图元。</p><p>💡 图元是Cesium用来绘制三维对象的独立结构。具体的图元类如下🌟</p><p>💡 图元没有基类，所有的图元都有update函数。</p><p>💡 图元是一类对象绘制的集合，可包含多个WebGL的drawcall</p><p><img src="'+n+'" alt="image-20240304110805282"></p><p>💡 补充 Cesium3DTileset 也是图元的一种</p><p><img src="'+p+`" alt="image-20240304223149036"></p><p>其中Globe是全球地形，需要两个东西，地形高程信息 和 影像图层（可叠加多层）。两者都是渐进式加载，即视线能看到的地方才会调度加载。</p><h2 id="六、具体模型" tabindex="-1">六、具体模型 <a class="header-anchor" href="#六、具体模型" aria-label="Permalink to &quot;六、具体模型&quot;">​</a></h2><h3 id="_3dmodel-如gltf、3dtiles" tabindex="-1">3Dmodel（如gltf、3dTiles） <a class="header-anchor" href="#_3dmodel-如gltf、3dtiles" aria-label="Permalink to &quot;3Dmodel（如gltf、3dTiles）&quot;">​</a></h3><p>colorBlendMode 可设置颜色的混合模式。alpha 和 mix 可设置 透明度 和 混合度。</p><h2 id="七、固定视角viewer-scene-camera" tabindex="-1">七、固定视角viewer.scene.camera <a class="header-anchor" href="#七、固定视角viewer-scene-camera" aria-label="Permalink to &quot;七、固定视角viewer.scene.camera&quot;">​</a></h2><h3 id="camera" tabindex="-1">camera <a class="header-anchor" href="#camera" aria-label="Permalink to &quot;camera&quot;">​</a></h3><p>camera.lookAt固定观察对象，其他类似。</p><p>viewer.camera 其实是viewer.scene.camera</p><h2 id="八、坐标系相关" tabindex="-1">八、坐标系相关 <a class="header-anchor" href="#八、坐标系相关" aria-label="Permalink to &quot;八、坐标系相关&quot;">​</a></h2><h4 id="cesium-transforms-eastnorthuptofixedframe-origin-ellipsoid-result-→-matrix4" tabindex="-1">Cesium.Transforms.eastNorthUpToFixedFrame(origin, ellipsoid, result) → <a href="https://cesium.com/learn/cesiumjs/ref-doc/Matrix4.html" target="_blank" rel="noreferrer">Matrix4</a> <a class="header-anchor" href="#cesium-transforms-eastnorthuptofixedframe-origin-ellipsoid-result-→-matrix4" aria-label="Permalink to &quot;Cesium.Transforms.eastNorthUpToFixedFrame(origin, ellipsoid, result) → [Matrix4](https://cesium.com/learn/cesiumjs/ref-doc/Matrix4.html)&quot;">​</a></h4><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// Get the transform from local east-north-up at cartographic (0.0, 0.0) to Earth&#39;s fixed frame.</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">center</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Cesium.Cartesian3.</span><span style="color:#B392F0;">fromDegrees</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">transform</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Cesium.Transforms.</span><span style="color:#B392F0;">eastNorthUpToFixedFrame</span><span style="color:#E1E4E8;">(center);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Get the transform from local east-north-up at cartographic (0.0, 0.0) to Earth&#39;s fixed frame.</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">center</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Cesium.Cartesian3.</span><span style="color:#6F42C1;">fromDegrees</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">transform</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Cesium.Transforms.</span><span style="color:#6F42C1;">eastNorthUpToFixedFrame</span><span style="color:#24292E;">(center);</span></span></code></pre></div><ul><li>这段代码是创建一个将本地坐标系（东北天坐标系）转换为固定坐标系（固定在地球上）的转换矩阵</li><li>具体而言，这里创建了一个固定坐标系，使其原点位于经度 0 度、纬度 0 度的位置（Cartesian3.fromDegrees(0.0, 0.0)）。这个固定坐标系是一个东北天坐标系，与地球表面垂直。<code>eastNorthUpToFixedFrame</code> 方法返回一个变换矩阵，可以用它来将相对于该原点的本地坐标系的点或向量转换为地球上的固定坐标系</li><li>因此可用这个矩阵将在相对于给定经纬度原点的本地坐标系中定义的点或向量转换为固定坐标系中的位置</li></ul><h2 id="九、polylines相关" tabindex="-1">九、Polylines相关 <a class="header-anchor" href="#九、polylines相关" aria-label="Permalink to &quot;九、Polylines相关&quot;">​</a></h2><p>💡 PolylineCollection可以同时渲染多条折线，性能较高；其他类型都是单独渲染某个折线，线条过多会导致渲染性能受影响；</p><h2 id="十、property相关" tabindex="-1">十、Property相关 <a class="header-anchor" href="#十、property相关" aria-label="Permalink to &quot;十、Property相关&quot;">​</a></h2><blockquote><p><a href="https://sandcastle.cesium.com/index.html?src=Callback%20Property.html&amp;label=All" target="_blank" rel="noreferrer">https://sandcastle.cesium.com/index.html?src=Callback Property.html&amp;label=All</a></p></blockquote><h2 id="十一、postprocess" tabindex="-1">十一、PostProcess <a class="header-anchor" href="#十一、postprocess" aria-label="Permalink to &quot;十一、PostProcess&quot;">​</a></h2><h2 id="十二、调试用的函数" tabindex="-1">十二、调试用的函数 <a class="header-anchor" href="#十二、调试用的函数" aria-label="Permalink to &quot;十二、调试用的函数&quot;">​</a></h2><p>💡 debugShowFramesPerSecond</p><p>显示每秒帧数和帧之间的时间</p><p>💡 tileset.debugShowBoundingVolume = true</p><p>指定3Dtiles模型是否显示外围包络线</p>`,51),d=[m];function u(h,y,E,g,f,b){return a(),s("div",null,d)}const _=e(c,[["render",u]]);export{S as __pageData,_ as default};
