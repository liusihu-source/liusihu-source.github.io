import{_ as o,c as e,o as t,a as i}from"./app.570737f8.js";const g=JSON.parse('{"title":"GeoJson格式解读 --笔记","description":"","frontmatter":{},"headers":[{"level":2,"title":"一、简介","slug":"一、简介","link":"#一、简介","children":[]},{"level":2,"title":"二、type","slug":"二、type","link":"#二、type","children":[{"level":3,"title":"1.要素对象 ☆☆☆","slug":"_1-要素对象-☆☆☆","link":"#_1-要素对象-☆☆☆","children":[]},{"level":3,"title":"2.几何对象","slug":"_2-几何对象","link":"#_2-几何对象","children":[]}]},{"level":2,"title":"三、crs","slug":"三、crs","link":"#三、crs","children":[]},{"level":2,"title":"四、bbox（bounding boxes）","slug":"四、bbox-bounding-boxes","link":"#四、bbox-bounding-boxes","children":[]}],"relativePath":"GIS/GeoJson格式解读.md","lastUpdated":1669705325000}'),l={name:"GIS/GeoJson格式解读.md"},n=i('<h1 id="geojson格式解读-笔记" tabindex="-1">GeoJson格式解读 --笔记 <a class="header-anchor" href="#geojson格式解读-笔记" aria-hidden="true">#</a></h1><h2 id="一、简介" tabindex="-1">一、简介 <a class="header-anchor" href="#一、简介" aria-hidden="true">#</a></h2><blockquote><p>GeoJSON是一种对地理数据结构进行编码的格式。</p><p>GeoJSON对象可以表示几何信息、要素或者要素集合，主要包括<code>要素对象</code> 和 <code>几何对象</code>两种类型</p></blockquote><ul><li>要素对象：<code>&quot;Feature&quot;, 或者 &quot;FeatureCollection&quot;</code></li><li>几何对象：<code>&quot;Point&quot;, &quot;MultiPoint&quot;, &quot;LineString&quot;, &quot;MultiLineString&quot;, &quot;Polygon&quot;, &quot;MultiPolygon&quot;, &quot;GeometryCollection&quot;</code></li></ul><h2 id="二、type" tabindex="-1">二、type <a class="header-anchor" href="#二、type" aria-hidden="true">#</a></h2><blockquote><p>该键的值由GeoJSON对象的类型所确定（同简介中的类型一致）</p></blockquote><h3 id="_1-要素对象-☆☆☆" tabindex="-1">1.要素对象 ☆☆☆ <a class="header-anchor" href="#_1-要素对象-☆☆☆" aria-hidden="true">#</a></h3><ul><li>要素对象必须有一个名字为&quot;geometry&quot;的成员，这个几何成员的值是上面定义的geometry对象或者JSON的null值。</li><li>要素对象必须有一个名字为“properties&quot;的成员，这个属性成员的值是一个对象（任何JSON对象或者JSON的null值）。</li><li>如果要素是常用的标识符，那么这个标识符应当包含名字为“id”的对象成员。<code>当然可以添加自定义属性，如用户想要点击弹框中的属性值</code></li></ul><h3 id="_2-几何对象" tabindex="-1">2.几何对象 <a class="header-anchor" href="#_2-几何对象" aria-hidden="true">#</a></h3><p><strong>Point</strong></p><ul><li>对类型&quot;Point&quot;来说，“coordinates&quot;成员必须是一个单独的position。</li></ul><p><strong>MultiPoint</strong></p><ul><li>对类型&quot;MultiPoint&quot;来说，&quot;coordinates&quot;成员必须是position数组。</li></ul><p><strong>LineString</strong></p><ul><li><p>对类型&quot;LineString&quot;来说，“coordinates&quot;成员必须是两个或者多个position的数组。</p><blockquote><p>线性环是具有4个或者更多position的封闭的线。第一个和最后一个位置是相同的（它们表示相同的的点）虽然线性环没有鲜明地作为GeoJSON几何类型，不过在面几何类型定义里有提到它。</p></blockquote></li></ul><p><strong>MultiLineString</strong></p><ul><li>对类型“MultiLineString&quot;来说，&quot;coordinates&quot;成员必须是一个线坐标数组的数组。</li></ul><p><strong>Polygon</strong></p><ul><li>对类型&quot;Polygon&quot;来说，&quot;coordinates&quot;成员必须是一个线性环坐标数组的数组。</li></ul><p><strong>MultiPlygon</strong></p><ul><li>对类型&quot;MultiPlygon&quot;来说，&quot;coordinates&quot;成员必须是面坐标数组的数组。</li></ul><p><strong>Geometry Collection</strong></p><ul><li>类型为&quot;GeometryCollection&quot;的GeoJSON对象是一个集合对象，它表示几何对象的集合。几何集合必须有一个名字为&quot;geometries&quot;的成员。与&quot;geometries&quot;相对应的值是一个数组。这个数组中的每个元素都是一个GeoJSON几何对象。</li></ul><h2 id="三、crs" tabindex="-1">三、crs <a class="header-anchor" href="#三、crs" aria-hidden="true">#</a></h2><ul><li>该键的值是一个坐标参考系统</li></ul><h2 id="四、bbox-bounding-boxes" tabindex="-1">四、bbox（bounding boxes） <a class="header-anchor" href="#四、bbox-bounding-boxes" aria-hidden="true">#</a></h2><ul><li>该键的值是一个边界框数值（类似geoserver中的边界框）</li></ul>',27),u=[n];function r(a,s,d,c,q,h){return t(),e("div",null,u)}const _=o(l,[["render",r]]);export{g as __pageData,_ as default};
