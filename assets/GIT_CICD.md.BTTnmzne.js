import{_ as e,c as t,a2 as o,o as i}from"./chunks/framework.BQmytedh.js";const u=JSON.parse('{"title":"持续集成 交付及持续部署 --笔记","description":"","frontmatter":{},"headers":[],"relativePath":"GIT/CICD.md","filePath":"GIT/CICD.md","lastUpdated":null}'),l={name:"GIT/CICD.md"};function n(r,a,d,s,c,p){return i(),t("div",null,a[0]||(a[0]=[o('<h1 id="持续集成-交付及持续部署-笔记" tabindex="-1">持续集成 交付及持续部署 --笔记 <a class="header-anchor" href="#持续集成-交付及持续部署-笔记" aria-label="Permalink to &quot;持续集成 交付及持续部署 --笔记&quot;">​</a></h1><blockquote><p>CI 代表持续集成，专注app的构建 和 测试</p><p>CD 代表持续交付 或 持续部署</p></blockquote><h2 id="一、持续集成-continuous-integration" tabindex="-1">一、持续集成-Continuous Integration <a class="header-anchor" href="#一、持续集成-continuous-integration" aria-label="Permalink to &quot;一、持续集成-Continuous Integration&quot;">​</a></h2><p>所有开发人员代码更改尽可能频繁合并到单个共享主分支的过程</p><ol><li>在任何给定时间，推送的代码量较小，出现问题也能更快调试 和 解决</li><li>更改后的集成代码会在几分钟内构件、集成和测试，向开发人员提供有关代码的及时反馈</li><li>持续集成可确保当所有开发人员的新提交被集成到存储库的发布分支，应用程序正常（已做测试）</li></ol><h2 id="二、持续交付" tabindex="-1">二、持续交付 <a class="header-anchor" href="#二、持续交付" aria-label="Permalink to &quot;二、持续交付&quot;">​</a></h2><p>在更短的周期内<code>手动</code>频繁、可靠地向客户发布代码更改版本。如根据项目大小，配置每周、每两周的发布计划（<code>类似问道的每月定期版本更新</code>），发布周期越短，出现问题越容易故障排除</p><h2 id="三、持续部署" tabindex="-1">三、持续部署 <a class="header-anchor" href="#三、持续部署" aria-label="Permalink to &quot;三、持续部署&quot;">​</a></h2><p>如果成功通过CI/CD的所有阶段，每个代码会直接发布给客户，无需人工干预，也即开发人员几分钟内就可看到更改已上线，而把时间用到构建其他应用程序方面。</p><p>💡 没有手动触发的持续交付是持续部署</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>持续交付 和 持续部署的区别</p><ol><li>是否涉及人工触发</li><li>何时发给客户</li></ol>',13)]))}const m=e(l,[["render",n]]);export{u as __pageData,m as default};
