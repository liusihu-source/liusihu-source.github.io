import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.a7175731.js";const p="/assets/image-20231205221830904.544c4e6d.png",o="/assets/image-20231207212631962.ee782c72.png",e="/assets/image-20231208181919299.38712f55.png",t="/assets/image-20231209173100471.5df1404d.png",c="/assets/image-20231209173150412.8f75234a.png",r="/assets/image-20231209173614695.0dc66750.png",y="/assets/image-20231209173750165.e4e9e219.png",i="/assets/image-20231209173907967.acddad3f.png",E="/assets/image-20231211103121474.e7aba878.png",F="/assets/image-20231211103029170.6db4015b.png",d="/assets/image-20231211102944158.84529eb8.png",u="/assets/image-20231209191818803.e1b255ad.png",h="/assets/image-20231209191909812.29f5e215.png",m="/assets/image-20231209192212693.64b1c807.png",x=JSON.parse('{"title":"爬虫常用模块 --笔记","description":"","frontmatter":{},"headers":[],"relativePath":"python/python爬虫/爬虫常用模块.md","filePath":"python/python爬虫/爬虫常用模块.md","lastUpdated":null}'),g={name:"python/python爬虫/爬虫常用模块.md"},C=l('<h1 id="爬虫常用模块-笔记" tabindex="-1">爬虫常用模块 --笔记 <a class="header-anchor" href="#爬虫常用模块-笔记" aria-label="Permalink to &quot;爬虫常用模块 --笔记&quot;">​</a></h1><h2 id="一、python爬虫技术核心" tabindex="-1">一、Python爬虫技术核心 <a class="header-anchor" href="#一、python爬虫技术核心" aria-label="Permalink to &quot;一、Python爬虫技术核心&quot;">​</a></h2><h3 id="_1-1-实现原理" tabindex="-1">1.1 实现原理 <a class="header-anchor" href="#_1-1-实现原理" aria-label="Permalink to &quot;1.1 实现原理&quot;">​</a></h3><p>第一步：使用Python的网络模块，比如urllib2、httplib、requests等模块，模拟浏览器向服务器发送正常的http（https）请求。服务器正常响应后，主机将收到包含所需信息的网页代码。</p><p>为了使Python发送的http（https）请求更像是浏览器发送的，可以在其中<code>添加header和cookies</code>。为了欺骗服务器的反爬虫，可以采取<code>利用代理或间隔一段时间</code>发送一个请求，以尽可能地避开反爬虫。</p><p>第二步：主机使用过滤模块，比如lxml、html.parser、re等模块，将所需信息从网页代码中过滤出来。</p><p>一个或多个模块用于过滤得到有效信息，常使用<code>re</code>模块。</p><h3 id="_1-2-爬取策略" tabindex="-1">1.2 爬取策略 <a class="header-anchor" href="#_1-2-爬取策略" aria-label="Permalink to &quot;1.2 爬取策略&quot;">​</a></h3><p>从爬虫程序出发，开始爬向多个页面，然后从页面中获取数据。这种形式有点类似于树状结构，如下图所示</p><p><img src="'+p+`" alt="image-20231205221830904"></p><p>爬行顺序的选择有点类似于二叉树，一个是深度优先，一个是广度优先</p><ul><li>深度优先 <ul><li>先请求Html1的数据，再从得到的数据中过滤得到Data1。然后请求Html2的数据，再过滤得到Data2，如BeautifulSoup</li></ul></li><li>广度优先 <ul><li>先将所有的网页数据收集完毕，然后一一过滤获取有效数据，如Pyspider</li></ul></li></ul><h3 id="_1-3-身份破解" tabindex="-1">1.3 身份破解 <a class="header-anchor" href="#_1-3-身份破解" aria-label="Permalink to &quot;1.3 身份破解&quot;">​</a></h3><p>有些网站需要登录后才能访问某个页面，可以利用urllib2库保存登录的Cookie或其他登录信息，再抓取其他页面就可以了。如cookielib。</p><h2 id="二、urllib-request" tabindex="-1">二、urllib.request <a class="header-anchor" href="#二、urllib-request" aria-label="Permalink to &quot;二、urllib.request&quot;">​</a></h2><h3 id="_2-1-request请求示例" tabindex="-1">2.1 request请求示例 <a class="header-anchor" href="#_2-1-request请求示例" aria-label="Permalink to &quot;2.1 request请求示例&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> time</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> urllib.request</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">linkBaidu</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;http://www.baidu.com&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        response </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> urllib.request.urlopen(url, </span><span style="color:#FFAB70;">timeout</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> response.read().decode(</span><span style="color:#9ECBFF;">&#39;utf-8&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">except</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Exception</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> e:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;网络地址错误&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">exit</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">with</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">open</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;baidu.txt&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;w&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> fp:</span></span>
<span class="line"><span style="color:#E1E4E8;">        fp.write(result)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;response.geturl(): </span><span style="color:#79B8FF;">%s</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;">response.geturl())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Press the green button in the gutter to run the script.</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__name__</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;__main__&#39;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    linkBaidu()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> time</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> urllib.request</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">linkBaidu</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;http://www.baidu.com&#39;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        response </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> urllib.request.urlopen(url, </span><span style="color:#E36209;">timeout</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> response.read().decode(</span><span style="color:#032F62;">&#39;utf-8&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">except</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Exception</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> e:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;网络地址错误&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">exit</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">with</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">open</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;baidu.txt&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;w&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> fp:</span></span>
<span class="line"><span style="color:#24292E;">        fp.write(result)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;response.geturl(): </span><span style="color:#005CC5;">%s</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">%</span><span style="color:#24292E;">response.geturl())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Press the green button in the gutter to run the script.</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__name__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;__main__&#39;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    linkBaidu()</span></span></code></pre></div><p><img src="`+o+`" alt="image-20231207212631962"></p><p>⚠️ 当做了解，<code>urllib较为简单，尽量不用</code>，尽量使用如BeautifulSoup等的框架</p><h2 id="三、logging" tabindex="-1">三、logging <a class="header-anchor" href="#三、logging" aria-label="Permalink to &quot;三、logging&quot;">​</a></h2><p>logging模块，用于日志保存。<code>logging模块可替代print函数功能，并将标准输出输入到日志文件保存</code>。</p><p>其他，暂略</p><h2 id="四、re模块-正则" tabindex="-1">四、re模块（正则）⭐ <a class="header-anchor" href="#四、re模块-正则" aria-label="Permalink to &quot;四、re模块（正则）:star:&quot;">​</a></h2><p>文件处理中不可少的模块，用于字符串的查找、定位。</p><h3 id="_4-1-字符" tabindex="-1">4.1 字符 <a class="header-anchor" href="#_4-1-字符" aria-label="Permalink to &quot;4.1 字符&quot;">​</a></h3><ul><li>.：匹配任意除换行符\\n外的字符</li><li>.abc匹配abc。\\：转义字符，使后一个字符改变原来的意思，a.bc匹配a.bc。</li><li>[…]：字符集（字符类）。对应字符集中的任意字符，第一个字符是^则取反。a[bc]d匹配abd和acd。</li></ul><h3 id="_4-2-预定义字符集" tabindex="-1">4.2 预定义字符集 <a class="header-anchor" href="#_4-2-预定义字符集" aria-label="Permalink to &quot;4.2 预定义字符集&quot;">​</a></h3><ul><li><p>\\d：数字[0-9]。</p></li><li><p>\\D：非数字<code>[^\\d]</code>。</p></li><li><p>\\s：空白字符[空格\\t\\r\\n\\f\\v]。</p><ul><li>\\t 制表符 Tab</li><li>\\r 回车符 Carriage return</li><li>\\n 换行符 Line Feed</li><li>\\f 换页符 Form Feed</li><li>\\v 垂直制表符 Vertical Tab</li></ul></li><li><p>\\S：非空白字符<code>[^\\s]</code>。</p></li><li><p>\\w：单词字符[a-zA-Z0-9_]。</p></li><li><p>\\W：非单词字符<code>[^\\w]</code>。</p></li></ul><h3 id="_4-3-数量词" tabindex="-1">4.3 数量词 <a class="header-anchor" href="#_4-3-数量词" aria-label="Permalink to &quot;4.3 数量词&quot;">​</a></h3><ul><li>*：匹配前一个字符0或无限次。<em>a1</em>b匹配ab、a1b、a11b……</li><li>+：匹配前一个字符1或无限次。a1<em>b匹配a1b、a11b……</em></li><li><em>?：匹配前一个字符0或1次。a1</em>b匹配ab、a1b。</li><li>{m}：匹配前一个字符m次。a1{3}b匹配a111b。</li><li>{m,n}：匹配前一个字符m至n次。a1{2,3}b匹配a11b、a111b。</li></ul><h3 id="_4-4-边界匹配" tabindex="-1">4.4 边界匹配 <a class="header-anchor" href="#_4-4-边界匹配" aria-label="Permalink to &quot;4.4 边界匹配&quot;">​</a></h3><ul><li>^：匹配字符串开头，如^abc匹配以abc开头的字符串。$</li><li>$： 匹配以xyz结尾的字符串。</li><li>\\A：仅匹配字符串开头，如\\Aabc。</li><li>\\Z：仅匹配字符串结尾，如Xyz\\Z。</li></ul><p>💡 补充<code>^</code> 和 <code>$</code> 与 \\A<code>和</code>\\Z 之间的区别</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># \`^\` 和 \`$\`  会匹配所有行中的内容</span></span>
<span class="line"><span style="color:#6A737D;">#\\A\` 和 \`\\Z  会匹配整个字符串的开头和结尾</span></span>
<span class="line"><span style="color:#6A737D;"># -*- coding: utf-8 -*-</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> re</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 默认模式下的 ^ 和 $</span></span>
<span class="line"><span style="color:#E1E4E8;">pattern1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> re.compile(</span><span style="color:#F97583;">r</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">^\\d</span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">, re.</span><span style="color:#79B8FF;">MULTILINE</span><span style="color:#E1E4E8;">)  </span><span style="color:#6A737D;"># 在多行模式下匹配每一行的开头</span></span>
<span class="line"><span style="color:#E1E4E8;">pattern2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> re.compile(</span><span style="color:#F97583;">r</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">\\d</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">$</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">, re.</span><span style="color:#79B8FF;">MULTILINE</span><span style="color:#E1E4E8;">)  </span><span style="color:#6A737D;"># 在多行模式下匹配每一行的结尾</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">text </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;&quot;123</span></span>
<span class="line"><span style="color:#9ECBFF;">4ab</span></span>
<span class="line"><span style="color:#9ECBFF;">4as56</span></span>
<span class="line"><span style="color:#9ECBFF;">c78d89&quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">result1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> pattern1.findall(text)</span></span>
<span class="line"><span style="color:#E1E4E8;">result2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> pattern2.findall(text)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Result using ^ (match start of lines):&quot;</span><span style="color:#E1E4E8;">, result1)  </span><span style="color:#6A737D;"># 匹配每一行的开头</span></span>
<span class="line"><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Result using $ (match end of lines):&quot;</span><span style="color:#E1E4E8;">, result2)  </span><span style="color:#6A737D;"># 匹配每一行的结尾</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 使用 \\A 和 \\Z</span></span>
<span class="line"><span style="color:#E1E4E8;">pattern3 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> re.compile(</span><span style="color:#F97583;">r</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">\\A\\d</span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">, re.</span><span style="color:#79B8FF;">MULTILINE</span><span style="color:#E1E4E8;">)  </span><span style="color:#6A737D;"># 不受多行模式影响，匹配整个字符串的开头</span></span>
<span class="line"><span style="color:#E1E4E8;">pattern4 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> re.compile(</span><span style="color:#F97583;">r</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">\\d</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">\\Z</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">, re.</span><span style="color:#79B8FF;">MULTILINE</span><span style="color:#E1E4E8;">)  </span><span style="color:#6A737D;"># 不受多行模式影响，匹配整个字符串的结尾</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">result3 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> pattern3.findall(text)</span></span>
<span class="line"><span style="color:#E1E4E8;">result4 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> pattern4.findall(text)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Result using </span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">A (match start of string):&quot;</span><span style="color:#E1E4E8;">, result3)  </span><span style="color:#6A737D;"># 匹配整个字符串的开头</span></span>
<span class="line"><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Result using </span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">Z (match end of string):&quot;</span><span style="color:#E1E4E8;">, result4)  </span><span style="color:#6A737D;"># 匹配整个字符串的结尾</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># \`^\` 和 \`$\`  会匹配所有行中的内容</span></span>
<span class="line"><span style="color:#6A737D;">#\\A\` 和 \`\\Z  会匹配整个字符串的开头和结尾</span></span>
<span class="line"><span style="color:#6A737D;"># -*- coding: utf-8 -*-</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> re</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 默认模式下的 ^ 和 $</span></span>
<span class="line"><span style="color:#24292E;">pattern1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> re.compile(</span><span style="color:#D73A49;">r</span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">^\\d</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">, re.</span><span style="color:#005CC5;">MULTILINE</span><span style="color:#24292E;">)  </span><span style="color:#6A737D;"># 在多行模式下匹配每一行的开头</span></span>
<span class="line"><span style="color:#24292E;">pattern2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> re.compile(</span><span style="color:#D73A49;">r</span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\d</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">$</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">, re.</span><span style="color:#005CC5;">MULTILINE</span><span style="color:#24292E;">)  </span><span style="color:#6A737D;"># 在多行模式下匹配每一行的结尾</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">text </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;&quot;123</span></span>
<span class="line"><span style="color:#032F62;">4ab</span></span>
<span class="line"><span style="color:#032F62;">4as56</span></span>
<span class="line"><span style="color:#032F62;">c78d89&quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">result1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pattern1.findall(text)</span></span>
<span class="line"><span style="color:#24292E;">result2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pattern2.findall(text)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Result using ^ (match start of lines):&quot;</span><span style="color:#24292E;">, result1)  </span><span style="color:#6A737D;"># 匹配每一行的开头</span></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Result using $ (match end of lines):&quot;</span><span style="color:#24292E;">, result2)  </span><span style="color:#6A737D;"># 匹配每一行的结尾</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 使用 \\A 和 \\Z</span></span>
<span class="line"><span style="color:#24292E;">pattern3 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> re.compile(</span><span style="color:#D73A49;">r</span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\A\\d</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">, re.</span><span style="color:#005CC5;">MULTILINE</span><span style="color:#24292E;">)  </span><span style="color:#6A737D;"># 不受多行模式影响，匹配整个字符串的开头</span></span>
<span class="line"><span style="color:#24292E;">pattern4 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> re.compile(</span><span style="color:#D73A49;">r</span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\d</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">\\Z</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">, re.</span><span style="color:#005CC5;">MULTILINE</span><span style="color:#24292E;">)  </span><span style="color:#6A737D;"># 不受多行模式影响，匹配整个字符串的结尾</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">result3 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pattern3.findall(text)</span></span>
<span class="line"><span style="color:#24292E;">result4 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pattern4.findall(text)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Result using </span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">A (match start of string):&quot;</span><span style="color:#24292E;">, result3)  </span><span style="color:#6A737D;"># 匹配整个字符串的开头</span></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Result using </span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">Z (match end of string):&quot;</span><span style="color:#24292E;">, result4)  </span><span style="color:#6A737D;"># 匹配整个字符串的结尾</span></span></code></pre></div><p><img src="`+e+`" alt="image-20231208181919299"></p><h3 id="_4-5-常用方法" tabindex="-1">4.5 常用方法 <a class="header-anchor" href="#_4-5-常用方法" aria-label="Permalink to &quot;4.5 常用方法&quot;">​</a></h3><p>compile()</p><ul><li><strong>说明</strong>：编译正则表达式模式，返回一个正则表达式对象。</li><li><strong>示例</strong>：</li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> re</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">pattern </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> re.compile(</span><span style="color:#F97583;">r</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">\\d</span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">)  </span><span style="color:#6A737D;"># 编译一个匹配一个或多个数字的模式</span></span>
<span class="line"><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(pattern)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> re</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">pattern </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> re.compile(</span><span style="color:#D73A49;">r</span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\d</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">)  </span><span style="color:#6A737D;"># 编译一个匹配一个或多个数字的模式</span></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(pattern)</span></span></code></pre></div><p><img src="`+t+`" alt="image-20231209173100471"></p><p>search()</p><ul><li><strong>说明</strong>：在<code>字符串中搜索匹配正则表达式模式的第一个位置</code>，返回一个匹配对象或 None。</li><li><strong>示例</strong></li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> re.search(</span><span style="color:#F97583;">r</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">\\d</span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;The price is $50&#39;</span><span style="color:#E1E4E8;">)  </span><span style="color:#6A737D;"># 在字符串中搜索一个或多个数字</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> result:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Match found:&quot;</span><span style="color:#E1E4E8;">, result.group())  </span><span style="color:#6A737D;"># 输出匹配结果</span></span>
<span class="line"><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;No match&quot;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> re.search(</span><span style="color:#D73A49;">r</span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\d</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;The price is $50&#39;</span><span style="color:#24292E;">)  </span><span style="color:#6A737D;"># 在字符串中搜索一个或多个数字</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> result:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Match found:&quot;</span><span style="color:#24292E;">, result.group())  </span><span style="color:#6A737D;"># 输出匹配结果</span></span>
<span class="line"><span style="color:#D73A49;">else</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;No match&quot;</span><span style="color:#24292E;">)</span></span></code></pre></div><p><img src="`+c+`" alt="image-20231209173150412"></p><p>match()</p><ul><li><strong>说明</strong>：尝试从字符串的<code>开头</code>匹配正则表达式模式，返回一个匹配对象或 None。</li><li><strong>示例</strong>：</li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> re.match(</span><span style="color:#F97583;">r</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">\\d</span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;123abc456&#39;</span><span style="color:#E1E4E8;">)  </span><span style="color:#6A737D;"># 尝试从字符串开头匹配一个或多个数字</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> result:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Match found:&quot;</span><span style="color:#E1E4E8;">, result.group())  </span><span style="color:#6A737D;"># 输出匹配结果</span></span>
<span class="line"><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;No match&quot;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> re.match(</span><span style="color:#D73A49;">r</span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\d</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;123abc456&#39;</span><span style="color:#24292E;">)  </span><span style="color:#6A737D;"># 尝试从字符串开头匹配一个或多个数字</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> result:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Match found:&quot;</span><span style="color:#24292E;">, result.group())  </span><span style="color:#6A737D;"># 输出匹配结果</span></span>
<span class="line"><span style="color:#D73A49;">else</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;No match&quot;</span><span style="color:#24292E;">)</span></span></code></pre></div><p><img src="`+r+`" alt="image-20231209173614695"></p><p>💡 上述的match的group方法：当使用 <code>re.match()</code> 或 <code>re.search()</code> 进行匹配后返回的匹配对象（比如 <code>result_match</code> 或 <code>result_search</code>）中，<code>group()</code> 方法用于提取匹配到的文本内容。</p><p>findall()</p><ul><li><strong>说明</strong>：返回字符串中所有与正则表达式模式匹配的字符串列表。</li><li><strong>示例</strong>：</li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">results </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> re.findall(</span><span style="color:#F97583;">r</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">\\d</span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;There are 3 apples and 5 oranges&#39;</span><span style="color:#E1E4E8;">)  </span><span style="color:#6A737D;"># 找到所有的数字</span></span>
<span class="line"><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Matches found:&quot;</span><span style="color:#E1E4E8;">, results)  </span><span style="color:#6A737D;"># 输出所有匹配结果</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">results </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> re.findall(</span><span style="color:#D73A49;">r</span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\d</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;There are 3 apples and 5 oranges&#39;</span><span style="color:#24292E;">)  </span><span style="color:#6A737D;"># 找到所有的数字</span></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Matches found:&quot;</span><span style="color:#24292E;">, results)  </span><span style="color:#6A737D;"># 输出所有匹配结果</span></span></code></pre></div><p><img src="`+y+`" alt="image-20231209173750165"></p><p>finditer()</p><ul><li><strong>说明</strong>：返回一个迭代器，迭代器中每个元素是一个匹配对象，包含了正则表达式模式的匹配信息。</li><li><strong>示例</strong>：</li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">matches </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> re.finditer(</span><span style="color:#F97583;">r</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">\\d</span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;There are 3 apples and 5 oranges&#39;</span><span style="color:#E1E4E8;">)  </span><span style="color:#6A737D;"># 找到所有的数字</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> match </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> matches:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Match found:&quot;</span><span style="color:#E1E4E8;">, match.group())  </span><span style="color:#6A737D;"># 输出每个匹配结果</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">matches </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> re.finditer(</span><span style="color:#D73A49;">r</span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\d</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;There are 3 apples and 5 oranges&#39;</span><span style="color:#24292E;">)  </span><span style="color:#6A737D;"># 找到所有的数字</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> match </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> matches:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Match found:&quot;</span><span style="color:#24292E;">, match.group())  </span><span style="color:#6A737D;"># 输出每个匹配结果</span></span></code></pre></div><p><img src="`+i+`" alt="image-20231209173907967"></p><h3 id="_4-6-练习" tabindex="-1">4.6 练习 <a class="header-anchor" href="#_4-6-练习" aria-label="Permalink to &quot;4.6 练习&quot;">​</a></h3><p><strong>匹配邮箱地址</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> re</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">pattern </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">r</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">^[a-zA-Z0-9._%+-]</span><span style="color:#F97583;">+</span><span style="color:#DBEDFF;">@</span><span style="color:#79B8FF;">[a-zA-Z0-9.-]</span><span style="color:#F97583;">+</span><span style="color:#85E89D;font-weight:bold;">\\.</span><span style="color:#79B8FF;">[a-zA-Z]</span><span style="color:#F97583;">{2,}</span><span style="color:#79B8FF;">$</span><span style="color:#9ECBFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">emails </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;example@example.com&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;john.doe@example.co.uk&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;invalid_email.com&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;another@example.&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> email </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> emails:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> re.match(pattern, email):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">f</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">{</span><span style="color:#E1E4E8;">email</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;"> is a valid email.&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">f</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">{</span><span style="color:#E1E4E8;">email</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;"> is not a valid email.&quot;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> re</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">pattern </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">r</span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">^[a-zA-Z0-9._%+-]</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">@</span><span style="color:#005CC5;">[a-zA-Z0-9.-]</span><span style="color:#D73A49;">+</span><span style="color:#22863A;font-weight:bold;">\\.</span><span style="color:#005CC5;">[a-zA-Z]</span><span style="color:#D73A49;">{2,}</span><span style="color:#005CC5;">$</span><span style="color:#032F62;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">emails </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;example@example.com&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;john.doe@example.co.uk&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;invalid_email.com&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;another@example.&quot;</span></span>
<span class="line"><span style="color:#24292E;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> email </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> emails:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> re.match(pattern, email):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">f</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">{</span><span style="color:#24292E;">email</span><span style="color:#005CC5;">}</span><span style="color:#032F62;"> is a valid email.&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">else</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">f</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">{</span><span style="color:#24292E;">email</span><span style="color:#005CC5;">}</span><span style="color:#032F62;"> is not a valid email.&quot;</span><span style="color:#24292E;">)</span></span></code></pre></div><p><img src="`+E+`" alt="image-20231211103121474"></p><p>解释</p><ul><li><code>^</code>：匹配字符串的开头。</li><li><code>[a-zA-Z0-9._%+-]+</code>：匹配邮箱地址的用户名部分。 <ul><li>[]用于表示一个字符集，其中列出的字符可以匹配字符串中的任意一个字符。如<code>[abc]</code> 匹配单个字符，可以是 <code>a</code>、<code>b</code> 或 <code>c</code> 中的任意一个。</li><li><code>._%+-</code> 匹配特殊字符 <code>.</code>, <code>_</code>, <code>%</code>, <code>+</code>, <code>-</code> 中的任意一个。</li></ul></li><li><code>@</code>：匹配邮箱地址中的 @ 符号。</li><li><code>[a-zA-Z0-9.-]+</code>：匹配邮箱地址的域名部分。</li><li><code>\\.</code>：匹配邮箱地址中的点号。 <ul><li><code>\\</code>表示转义符</li></ul></li><li><code>[a-zA-Z]{2,}$</code>：匹配邮箱地址中的顶级域名部分。 <ul><li>{2, }$ 用于匹配至少2个字母的域名结尾部分</li></ul></li></ul><p><strong>匹配电话号码</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> re</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">pattern </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">r</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">^</span><span style="color:#85E89D;font-weight:bold;">\\+</span><span style="color:#79B8FF;">\\d</span><span style="color:#F97583;">{1,3}</span><span style="color:#DBEDFF;">-</span><span style="color:#79B8FF;">\\d</span><span style="color:#F97583;">{3,}</span><span style="color:#DBEDFF;">-</span><span style="color:#79B8FF;">\\d</span><span style="color:#F97583;">{6,}</span><span style="color:#79B8FF;">$</span><span style="color:#9ECBFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">phone_numbers </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;+1-123-456789&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;+123-45-6789012&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;123-456789&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;+12-34567890&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> phone </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> phone_numbers:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> re.match(pattern, phone):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">f</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">{</span><span style="color:#E1E4E8;">phone</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;"> is a valid phone number.&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">f</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">{</span><span style="color:#E1E4E8;">phone</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;"> is not a valid phone number.&quot;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> re</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">pattern </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">r</span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">^</span><span style="color:#22863A;font-weight:bold;">\\+</span><span style="color:#005CC5;">\\d</span><span style="color:#D73A49;">{1,3}</span><span style="color:#032F62;">-</span><span style="color:#005CC5;">\\d</span><span style="color:#D73A49;">{3,}</span><span style="color:#032F62;">-</span><span style="color:#005CC5;">\\d</span><span style="color:#D73A49;">{6,}</span><span style="color:#005CC5;">$</span><span style="color:#032F62;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">phone_numbers </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;+1-123-456789&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;+123-45-6789012&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;123-456789&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;+12-34567890&quot;</span></span>
<span class="line"><span style="color:#24292E;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> phone </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> phone_numbers:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> re.match(pattern, phone):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">f</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">{</span><span style="color:#24292E;">phone</span><span style="color:#005CC5;">}</span><span style="color:#032F62;"> is a valid phone number.&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">else</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">f</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">{</span><span style="color:#24292E;">phone</span><span style="color:#005CC5;">}</span><span style="color:#032F62;"> is not a valid phone number.&quot;</span><span style="color:#24292E;">)</span></span></code></pre></div><p><img src="`+F+`" alt="image-20231211103029170"></p><p>解释</p><ul><li><code>^</code>：匹配字符串的开头。</li><li><code>\\+</code>：匹配加号。</li><li><code>\\d{1,3}</code>：匹配 1 到 3 位的数字，用于国家代码。</li><li><code>-</code>：匹配短横线。</li><li><code>\\d{3,}</code>：匹配至少 3 位数字，电话号码的一部分。</li><li><code>-</code>：匹配短横线。</li><li><code>\\d{6,}$</code>：匹配至少 6 位数字，电话号码的最后一部分。</li></ul><p><strong>匹配HTML标签</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> re</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">pattern </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">r</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#DBEDFF;">&lt;h1&gt;</span><span style="color:#79B8FF;">.</span><span style="color:#F97583;">*?</span><span style="color:#DBEDFF;">&lt;/h1&gt;</span><span style="color:#9ECBFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">html_content </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#9ECBFF;">&lt;h1&gt;This is a heading&lt;/h1&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">&lt;p&gt;This is a paragraph.&lt;/p&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">&lt;h1&gt;This is another heading&lt;/h1&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">headings </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> re.findall(pattern, html_content)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> heading </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> headings:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">f</span><span style="color:#9ECBFF;">&quot;Found heading: </span><span style="color:#79B8FF;">{</span><span style="color:#E1E4E8;">heading</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> re</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">pattern </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">r</span><span style="color:#032F62;">&#39;&lt;h1&gt;</span><span style="color:#005CC5;">.</span><span style="color:#D73A49;">*?</span><span style="color:#032F62;">&lt;/h1&gt;&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">html_content </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#032F62;">&lt;h1&gt;This is a heading&lt;/h1&gt;</span></span>
<span class="line"><span style="color:#032F62;">&lt;p&gt;This is a paragraph.&lt;/p&gt;</span></span>
<span class="line"><span style="color:#032F62;">&lt;h1&gt;This is another heading&lt;/h1&gt;</span></span>
<span class="line"><span style="color:#032F62;">&quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">headings </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> re.findall(pattern, html_content)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> heading </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> headings:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">f</span><span style="color:#032F62;">&quot;Found heading: </span><span style="color:#005CC5;">{</span><span style="color:#24292E;">heading</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">)</span></span></code></pre></div><p><img src="`+d+'" alt="image-20231211102944158"></p><p>解释</p><ul><li><code>&lt;h1&gt;</code>：匹配 <code>&lt;h1&gt;</code> 标签的开头部分。</li><li><code>.*?</code>：匹配任意字符（除换行符外）任意次，使用非贪婪匹配。</li><li><code>&lt;/h1&gt;</code>：匹配 <code>&lt;/h1&gt;</code> 标签的结尾部分。</li></ul><h2 id="五、其他模块" tabindex="-1">五、其他模块 <a class="header-anchor" href="#五、其他模块" aria-label="Permalink to &quot;五、其他模块&quot;">​</a></h2><h3 id="_5-1-time" tabindex="-1">5.1 time <a class="header-anchor" href="#_5-1-time" aria-label="Permalink to &quot;5.1 time&quot;">​</a></h3><p>与时间相关的模块，常用方法如下</p><ul><li><p>time()</p><ul><li>返回当前的时间戳</li></ul></li><li><p>localtime()</p><ul><li>将当前时间戳转换成当前时区的struct_time</li></ul></li><li><p>sleep()</p><ul><li>计时器</li></ul></li><li><p>strftime()</p><ul><li>用于把一个srtuct_time转换成格式化的时间字符串，时间字符串支持的格式符号如下</li></ul><p><img src="'+u+`" alt="image-20231209191818803"></p></li></ul><p>案例1</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> time</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">current_time </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> time.localtime()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 格式化时间元组为字符串</span></span>
<span class="line"><span style="color:#E1E4E8;">formatted_time </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> time.strftime(</span><span style="color:#9ECBFF;">&quot;%Y-%m-</span><span style="color:#79B8FF;">%d</span><span style="color:#9ECBFF;"> %H:%M:%S&quot;</span><span style="color:#E1E4E8;">, current_time)</span></span>
<span class="line"><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Formatted time:&quot;</span><span style="color:#E1E4E8;">, formatted_time)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> time</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">current_time </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> time.localtime()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 格式化时间元组为字符串</span></span>
<span class="line"><span style="color:#24292E;">formatted_time </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> time.strftime(</span><span style="color:#032F62;">&quot;%Y-%m-</span><span style="color:#005CC5;">%d</span><span style="color:#032F62;"> %H:%M:%S&quot;</span><span style="color:#24292E;">, current_time)</span></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Formatted time:&quot;</span><span style="color:#24292E;">, formatted_time)</span></span></code></pre></div><p><img src="`+h+`" alt="image-20231209191909812"></p><p>案例2</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 记录开始时间</span></span>
<span class="line"><span style="color:#E1E4E8;">start_time </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> time.time()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 模拟一个需要测量执行时间的代码块</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> _ </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">range</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1000000</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    _ </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;"># 这里可以放需要计时的代码</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 记录结束时间</span></span>
<span class="line"><span style="color:#E1E4E8;">end_time </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> time.time()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 计算执行时间</span></span>
<span class="line"><span style="color:#E1E4E8;">execution_time </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> end_time </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> start_time</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">f</span><span style="color:#9ECBFF;">&quot;Execution time: </span><span style="color:#79B8FF;">{</span><span style="color:#E1E4E8;">execution_time</span><span style="color:#F97583;">:.6f</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;"> seconds&quot;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 记录开始时间</span></span>
<span class="line"><span style="color:#24292E;">start_time </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> time.time()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 模拟一个需要测量执行时间的代码块</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> _ </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">range</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1000000</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    _ </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">  </span><span style="color:#6A737D;"># 这里可以放需要计时的代码</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 记录结束时间</span></span>
<span class="line"><span style="color:#24292E;">end_time </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> time.time()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 计算执行时间</span></span>
<span class="line"><span style="color:#24292E;">execution_time </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> end_time </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> start_time</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">f</span><span style="color:#032F62;">&quot;Execution time: </span><span style="color:#005CC5;">{</span><span style="color:#24292E;">execution_time</span><span style="color:#D73A49;">:.6f</span><span style="color:#005CC5;">}</span><span style="color:#032F62;"> seconds&quot;</span><span style="color:#24292E;">)</span></span></code></pre></div><p><img src="`+m+'" alt="image-20231209192212693"></p>',83),A=[C];function q(D,B,b,_,f,v){return n(),a("div",null,A)}const T=s(g,[["render",q]]);export{x as __pageData,T as default};
