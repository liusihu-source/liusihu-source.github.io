import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.a7175731.js";const d=JSON.parse('{"title":"Python --笔记","description":"","frontmatter":{},"headers":[],"relativePath":"python/基本用法.md","filePath":"python/基本用法.md","lastUpdated":null}'),o={name:"python/基本用法.md"},p=l(`<h1 id="python-笔记" tabindex="-1">Python --笔记 <a class="header-anchor" href="#python-笔记" aria-label="Permalink to &quot;Python --笔记&quot;">​</a></h1><p><a href="https://www.runoob.com/python3/python3-tutorial.html" target="_blank" rel="noreferrer">https://www.runoob.com/python3/python3-tutorial.html</a></p><h2 id="_1、python安装" tabindex="-1">1、python安装 <a class="header-anchor" href="#_1、python安装" aria-label="Permalink to &quot;1、python安装&quot;">​</a></h2><ul><li><a href="https://www.python.org/" target="_blank" rel="noreferrer">https://www.python.org/</a></li><li>自己的百度网盘--python-3.8.2-amd64</li><li>本机使用的python3.8.2</li></ul><h2 id="_2、python基础" tabindex="-1">2、python基础 <a class="header-anchor" href="#_2、python基础" aria-label="Permalink to &quot;2、python基础&quot;">​</a></h2><h3 id="编码" tabindex="-1">编码 <a class="header-anchor" href="#编码" aria-label="Permalink to &quot;编码&quot;">​</a></h3><ul><li>utf-8</li></ul><h3 id="标识符" tabindex="-1">标识符 <a class="header-anchor" href="#标识符" aria-label="Permalink to &quot;标识符&quot;">​</a></h3><ul><li>第一个字符必须是字母表中字母或下划线 <strong>_</strong></li><li>标识符的其他的部分由<code>字母、数字和下划线组成</code></li><li>标识符对<code>大小写敏感</code></li></ul><h3 id="关键字" tabindex="-1">关键字 <a class="header-anchor" href="#关键字" aria-label="Permalink to &quot;关键字&quot;">​</a></h3><ul><li>我们不能把它们用作任何标识符名称。</li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#Python 的标准库提供了一个 keyword 模块，可以输出当前版本的所有关键字  </span></span>
<span class="line"><span style="color:#F97583;">&gt;&gt;&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> keyword</span></span>
<span class="line"><span style="color:#F97583;">&gt;&gt;&gt;</span><span style="color:#E1E4E8;"> keyword.kwlist</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#9ECBFF;">&#39;False&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;None&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;True&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;and&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;as&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;assert&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;break&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;class&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;continue&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;def&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;del&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;elif&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;else&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;except&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;finally&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;for&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;from&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;global&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;if&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;import&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;in&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;is&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;lambda&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;nonlocal&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;not&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;or&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;pass&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;raise&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;return&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;try&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;while&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;with&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;yield&#39;</span><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#Python 的标准库提供了一个 keyword 模块，可以输出当前版本的所有关键字  </span></span>
<span class="line"><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> keyword</span></span>
<span class="line"><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> keyword.kwlist</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">[</span><span style="color:#032F62;">&#39;False&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;None&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;True&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;and&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;as&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;assert&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;break&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;class&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;continue&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;def&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;del&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;elif&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;else&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;except&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;finally&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;for&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;from&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;global&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;if&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;import&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;in&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;is&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;lambda&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;nonlocal&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;not&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;or&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;pass&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;raise&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;return&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;try&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;while&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;with&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;yield&#39;</span><span style="color:#24292E;">]</span></span></code></pre></div><h3 id="注释" tabindex="-1">注释 <a class="header-anchor" href="#注释" aria-label="Permalink to &quot;注释&quot;">​</a></h3><ul><li>单行#</li><li>多行 <strong>&#39;&#39;&#39;</strong> 和 <strong>&quot;&quot;&quot;</strong></li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#9ECBFF;">坡度、坡向、山体阴影</span></span>
<span class="line"><span style="color:#9ECBFF;">@source：原始数据源</span></span>
<span class="line"><span style="color:#9ECBFF;">@ProcessType：具体处理方案，坡度/坡向/山体阴影</span></span>
<span class="line"><span style="color:#9ECBFF;">@outTif：输出文件位置及文件名</span></span>
<span class="line"><span style="color:#9ECBFF;">@format：数据类型</span></span>
<span class="line"><span style="color:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CreateSpeDemPro</span><span style="color:#E1E4E8;">(source,ProcessType,outTif,format):</span></span>
<span class="line"><span style="color:#E1E4E8;">    dataSource </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> gdal.Open(source)</span><span style="color:#6A737D;">#打开数据源</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(ProcessType </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;slope&#39;</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">        gdal.DEMProcessing(outTif,dataSource,</span><span style="color:#9ECBFF;">&#39;slope&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">format</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">format</span><span style="color:#E1E4E8;">)</span><span style="color:#6A737D;">#坡度</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">elif</span><span style="color:#E1E4E8;">(ProcessType </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;aspect&#39;</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">        gdal.DEMProcessing(outTif, dataSource, </span><span style="color:#9ECBFF;">&#39;aspect&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">format</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">format</span><span style="color:#E1E4E8;">)</span><span style="color:#6A737D;">#坡向</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        gdal.DEMProcessing(outTif, dataSource, </span><span style="color:#9ECBFF;">&#39;hillshade&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">format</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">format</span><span style="color:#E1E4E8;">)</span><span style="color:#6A737D;">#山体阴影</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#032F62;">坡度、坡向、山体阴影</span></span>
<span class="line"><span style="color:#032F62;">@source：原始数据源</span></span>
<span class="line"><span style="color:#032F62;">@ProcessType：具体处理方案，坡度/坡向/山体阴影</span></span>
<span class="line"><span style="color:#032F62;">@outTif：输出文件位置及文件名</span></span>
<span class="line"><span style="color:#032F62;">@format：数据类型</span></span>
<span class="line"><span style="color:#032F62;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CreateSpeDemPro</span><span style="color:#24292E;">(source,ProcessType,outTif,format):</span></span>
<span class="line"><span style="color:#24292E;">    dataSource </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> gdal.Open(source)</span><span style="color:#6A737D;">#打开数据源</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(ProcessType </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;slope&#39;</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">        gdal.DEMProcessing(outTif,dataSource,</span><span style="color:#032F62;">&#39;slope&#39;</span><span style="color:#24292E;">,</span><span style="color:#E36209;">format</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">format</span><span style="color:#24292E;">)</span><span style="color:#6A737D;">#坡度</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">elif</span><span style="color:#24292E;">(ProcessType </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;aspect&#39;</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">        gdal.DEMProcessing(outTif, dataSource, </span><span style="color:#032F62;">&#39;aspect&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">format</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">format</span><span style="color:#24292E;">)</span><span style="color:#6A737D;">#坡向</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">else</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        gdal.DEMProcessing(outTif, dataSource, </span><span style="color:#032F62;">&#39;hillshade&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">format</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">format</span><span style="color:#24292E;">)</span><span style="color:#6A737D;">#山体阴影</span></span></code></pre></div><h3 id="多行语句" tabindex="-1">多行语句 <a class="header-anchor" href="#多行语句" aria-label="Permalink to &quot;多行语句&quot;">​</a></h3><p>Python 通常是一行写完一条语句，但如果语句很长，我们可以使用反斜杠 *<em>*</em> 来实现多行语句，例如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">total = item_one + \\</span></span>
<span class="line"><span style="color:#e1e4e8;">        item_two + \\</span></span>
<span class="line"><span style="color:#e1e4e8;">        item_three</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">total = item_one + \\</span></span>
<span class="line"><span style="color:#24292e;">        item_two + \\</span></span>
<span class="line"><span style="color:#24292e;">        item_three</span></span></code></pre></div><p>在 [], {}, 或 () 中的多行语句，不需要使用反斜杠 ****，例如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">total = [&#39;item_one&#39;, &#39;item_two&#39;, &#39;item_three&#39;,</span></span>
<span class="line"><span style="color:#e1e4e8;">        &#39;item_four&#39;, &#39;item_five&#39;]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">total = [&#39;item_one&#39;, &#39;item_two&#39;, &#39;item_three&#39;,</span></span>
<span class="line"><span style="color:#24292e;">        &#39;item_four&#39;, &#39;item_five&#39;]</span></span></code></pre></div><h3 id="等待用户输入" tabindex="-1">等待用户输入 <a class="header-anchor" href="#等待用户输入" aria-label="Permalink to &quot;等待用户输入&quot;">​</a></h3><p>执行下面的程序在按回车键后就会等待用户输入：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#!/usr/bin/python3  input(&quot;\\n\\n按下 enter 键后退出。&quot;)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">以上代码中 ，</span><span style="color:#F97583;">**</span><span style="color:#E1E4E8;">\\</span><span style="color:#FDAEB7;font-style:italic;">n\\n** 在结果输出前会输出两个新的空行。一旦用户按下 **enter** 键时，程序将退出。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#!/usr/bin/python3  input(&quot;\\n\\n按下 enter 键后退出。&quot;)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">以上代码中 ，</span><span style="color:#D73A49;">**</span><span style="color:#24292E;">\\</span><span style="color:#B31D28;font-style:italic;">n\\n** 在结果输出前会输出两个新的空行。一旦用户按下 **enter** 键时，程序将退出。</span></span></code></pre></div><h2 id="_3、python使用" tabindex="-1">3、python使用 <a class="header-anchor" href="#_3、python使用" aria-label="Permalink to &quot;3、python使用&quot;">​</a></h2><ul><li>python3使用方式如下--菜鸟教程python3</li></ul><p><a href="https://www.runoob.com/python3/python3-data-type.html" target="_blank" rel="noreferrer">https://www.runoob.com/python3/python3-data-type.html</a></p>`,26),e=[p];function t(r,c,y,E,i,F){return a(),n("div",null,e)}const u=s(o,[["render",t]]);export{d as __pageData,u as default};
