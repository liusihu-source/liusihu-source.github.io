import{_ as a,c as o,a2 as r,o as t}from"./chunks/framework.BQmytedh.js";const m=JSON.parse('{"title":"WebAssembly 和 JavaScript  --笔记","description":"","frontmatter":{},"headers":[],"relativePath":"个人/其他/WebAssembly和JavaScript.md","filePath":"个人/其他/WebAssembly和JavaScript.md","lastUpdated":null}'),c={name:"个人/其他/WebAssembly和JavaScript.md"};function l(s,e,d,i,b,n){return t(),o("div",null,e[0]||(e[0]=[r('<h1 id="webassembly-和-javascript-笔记" tabindex="-1">WebAssembly 和 JavaScript --笔记 <a class="header-anchor" href="#webassembly-和-javascript-笔记" aria-label="Permalink to &quot;WebAssembly 和 JavaScript  --笔记&quot;">​</a></h1><blockquote><p><a href="https://mp.weixin.qq.com/s/1VZxzb-SbnPyvruJUBzhQA" target="_blank" rel="noreferrer">https://mp.weixin.qq.com/s/1VZxzb-SbnPyvruJUBzhQA</a></p></blockquote><h2 id="一、基础概念" tabindex="-1">一、基础概念 <a class="header-anchor" href="#一、基础概念" aria-label="Permalink to &quot;一、基础概念&quot;">​</a></h2><ul><li><code>JavaScript</code>，诞生于 <code>1995</code> 年的一种高级编程语言，最初用于在 <code>Web</code> 浏览器中添加交互式元素。互动效果如弹出新的窗口，响应按钮点击，改变网页内容等，几乎都离不开 <code>JavaScript</code>。它的核心设计理念是&quot;简单易懂”，语言本身易于上手，对新手友好。随着 <code>Node.js</code> 的出现，<code>JavaScript</code> 已不仅限于前端开发，而是成为一种全栈编程语言。</li><li><code>WebAssembly</code>，或者简称 <code>Wasm</code>，是一种在浏览器环境下执行的新型二进制指令集，这就让浏览器拥有了执行其他代码（如 <code>C、C++、Rust、Java</code>）的能力。相较于<code>JavaScript</code> 的文本格式，<code>WebAssembly</code> 以二进制格式表达代码，使得其具有较高的执行效率。</li></ul><h2 id="二、使用" tabindex="-1">二、使用 <a class="header-anchor" href="#二、使用" aria-label="Permalink to &quot;二、使用&quot;">​</a></h2><p>略，见上述链接中的测试代码</p><p>💡 <code>PerformanceObserver</code> 是 Web Performance API 中的一个接口，它提供了一种监测浏览器性能信息的方式。通过 <code>PerformanceObserver</code>，可以收集有关页面性能、资源加载和用户交互的详细信息，以便进行性能分析和优化。通过observe(）监听，可以监听的内容如下</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry/entryType" target="_blank" rel="noreferrer">https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry/entryType</a></p><h2 id="三、总结" tabindex="-1">三、总结 <a class="header-anchor" href="#三、总结" aria-label="Permalink to &quot;三、总结&quot;">​</a></h2><blockquote><ul><li><code>JavaScript</code>：首屏加载快、可同步加载、计算性能差：需要在业务首屏渲染前执行的策略、计算逻辑简单的策略，优先考虑使用 JavaScript 执行，例如 CSRF 防护、API 调用鉴权等策略。</li></ul></blockquote><blockquote><ul><li><code>WebAssembly</code>：首屏初始化慢、只能异步加载、计算性能好：可以在业务首屏渲染完成后异步执行的策略，计算逻辑非常复杂、有密集 CPU 计算的策略，考虑使用 WebAssembly 模块执行，例如需要给业务图片在前端增加水印，需要对图片数据进行重写等策略。</li></ul></blockquote>',11)]))}const h=a(c,[["render",l]]);export{m as __pageData,h as default};
