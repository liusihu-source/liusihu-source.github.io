import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.a7175731.js";const C=JSON.parse('{"title":"async&await --笔记","description":"","frontmatter":{},"headers":[],"relativePath":"前端/JS/async&await.md","filePath":"前端/JS/async&await.md","lastUpdated":null}'),p={name:"前端/JS/async&await.md"},o=l(`<h1 id="async-await-笔记" tabindex="-1">async&amp;await --笔记 <a class="header-anchor" href="#async-await-笔记" aria-label="Permalink to &quot;async&amp;await --笔记&quot;">​</a></h1><blockquote><p>async 函数是使用<code>async</code>关键字声明的函数。async 函数是 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction" target="_blank" rel="noreferrer"><code>AsyncFunction</code></a> 构造函数的实例，并且其中允许使用 <code>await</code> 关键字。<code>async</code> 和 <code>await</code> 关键字让我们可以用一种更简洁的方式写出基于 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noreferrer"><code>Promise</code></a> 的异步行为，而无需刻意地链式调用 <code>promise</code>。</p></blockquote><h4 id="一、尝试一下" tabindex="-1">一、尝试一下 <a class="header-anchor" href="#一、尝试一下" aria-label="Permalink to &quot;一、尝试一下&quot;">​</a></h4><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">resolveAfter2Seconds</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">resolve</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">setTimeout</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;resolved&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }, </span><span style="color:#79B8FF;">2000</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">asyncCall</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;calling&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">result</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">resolveAfter2Seconds</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(result);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// Expected output: &quot;resolved&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">asyncCall</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// &quot;calling&quot;</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;resolved&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resolveAfter2Seconds</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">((</span><span style="color:#E36209;">resolve</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">setTimeout</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;resolved&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }, </span><span style="color:#005CC5;">2000</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">asyncCall</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;calling&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">result</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resolveAfter2Seconds</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(result);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Expected output: &quot;resolved&quot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">asyncCall</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// &quot;calling&quot;</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;resolved&quot;</span></span></code></pre></div><h4 id="二、语法" tabindex="-1">二、语法 <a class="header-anchor" href="#二、语法" aria-label="Permalink to &quot;二、语法&quot;">​</a></h4><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">param0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  statements</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">param0</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">param1</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  statements</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">param0</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">param1</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">/* … ,*/</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">paramN</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  statements</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">(</span><span style="color:#E36209;">param0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  statements</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">(</span><span style="color:#E36209;">param0</span><span style="color:#24292E;">, </span><span style="color:#E36209;">param1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  statements</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">(</span><span style="color:#E36209;">param0</span><span style="color:#24292E;">, </span><span style="color:#E36209;">param1</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">/* … ,*/</span><span style="color:#24292E;"> </span><span style="color:#E36209;">paramN</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  statements</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h5 id="参数" tabindex="-1">参数 <a class="header-anchor" href="#参数" aria-label="Permalink to &quot;参数&quot;">​</a></h5><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/async_function#name" target="_blank" rel="noreferrer"><code>name</code></a></p><p>函数名称。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/async_function#param" target="_blank" rel="noreferrer"><code>param</code></a> 可选</p><p>要传递给函数的参数的名称。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/async_function#statements" target="_blank" rel="noreferrer"><code>statements</code></a> 可选</p><p>包含函数主体的表达式。可以使用 <code>await</code> 机制。</p><h5 id="返回值" tabindex="-1">返回值 <a class="header-anchor" href="#返回值" aria-label="Permalink to &quot;返回值&quot;">​</a></h5><p>一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noreferrer"><code>Promise</code></a>，这个 promise 要么会通过一个由 async 函数返回的值被解决，要么会通过一个从 async 函数中抛出的（或其中没有被捕获到的）异常被拒绝。</p><h4 id="三、描述" tabindex="-1">三、描述 <a class="header-anchor" href="#三、描述" aria-label="Permalink to &quot;三、描述&quot;">​</a></h4><p>async 函数可能包含 0 个或者多个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/await" target="_blank" rel="noreferrer"><code>await</code></a> 表达式。await 表达式会暂停整个 async 函数的执行进程并出让其控制权，只有当其等待的基于 promise 的异步操作被兑现或被拒绝之后才会恢复进程。promise 的解决值会被当作该 await 表达式的返回值。使用 <code>async</code>/<code>await</code> 关键字就可以在异步代码中使用普通的 <code>try</code>/<code>catch</code> 代码块。</p><blockquote><p>ℹ️ <strong>备注：</strong> <code>await</code>关键字只在 async 函数内有效。如果你在 async 函数体之外使用它，就会抛出语法错误 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError" target="_blank" rel="noreferrer"><code>SyntaxError</code></a> 。</p><p>ℹ️ 备注：<code>async</code>/<code>await</code>的目的为了简化使用基于 promise 的 API 时所需的语法。<code>async</code>/<code>await</code> 的行为就好像搭配使用了生成器和 promise。</p></blockquote><p>async 函数一定会返回一个 promise 对象。如果一个 async 函数的返回值看起来不是 promise，那么它将会被隐式地包装在一个 promise 中。</p><p>例如，如下代码：</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">foo</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">foo</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>等价于：</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">foo</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">foo</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>async 函数的函数体可以被看作是由 0 个或者多个 await 表达式分割开来的。从第一行代码直到（并包括）第一个 await 表达式（如果有的话）都是同步运行的。这样的话，一个不含 await 表达式的 async 函数是会同步运行的。然而，如果函数体内有一个 await 表达式，async 函数就一定会异步执行。</p><p>例如：</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">foo</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">foo</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>等价于</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">foo</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">foo</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 await 表达式之后的代码可以被认为是存在在链式调用的 then 回调中，多个 await 表达式都将加入链式调用的 then 回调中，返回值将作为最后一个 then 回调的返回值。</p><h4 id="四、示例" tabindex="-1">四、示例 <a class="header-anchor" href="#四、示例" aria-label="Permalink to &quot;四、示例&quot;">​</a></h4><h5 id="示例一" tabindex="-1">示例一 <a class="header-anchor" href="#示例一" aria-label="Permalink to &quot;示例一&quot;">​</a></h5><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">resolveAfter2Seconds</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;starting slow promise&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">resolve</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">setTimeout</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;slow&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;slow promise is done&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }, </span><span style="color:#79B8FF;">2000</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">resolveAfter1Second</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;starting fast promise&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">resolve</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">setTimeout</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;fast&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;fast promise is done&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }, </span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">sequentialStart</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;==SEQUENTIAL START==&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 1. Execution gets here almost instantly</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">slow</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">resolveAfter2Seconds</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(slow); </span><span style="color:#6A737D;">// 2. this runs 2 seconds after 1.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">fast</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">resolveAfter1Second</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(fast); </span><span style="color:#6A737D;">// 3. this runs 3 seconds after 1.</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">concurrentStart</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;==CONCURRENT START with await==&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">slow</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">resolveAfter2Seconds</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// starts timer immediately</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">fast</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">resolveAfter1Second</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// starts timer immediately</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 1. Execution gets here almost instantly</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> slow); </span><span style="color:#6A737D;">// 2. this runs 2 seconds after 1.</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> fast); </span><span style="color:#6A737D;">// 3. this runs 2 seconds after 1., immediately after 2., since fast is already resolved</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">concurrentPromise</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;==CONCURRENT START with Promise.all==&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">all</span><span style="color:#E1E4E8;">([</span><span style="color:#B392F0;">resolveAfter2Seconds</span><span style="color:#E1E4E8;">(), </span><span style="color:#B392F0;">resolveAfter1Second</span><span style="color:#E1E4E8;">()]).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    (</span><span style="color:#FFAB70;">messages</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(messages[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]); </span><span style="color:#6A737D;">// slow</span></span>
<span class="line"><span style="color:#E1E4E8;">      console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(messages[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]); </span><span style="color:#6A737D;">// fast</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parallel</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;==PARALLEL with await Promise.all==&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// Start 2 &quot;jobs&quot; in parallel and wait for both of them to complete</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">all</span><span style="color:#E1E4E8;">([</span></span>
<span class="line"><span style="color:#E1E4E8;">    (</span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">resolveAfter2Seconds</span><span style="color:#E1E4E8;">()))(),</span></span>
<span class="line"><span style="color:#E1E4E8;">    (</span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">resolveAfter1Second</span><span style="color:#E1E4E8;">()))(),</span></span>
<span class="line"><span style="color:#E1E4E8;">  ]);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">sequentialStart</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// after 2 seconds, logs &quot;slow&quot;, then after 1 more second, &quot;fast&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// wait above to finish</span></span>
<span class="line"><span style="color:#B392F0;">setTimeout</span><span style="color:#E1E4E8;">(concurrentStart, </span><span style="color:#79B8FF;">4000</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// after 2 seconds, logs &quot;slow&quot; and then &quot;fast&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// wait again</span></span>
<span class="line"><span style="color:#B392F0;">setTimeout</span><span style="color:#E1E4E8;">(concurrentPromise, </span><span style="color:#79B8FF;">7000</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// same as concurrentStart</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// wait again</span></span>
<span class="line"><span style="color:#B392F0;">setTimeout</span><span style="color:#E1E4E8;">(parallel, </span><span style="color:#79B8FF;">10000</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// truly parallel: after 1 second, logs &quot;fast&quot;, then after 1 more second, &quot;slow&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//结果如下</span></span>
<span class="line"><span style="color:#F97583;">==</span><span style="color:#79B8FF;">SEQUENTIAL</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">START</span><span style="color:#F97583;">==</span></span>
<span class="line"><span style="color:#B392F0;">VM59</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> starting slow promise</span></span>
<span class="line"><span style="color:#B392F0;">VM59</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;"> slow promise is done</span></span>
<span class="line"><span style="color:#B392F0;">VM59</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">26</span><span style="color:#E1E4E8;"> slow</span></span>
<span class="line"><span style="color:#B392F0;">VM59</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">12</span><span style="color:#E1E4E8;"> starting fast promise</span></span>
<span class="line"><span style="color:#B392F0;">VM59</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;"> fast promise is done</span></span>
<span class="line"><span style="color:#B392F0;">VM59</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">29</span><span style="color:#E1E4E8;"> fast</span></span>
<span class="line"><span style="color:#B392F0;">VM59</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">33</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#79B8FF;">CONCURRENT</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">START</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">with</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await==</span></span>
<span class="line"><span style="color:#B392F0;">VM59</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> starting slow promise</span></span>
<span class="line"><span style="color:#B392F0;">VM59</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">12</span><span style="color:#E1E4E8;"> starting fast promise</span></span>
<span class="line"><span style="color:#B392F0;">VM59</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;"> fast promise is done</span></span>
<span class="line"><span style="color:#B392F0;">VM59</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;"> slow promise is done</span></span>
<span class="line"><span style="color:#B392F0;">VM59</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">38</span><span style="color:#E1E4E8;"> slow</span></span>
<span class="line"><span style="color:#B392F0;">VM59</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">39</span><span style="color:#E1E4E8;"> fast</span></span>
<span class="line"><span style="color:#B392F0;">VM59</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">43</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#79B8FF;">CONCURRENT</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">START</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">with</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">.all</span><span style="color:#F97583;">==</span></span>
<span class="line"><span style="color:#B392F0;">VM59</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> starting slow promise</span></span>
<span class="line"><span style="color:#B392F0;">VM59</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">12</span><span style="color:#E1E4E8;"> starting fast promise</span></span>
<span class="line"><span style="color:#B392F0;">VM59</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;"> fast promise is done</span></span>
<span class="line"><span style="color:#B392F0;">VM59</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;"> slow promise is done</span></span>
<span class="line"><span style="color:#B392F0;">VM59</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">46</span><span style="color:#E1E4E8;"> slow</span></span>
<span class="line"><span style="color:#B392F0;">VM59</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">47</span><span style="color:#E1E4E8;"> fast</span></span>
<span class="line"><span style="color:#B392F0;">VM59</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">53</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#79B8FF;">PARALLEL</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">with</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">.all</span><span style="color:#F97583;">==</span></span>
<span class="line"><span style="color:#B392F0;">VM59</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> starting slow promise</span></span>
<span class="line"><span style="color:#B392F0;">VM59</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">12</span><span style="color:#E1E4E8;"> starting fast promise</span></span>
<span class="line"><span style="color:#B392F0;">VM59</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;"> fast promise is done</span></span>
<span class="line"><span style="color:#B392F0;">VM59</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">58</span><span style="color:#E1E4E8;"> fast</span></span>
<span class="line"><span style="color:#B392F0;">VM59</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;"> slow promise is done</span></span>
<span class="line"><span style="color:#B392F0;">VM59</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">57</span><span style="color:#E1E4E8;"> slow</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resolveAfter2Seconds</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;starting slow promise&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">((</span><span style="color:#E36209;">resolve</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">setTimeout</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;slow&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">      console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;slow promise is done&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }, </span><span style="color:#005CC5;">2000</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resolveAfter1Second</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;starting fast promise&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">((</span><span style="color:#E36209;">resolve</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">setTimeout</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;fast&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">      console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;fast promise is done&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }, </span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sequentialStart</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;==SEQUENTIAL START==&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 1. Execution gets here almost instantly</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">slow</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resolveAfter2Seconds</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(slow); </span><span style="color:#6A737D;">// 2. this runs 2 seconds after 1.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">fast</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resolveAfter1Second</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(fast); </span><span style="color:#6A737D;">// 3. this runs 3 seconds after 1.</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">concurrentStart</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;==CONCURRENT START with await==&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">slow</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resolveAfter2Seconds</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// starts timer immediately</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">fast</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resolveAfter1Second</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// starts timer immediately</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 1. Execution gets here almost instantly</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> slow); </span><span style="color:#6A737D;">// 2. this runs 2 seconds after 1.</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> fast); </span><span style="color:#6A737D;">// 3. this runs 2 seconds after 1., immediately after 2., since fast is already resolved</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">concurrentPromise</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;==CONCURRENT START with Promise.all==&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">all</span><span style="color:#24292E;">([</span><span style="color:#6F42C1;">resolveAfter2Seconds</span><span style="color:#24292E;">(), </span><span style="color:#6F42C1;">resolveAfter1Second</span><span style="color:#24292E;">()]).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    (</span><span style="color:#E36209;">messages</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(messages[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]); </span><span style="color:#6A737D;">// slow</span></span>
<span class="line"><span style="color:#24292E;">      console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(messages[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]); </span><span style="color:#6A737D;">// fast</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parallel</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;==PARALLEL with await Promise.all==&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Start 2 &quot;jobs&quot; in parallel and wait for both of them to complete</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">all</span><span style="color:#24292E;">([</span></span>
<span class="line"><span style="color:#24292E;">    (</span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resolveAfter2Seconds</span><span style="color:#24292E;">()))(),</span></span>
<span class="line"><span style="color:#24292E;">    (</span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resolveAfter1Second</span><span style="color:#24292E;">()))(),</span></span>
<span class="line"><span style="color:#24292E;">  ]);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">sequentialStart</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// after 2 seconds, logs &quot;slow&quot;, then after 1 more second, &quot;fast&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// wait above to finish</span></span>
<span class="line"><span style="color:#6F42C1;">setTimeout</span><span style="color:#24292E;">(concurrentStart, </span><span style="color:#005CC5;">4000</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// after 2 seconds, logs &quot;slow&quot; and then &quot;fast&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// wait again</span></span>
<span class="line"><span style="color:#6F42C1;">setTimeout</span><span style="color:#24292E;">(concurrentPromise, </span><span style="color:#005CC5;">7000</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// same as concurrentStart</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// wait again</span></span>
<span class="line"><span style="color:#6F42C1;">setTimeout</span><span style="color:#24292E;">(parallel, </span><span style="color:#005CC5;">10000</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// truly parallel: after 1 second, logs &quot;fast&quot;, then after 1 more second, &quot;slow&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//结果如下</span></span>
<span class="line"><span style="color:#D73A49;">==</span><span style="color:#005CC5;">SEQUENTIAL</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">START</span><span style="color:#D73A49;">==</span></span>
<span class="line"><span style="color:#6F42C1;">VM59</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> starting slow promise</span></span>
<span class="line"><span style="color:#6F42C1;">VM59</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">6</span><span style="color:#24292E;"> slow promise is done</span></span>
<span class="line"><span style="color:#6F42C1;">VM59</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">26</span><span style="color:#24292E;"> slow</span></span>
<span class="line"><span style="color:#6F42C1;">VM59</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">12</span><span style="color:#24292E;"> starting fast promise</span></span>
<span class="line"><span style="color:#6F42C1;">VM59</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">16</span><span style="color:#24292E;"> fast promise is done</span></span>
<span class="line"><span style="color:#6F42C1;">VM59</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">29</span><span style="color:#24292E;"> fast</span></span>
<span class="line"><span style="color:#6F42C1;">VM59</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">33</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#005CC5;">CONCURRENT</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">START</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">with</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await==</span></span>
<span class="line"><span style="color:#6F42C1;">VM59</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> starting slow promise</span></span>
<span class="line"><span style="color:#6F42C1;">VM59</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">12</span><span style="color:#24292E;"> starting fast promise</span></span>
<span class="line"><span style="color:#6F42C1;">VM59</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">16</span><span style="color:#24292E;"> fast promise is done</span></span>
<span class="line"><span style="color:#6F42C1;">VM59</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">6</span><span style="color:#24292E;"> slow promise is done</span></span>
<span class="line"><span style="color:#6F42C1;">VM59</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">38</span><span style="color:#24292E;"> slow</span></span>
<span class="line"><span style="color:#6F42C1;">VM59</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">39</span><span style="color:#24292E;"> fast</span></span>
<span class="line"><span style="color:#6F42C1;">VM59</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">43</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#005CC5;">CONCURRENT</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">START</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">with</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">.all</span><span style="color:#D73A49;">==</span></span>
<span class="line"><span style="color:#6F42C1;">VM59</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> starting slow promise</span></span>
<span class="line"><span style="color:#6F42C1;">VM59</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">12</span><span style="color:#24292E;"> starting fast promise</span></span>
<span class="line"><span style="color:#6F42C1;">VM59</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">16</span><span style="color:#24292E;"> fast promise is done</span></span>
<span class="line"><span style="color:#6F42C1;">VM59</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">6</span><span style="color:#24292E;"> slow promise is done</span></span>
<span class="line"><span style="color:#6F42C1;">VM59</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">46</span><span style="color:#24292E;"> slow</span></span>
<span class="line"><span style="color:#6F42C1;">VM59</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">47</span><span style="color:#24292E;"> fast</span></span>
<span class="line"><span style="color:#6F42C1;">VM59</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">53</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#005CC5;">PARALLEL</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">with</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">.all</span><span style="color:#D73A49;">==</span></span>
<span class="line"><span style="color:#6F42C1;">VM59</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> starting slow promise</span></span>
<span class="line"><span style="color:#6F42C1;">VM59</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">12</span><span style="color:#24292E;"> starting fast promise</span></span>
<span class="line"><span style="color:#6F42C1;">VM59</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">16</span><span style="color:#24292E;"> fast promise is done</span></span>
<span class="line"><span style="color:#6F42C1;">VM59</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">58</span><span style="color:#24292E;"> fast</span></span>
<span class="line"><span style="color:#6F42C1;">VM59</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">6</span><span style="color:#24292E;"> slow promise is done</span></span>
<span class="line"><span style="color:#6F42C1;">VM59</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">57</span><span style="color:#24292E;"> slow</span></span></code></pre></div><h5 id="await-和并行" tabindex="-1">await 和并行 <a class="header-anchor" href="#await-和并行" aria-label="Permalink to &quot;await 和并行&quot;">​</a></h5><p>在 <code>sequentialStart</code> 中，程序在第一个 <code>await</code> 停留了 2 秒，然后又在第二个 <code>await</code> 停留了 1 秒。直到第一个计时器结束后，第二个计时器才被创建。程序需要 3 秒执行完毕。</p><p>在 <code>concurrentStart</code> 中，两个计时器被同时创建，然后执行 <code>await</code>。这两个计时器同时运行，这意味着程序完成运行只需要 2 秒，而不是 3 秒，即最慢的计时器的时间。</p><p>但是 <code>await</code> 仍旧是顺序执行的，第二个 <code>await</code> 还是得等待第一个执行完。在这个例子中，这使得先运行结束的输出出现在最慢的输出之后。</p><p>如果你希望并行执行两个或更多的任务，你必须像在<code>parallel</code>中一样使用<code>await Promise.all([job1(), job2()])</code>。</p>`,37),e=[o];function t(c,r,E,y,i,F){return n(),a("div",null,e)}const u=s(p,[["render",t]]);export{C as __pageData,u as default};
