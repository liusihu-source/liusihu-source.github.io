import{_ as i,c as e,a2 as t,o as s}from"./chunks/framework.BQmytedh.js";const l="/assets/boxes.Cxh_75NU.png",u=JSON.parse('{"title":"变量  --笔记","description":"","frontmatter":{},"headers":[],"relativePath":"前端/JS/基础/变量.md","filePath":"前端/JS/基础/变量.md","lastUpdated":null}'),n={name:"前端/JS/基础/变量.md"};function r(o,a,h,p,d,c){return s(),e("div",null,a[0]||(a[0]=[t('<h1 id="变量-笔记" tabindex="-1">变量 --笔记 <a class="header-anchor" href="#变量-笔记" aria-label="Permalink to &quot;变量  --笔记&quot;">​</a></h1><h2 id="一、变量的概念" tabindex="-1">一、变量的概念 <a class="header-anchor" href="#一、变量的概念" aria-label="Permalink to &quot;一、变量的概念&quot;">​</a></h2><p>能存任何属性——字符串、数字、函数等等</p><p><img src="'+l+`" alt="img"></p><h2 id="二、var-let-const" tabindex="-1">二、var let const <a class="header-anchor" href="#二、var-let-const" aria-label="Permalink to &quot;二、var let const&quot;">​</a></h2><p>var</p><ul><li>最初创建 JavaScript 时，只有 <code>var</code> 的，现已更新let</li><li>允许重复声明，会覆盖</li></ul><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Chris&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Bob&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h4 id="let" tabindex="-1">let <a class="header-anchor" href="#let" aria-label="Permalink to &quot;let&quot;">​</a></h4><ul><li>声明一次后可以更改值</li><li>不可重复声明</li><li><code>暂时性死区</code>，声明前不可访问</li></ul><h4 id="const" tabindex="-1">const <a class="header-anchor" href="#const" aria-label="Permalink to &quot;const&quot;">​</a></h4><ul><li>一般用于声明对象常量</li><li>常量不可更改 <ul><li>对于数值、布尔或者字符串类常量不可改变</li><li>对于对象，允许修改或重新赋值对象的属性，但变量本身的引用地址不可更改</li></ul></li></ul><h2 id="三、变量命名规则" tabindex="-1">三、变量命名规则 <a class="header-anchor" href="#三、变量命名规则" aria-label="Permalink to &quot;三、变量命名规则&quot;">​</a></h2><p>应使用拉丁字符 (0-9,a-z,A-Z) 和下划线字符。</p><ul><li>不可下划线开头</li><li>不可数字开头</li><li><a href="https://en.wikipedia.org/wiki/CamelCase#Variations_and_synonyms" target="_blank" rel="noreferrer">&quot;小写驼峰命名法&quot;</a></li><li>变量名大小写敏感——因此<code>myage</code>与<code>myAge</code>是 2 个不同的变量</li><li>避免使用 JavaScript 的保留字给变量命名</li></ul>`,15)]))}const m=i(n,[["render",r]]);export{u as __pageData,m as default};
