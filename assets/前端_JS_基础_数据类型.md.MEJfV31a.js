import{_ as e,c as s,a2 as i,o as t}from"./chunks/framework.BQmytedh.js";const c=JSON.parse('{"title":"数据类型  -笔记","description":"","frontmatter":{},"headers":[],"relativePath":"前端/JS/基础/数据类型.md","filePath":"前端/JS/基础/数据类型.md","lastUpdated":null}'),l={name:"前端/JS/基础/数据类型.md"};function r(n,a,p,o,h,d){return t(),s("div",null,a[0]||(a[0]=[i(`<h1 id="数据类型-笔记" tabindex="-1">数据类型 -笔记 <a class="header-anchor" href="#数据类型-笔记" aria-label="Permalink to &quot;数据类型  -笔记&quot;">​</a></h1><h2 id="一、动态和弱类型" tabindex="-1">一、动态和弱类型 <a class="header-anchor" href="#一、动态和弱类型" aria-label="Permalink to &quot;一、动态和弱类型&quot;">​</a></h2><p>JavaScript中的变量可以被赋予（<code>重新赋予</code>）各种类型的值。</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> foo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// foo 现在是一个数值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">foo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;bar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// foo 现在是一个字符串</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">foo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// foo 现在是一个布尔值</span></span></code></pre></div><p>JavaScript也是一个弱类型的语言，当操作涉及不匹配的类型时，<code>允许隐式类型转换</code>。</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> foo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// foo 现在是一个数值</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> foo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// JavaScript 将 foo 强制转换为字符串，因此可以将其与另一个操作数连接起来</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 421</span></span></code></pre></div><h2 id="二、原始值" tabindex="-1">二、原始值⭐ <a class="header-anchor" href="#二、原始值" aria-label="Permalink to &quot;二、原始值:star:&quot;">​</a></h2><blockquote><p>除了Object外，所有类型都定义了表示在语言最低层面的<code>不可变值</code>，我们将这些值称为<em>原始值</em>。</p></blockquote><p>💡 不可变值：<code>在JavaScript中，原始值是不可变的，一旦创建了原始值，无法更改。尽管持有它的变量可以被重新分配给另一个值。但是对象 和 数组 默认是可变的</code>，具体有以下原因：</p><ul><li>提高性能（不计划将来更改对象）</li><li>减少内存使用（进行对象引用，而不是克隆整个对象）</li><li>线程安全（多个线程可引用同一对象，不会相互干扰）</li></ul><p>💡 原始值都有哪些：<code>在JavaScript中，原始值（原始数据类型）是一种既非对象也方法或属性的数据，共有7中原始数据类型：string、number、bigint、boolean、undefined、symbol、null。</code>这些原始值类型也对应七种基本数据类型</p><table tabindex="0"><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>string</td><td>字符串，如<code>abc</code></td></tr><tr><td>number</td><td>定义为64位双精度浮点型的数字数据类型。</td></tr><tr><td>bigint</td><td>任意精度格式的整数</td></tr><tr><td>boolean</td><td>布尔值，如true</td></tr><tr><td>undefined</td><td>一个声明未赋值的变量的初始值，或没有实际参数的形式参数</td></tr><tr><td>symbol</td><td>一种基本数据类型，每个从 <code>Symbol()</code> 返回的 symbol 值都是唯一的</td></tr><tr><td>null</td><td>表示一个不存在或者无效object或者地址引用</td></tr></tbody></table><p>⭐ JavaScript中字面量与原始值的联系 以及 共有哪些字面量：</p><p><code>原始值是字面量的实例</code></p><p>字面量产生的值通常是原始值。比如，字符串字面量 <code>&#39;Hello&#39;</code> 产生了一个字符串原始值。这些原始值是通过字面量直接提供的，并且在运行时是不可变的。</p><ul><li>数组字面量</li><li>布尔字面量</li><li>数字字面量</li><li>对象字面量</li><li>RegExp字面量</li><li>字符串字面量</li></ul><h2 id="三、object" tabindex="-1">三、Object <a class="header-anchor" href="#三、object" aria-label="Permalink to &quot;三、Object&quot;">​</a></h2><p>在 JavaScript 中，对象Object是唯一可变的值。</p><h3 id="_3-1-属性" tabindex="-1">3.1 属性 <a class="header-anchor" href="#_3-1-属性" aria-label="Permalink to &quot;3.1 属性&quot;">​</a></h3><p>在javaScript中，对象可以被看作是一组属性的集合。用<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Grammar_and_types#%E5%AF%B9%E8%B1%A1%E5%AD%97%E9%9D%A2%E9%87%8F_object_literals" target="_blank" rel="noreferrer">对象字面量语法</a>来定义一个对象时，会自动初始化一组有限的属性；然后，这些属性还可以被添加和移除。对象属性等价于键值对。属性键要么是<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures#string-%E7%B1%BB%E5%9E%8B" target="_blank" rel="noreferrer">字符串</a>类型，要么是 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures#symbol-%E7%B1%BB%E5%9E%8B" target="_blank" rel="noreferrer">symbol</a>。属性值可以是任何类型的值，包括其他对象，从而可以构建复杂的数据结构。</p><h4 id="_3-1-1-数据属性" tabindex="-1">3.1.1 数据属性 <a class="header-anchor" href="#_3-1-1-数据属性" aria-label="Permalink to &quot;3.1.1 数据属性&quot;">​</a></h4><p>数据属性将键与值相关联。它可以通过以下属性来描述：</p><ul><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures#value" target="_blank" rel="noreferrer"><code>value</code></a></p><p>通过属性访问器获取值。可以是任意的 JavaScript 值。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures#writable" target="_blank" rel="noreferrer"><code>writable</code></a></p><p>一个布尔值，表示是否可以通过赋值来改变属性。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures#enumerable" target="_blank" rel="noreferrer"><code>enumerable</code></a></p></li></ul><p>​ 一个布尔值，表示是否可以通过 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for...in" target="_blank" rel="noreferrer"><code>for...in</code></a> 循环来枚举属性。</p><ul><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures#configurable" target="_blank" rel="noreferrer"><code>configurable</code></a></p><p>一个布尔值，表示该属性是否可以删除，是否可以更改为访问器属性，并可以更改其特性。</p></li></ul><h4 id="_3-1-2-访问器属性" tabindex="-1">3.1.2 访问器属性 <a class="header-anchor" href="#_3-1-2-访问器属性" aria-label="Permalink to &quot;3.1.2 访问器属性&quot;">​</a></h4><p>将键与两个访问器函数（<code>get</code> 和 <code>set</code>）相关联，以获取或者存储值。</p><p>一个访问器属性有着以下的特性：</p><ul><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures#get" target="_blank" rel="noreferrer"><code>get</code></a></p><p>该函数使用一个空的参数列表，以便有权对值执行访问时，获取属性值。参见 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/get" target="_blank" rel="noreferrer">getter</a>。可能是 <code>undefined</code>。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures#set" target="_blank" rel="noreferrer"><code>set</code></a></p><p>使用包含分配值的参数调用的函数。每当尝试更改指定属性时执行。参见 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/set" target="_blank" rel="noreferrer">setter</a>。可能是 <code>undefined</code>。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures#enumerable_2" target="_blank" rel="noreferrer"><code>enumerable</code></a></p></li></ul><p>​ 一个布尔值，表示是否可以通过 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for...in" target="_blank" rel="noreferrer"><code>for...in</code></a> 循环来枚举属性。</p><ul><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures#configurable_2" target="_blank" rel="noreferrer"><code>configurable</code></a></p><p>一个布尔值，表示该属性是否可以删除，是否可以更改为访问器属性，并可以更改其特性。</p></li></ul><h3 id="_3-2-date" tabindex="-1">3.2 Date <a class="header-anchor" href="#_3-2-date" aria-label="Permalink to &quot;3.2 Date&quot;">​</a></h3><p>当表示日期时，最好的选择是使用在 JavaScript 内置的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date" target="_blank" rel="noreferrer"><code>Date</code></a> 工具类。</p><h3 id="_3-3-索引类集合-数组和类型化数组" tabindex="-1">3.3 索引类集合：数组和类型化数组 <a class="header-anchor" href="#_3-3-索引类集合-数组和类型化数组" aria-label="Permalink to &quot;3.3 索引类集合：数组和类型化数组&quot;">​</a></h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array" target="_blank" rel="noreferrer">数组</a>是一种以整数为键（integer-keyed）的属性并与长度（<code>length</code>）属性关联的常规对象。</p><p>此外，数组对象还继承了 <code>Array.prototype</code> 的一些操作数组的便捷方法。例如，<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf" target="_blank" rel="noreferrer"><code>indexOf()</code></a>（搜索数组中的一个值）或 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/push" target="_blank" rel="noreferrer"><code>push()</code></a>（向数组中添加一个元素），等等。</p><h3 id="_3-4-带键的集合-map、set、weakmap、weakset" tabindex="-1">3.4 带键的集合：Map、Set、WeakMap、WeakSet <a class="header-anchor" href="#_3-4-带键的集合-map、set、weakmap、weakset" aria-label="Permalink to &quot;3.4 带键的集合：Map、Set、WeakMap、WeakSet&quot;">​</a></h3><ul><li><p>map</p><ul><li><p>保存键值对，并能记住键的原始插入顺序</p></li><li><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> map1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">map1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">map1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;b&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">map1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;c&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(map1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Expected output: 1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">map1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">97</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(map1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Expected output: 97</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(map1.size);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Expected output: 3</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">map1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">delete</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;b&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(map1.size);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Expected output: 2</span></span></code></pre></div></li></ul></li><li><p>weakmap</p><ul><li>键值对的集合，键必须是对象或非全局注册的符号，值可以是任意的JavaScript类型。一旦一个对象作为键被回收，那么在 <code>WeakMap</code> 中相应的值便成为了进行垃圾回收的候选对象，只要它们没有其他的引用存在</li></ul></li><li><p>set</p><ul><li>set对象是值的合集。set中的元素只会出现一次，即集合中的元素是唯一的。可以按照插入顺序迭代集合中的元素。<em>插入顺序</em>对应于add()方法成功将每一个元素插入到集合中（即，调用 <code>add()</code> 方法时集合中不存在相同的元素）的顺序。</li></ul></li><li><p>weakset</p><ul><li>可被垃圾回收的值的集合，包括对象和非全局注册的符号。<code>WeakSet</code> 中的值只能出现一次。它在 <code>WeakSet</code> 的集合中是唯一的。</li></ul></li></ul><blockquote><ul><li>map 和 weakmap的区别 <ol><li><strong>键类型和垃圾回收行为</strong>： <ul><li><strong>Map</strong>：<code>Map</code> 对象的键可以是任意类型的值（包括基本类型、对象或其他引用类型），并且存储的键值对不会被垃圾回收，直到被明确移除或 <code>Map</code> 对象被销毁。</li><li><strong>WeakMap</strong>：<code>WeakMap</code> 的键必须是对象。与 <code>Map</code> 不同，<code>WeakMap</code> 中的键被视为弱引用，即如果该键是 <code>WeakMap</code> 中的唯一引用，并且没有其他引用指向该键，则垃圾回收器可能会清除该键值对。这意味着 <code>WeakMap</code> 不会阻止其键对象被回收，因此在键对象被销毁后，相应的键值对也会被自动移除。</li></ul></li><li><strong>迭代和遍历</strong>： <ul><li><strong>Map</strong>：<code>Map</code> 对象是可迭代的，可以使用迭代器（例如 <code>for...of</code> 循环）遍历 <code>Map</code> 中的键值对。</li><li><strong>WeakMap</strong>：由于 <code>WeakMap</code> 键的弱引用特性，不支持直接的迭代和遍历。因此无法像 <code>Map</code> 那样轻松遍历 <code>WeakMap</code> 中的内容。</li></ul></li></ol></li><li>set 和 weakset的区别 <ol><li><strong>键的类型</strong>： <ul><li><strong>Set</strong>：<code>Set</code> 对象存储的是一组唯一的值，这些值可以是任意类型的，包括基本类型和对象引用等。</li><li><strong>WeakSet</strong>：<code>WeakSet</code> 只能存储对象引用，不能存储基本类型的值。</li></ul></li><li><strong>引用和垃圾回收</strong>： <ul><li><strong>Set</strong>：<code>Set</code> 对象存储的值不会阻止垃圾回收器回收这些值。</li><li><strong>WeakSet</strong>：<code>WeakSet</code> 中存储的对象引用是弱引用，也就是说，如果对象是 <code>WeakSet</code> 中的唯一引用并且没有其他引用指向它，那么垃圾回收器可能会回收这个对象。这种特性使得在对象被移除时，<code>WeakSet</code> 也会随之自动更新。</li></ul></li><li><strong>迭代和遍历</strong>： <ul><li><strong>Set</strong>：<code>Set</code> 是可迭代的对象，可以通过迭代器（例如 <code>for...of</code>）或 <code>forEach</code> 方法遍历其中的值。</li><li><strong>WeakSet</strong>：<code>WeakSet</code> 不是可迭代的对象，因此无法直接通过迭代器或 <code>forEach</code> 方法遍历其内容。</li></ul></li></ol></li></ul></blockquote><h3 id="_3-5-结构化数据-json" tabindex="-1">3.5 结构化数据：Json <a class="header-anchor" href="#_3-5-结构化数据-json" aria-label="Permalink to &quot;3.5 结构化数据：Json&quot;">​</a></h3><p>Json（JavaScript Object Notation），<code>一种轻量级的数据交换格式，来源于 JavaScript</code>，同时也被多种语言所使用。可以在不同环境之间传输</p><h2 id="四、强制类型转换" tabindex="-1">四、强制类型转换 <a class="header-anchor" href="#四、强制类型转换" aria-label="Permalink to &quot;四、强制类型转换&quot;">​</a></h2><h3 id="_4-1-原始值强制转换" tabindex="-1">4.1 原始值强制转换 <a class="header-anchor" href="#_4-1-原始值强制转换" aria-label="Permalink to &quot;4.1 原始值强制转换&quot;">​</a></h3><p>用于得到一个期望的原始值。通常情况下可以接受 字符串、数值 和 Bigint。例如：</p><ul><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/Date" target="_blank" rel="noreferrer"><code>Date()</code></a> 构造函数，当它收到一个不是 <code>Date</code> 实例的参数时——字符串表示日期字符串，而数值表示时间戳。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Addition" target="_blank" rel="noreferrer"><code>+</code></a> 运算符——如果运算对象是字符串，执行字符串串联；否则，执行数值相加。</p><ul><li>字符串 + 数组 =&gt; 字符串，如 &#39;00100&#39; + 1 -&gt; &#39;001001&#39;</li><li>数字 + 字符串 =&gt; 字符串，如 console.log(1 + &#39;1&#39;, typeof (1 + &#39;1&#39;)) //11 string</li></ul></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Equality" target="_blank" rel="noreferrer"><code>==</code></a> 运算符——如果一个运算对象是原始值，而另一个运算对象是对象（object），则该对象将转换为没有首选类型的原始值。</p></li></ul>`,45)]))}const g=e(l,[["render",r]]);export{c as __pageData,g as default};
