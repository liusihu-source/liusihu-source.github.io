import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.a7175731.js";const F=JSON.parse('{"title":"This --笔记","description":"","frontmatter":{},"headers":[],"relativePath":"前端/JS/进阶/This.md","filePath":"前端/JS/进阶/This.md","lastUpdated":null}'),p={name:"前端/JS/进阶/This.md"},o=l(`<h1 id="this-笔记" tabindex="-1">This --笔记 <a class="header-anchor" href="#this-笔记" aria-label="Permalink to &quot;This --笔记&quot;">​</a></h1><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this" target="_blank" rel="noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this</a></p></blockquote><h4 id="尝试一下" tabindex="-1">尝试一下 <a class="header-anchor" href="#尝试一下" aria-label="Permalink to &quot;尝试一下&quot;">​</a></h4><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  prop: </span><span style="color:#79B8FF;">42</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">func</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.prop;</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(test);</span></span>
<span class="line"><span style="color:#6A737D;">//Object { prop: 42, func: function () {</span></span>
<span class="line"><span style="color:#6A737D;">// return this.prop;</span></span>
<span class="line"><span style="color:#6A737D;">//} }</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(test.</span><span style="color:#B392F0;">func</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#6A737D;">// Expected output: 42</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">test</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  prop: </span><span style="color:#005CC5;">42</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">func</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.prop;</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(test);</span></span>
<span class="line"><span style="color:#6A737D;">//Object { prop: 42, func: function () {</span></span>
<span class="line"><span style="color:#6A737D;">// return this.prop;</span></span>
<span class="line"><span style="color:#6A737D;">//} }</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(test.</span><span style="color:#6F42C1;">func</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#6A737D;">// Expected output: 42</span></span></code></pre></div><h4 id="一、描述" tabindex="-1">一、描述 <a class="header-anchor" href="#一、描述" aria-label="Permalink to &quot;一、描述&quot;">​</a></h4><h5 id="全局上下文" tabindex="-1">全局上下文 <a class="header-anchor" href="#全局上下文" aria-label="Permalink to &quot;全局上下文&quot;">​</a></h5><p>无论是否在严格模式下，在全局执行环境中（在任何函数体外部）<code>this</code> 都指向全局对象。</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 在浏览器中，window 对象同时也是全局对象：</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> window); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">37</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(window.a); </span><span style="color:#6A737D;">// 37</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;MDN&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(window.b); </span><span style="color:#6A737D;">// &quot;MDN&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(b); </span><span style="color:#6A737D;">// &quot;MDN&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 在浏览器中，window 对象同时也是全局对象：</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> window); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">37</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(window.a); </span><span style="color:#6A737D;">// 37</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">this</span><span style="color:#24292E;">.b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;MDN&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(window.b); </span><span style="color:#6A737D;">// &quot;MDN&quot;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(b); </span><span style="color:#6A737D;">// &quot;MDN&quot;</span></span></code></pre></div><h5 id="函数上下文" tabindex="-1">函数上下文 <a class="header-anchor" href="#函数上下文" aria-label="Permalink to &quot;函数上下文&quot;">​</a></h5><p>在函数内部，<code>this</code>的值取决于函数被调用的方式。</p><p>因为下面的代码不在严格模式下，且 <code>this</code> 的值不是由该调用设置的，所以 <code>this</code> 的值默认指向全局对象，浏览器中就是 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window" target="_blank" rel="noreferrer"><code>window</code></a>。</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">f1</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">//在浏览器中：</span></span>
<span class="line"><span style="color:#B392F0;">f1</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> window; </span><span style="color:#6A737D;">//在浏览器中，全局对象是 window</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//在 Node 中：</span></span>
<span class="line"><span style="color:#B392F0;">f1</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> globalThis;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">f1</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">//在浏览器中：</span></span>
<span class="line"><span style="color:#6F42C1;">f1</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> window; </span><span style="color:#6A737D;">//在浏览器中，全局对象是 window</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//在 Node 中：</span></span>
<span class="line"><span style="color:#6F42C1;">f1</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> globalThis;</span></span></code></pre></div><p>然而，在严格模式下，如果进入执行环境时没有设置 <code>this</code> 的值，<code>this</code> 会保持为 <code>undefined</code>，如下：</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">f2</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;use strict&quot;</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 这里是严格模式</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">f2</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">f2</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;use strict&quot;</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 这里是严格模式</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">f2</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// true</span></span></code></pre></div><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 对象可以作为 bind 或 apply 的第一个参数传递，并且该参数将绑定到该对象。</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> obj </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { a: </span><span style="color:#9ECBFF;">&quot;Custom&quot;</span><span style="color:#E1E4E8;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 声明一个变量，并将该变量作为全局对象 window 的属性。</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Global&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">whatsThis</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.a; </span><span style="color:#6A737D;">// this 的值取决于函数被调用的方式</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">whatsThis</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// &#39;Global&#39; 因为在这个函数中 this 没有被设定，所以它默认为 全局/ window 对象</span></span>
<span class="line"><span style="color:#E1E4E8;">whatsThis.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(obj); </span><span style="color:#6A737D;">// &#39;Custom&#39; 因为函数中的 this 被设置为 obj</span></span>
<span class="line"><span style="color:#E1E4E8;">whatsThis.</span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(obj); </span><span style="color:#6A737D;">// &#39;Custom&#39; 因为函数中的 this 被设置为 obj</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 对象可以作为 bind 或 apply 的第一个参数传递，并且该参数将绑定到该对象。</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> obj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { a: </span><span style="color:#032F62;">&quot;Custom&quot;</span><span style="color:#24292E;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 声明一个变量，并将该变量作为全局对象 window 的属性。</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Global&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">whatsThis</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.a; </span><span style="color:#6A737D;">// this 的值取决于函数被调用的方式</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">whatsThis</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// &#39;Global&#39; 因为在这个函数中 this 没有被设定，所以它默认为 全局/ window 对象</span></span>
<span class="line"><span style="color:#24292E;">whatsThis.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(obj); </span><span style="color:#6A737D;">// &#39;Custom&#39; 因为函数中的 this 被设置为 obj</span></span>
<span class="line"><span style="color:#24292E;">whatsThis.</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(obj); </span><span style="color:#6A737D;">// &#39;Custom&#39; 因为函数中的 this 被设置为 obj</span></span></code></pre></div><h5 id="类上下文" tabindex="-1">类上下文 <a class="header-anchor" href="#类上下文" aria-label="Permalink to &quot;类上下文&quot;">​</a></h5><p>在类的构造函数中，<code>this</code> 是一个常规对象。类中所有非静态的方法都会被添加到 <code>this</code> 的原型中：</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> that </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Example</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">constructor</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">proto</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Object.</span><span style="color:#B392F0;">getPrototypeOf</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(Object.</span><span style="color:#B392F0;">getOwnPropertyNames</span><span style="color:#E1E4E8;">(proto)); </span><span style="color:#6A737D;">//Array [&quot;constructor&quot;, &quot;first&quot;, &quot;second&quot;]</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">first</span><span style="color:#E1E4E8;">(){console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> that)}</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">second</span><span style="color:#E1E4E8;">(){console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.first)}</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">third</span><span style="color:#E1E4E8;">(){}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Example</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">first</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Example</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">second</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">//first(){console.log(this === that)}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> that </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Example</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">constructor</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">proto</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Object.</span><span style="color:#6F42C1;">getPrototypeOf</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(Object.</span><span style="color:#6F42C1;">getOwnPropertyNames</span><span style="color:#24292E;">(proto)); </span><span style="color:#6A737D;">//Array [&quot;constructor&quot;, &quot;first&quot;, &quot;second&quot;]</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">first</span><span style="color:#24292E;">(){console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> that)}</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">second</span><span style="color:#24292E;">(){console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.first)}</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">third</span><span style="color:#24292E;">(){}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Example</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">first</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Example</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">second</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">//first(){console.log(this === that)}</span></span></code></pre></div><h5 id="箭头函数" tabindex="-1">箭头函数 <a class="header-anchor" href="#箭头函数" aria-label="Permalink to &quot;箭头函数&quot;">​</a></h5><p>在下面的例子中，一个赋值给了 <code>obj.bar</code>的函数（称为匿名函数 A），返回了另一个箭头函数（称为匿名函数 B）。因此，在 <code>A</code> 调用时，函数 B 的<code>this</code>被永久设置为 obj.bar（函数 A）的<code>this</code>。当返回的函数（函数 B）被调用时，它<code>this</code>始终是最初设置的。在上面的代码示例中，函数 B 的<code>this</code>被设置为函数 A 的<code>this</code>，即 obj，所以即使被调用的方式通常将其设置为 <code>undefined</code> 或全局对象（或者如前面示例中的其他全局执行环境中的方法），它的 <code>this</code> 也仍然是 <code>obj</code> 。</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 创建一个含有 bar 方法的 obj 对象，</span></span>
<span class="line"><span style="color:#6A737D;">// bar 返回一个函数，</span></span>
<span class="line"><span style="color:#6A737D;">// 这个函数返回 this，</span></span>
<span class="line"><span style="color:#6A737D;">// 这个返回的函数是以箭头函数创建的，</span></span>
<span class="line"><span style="color:#6A737D;">// 所以它的 this 被永久绑定到了它外层函数的 this。</span></span>
<span class="line"><span style="color:#6A737D;">// bar 的值可以在调用中设置，这反过来又设置了返回函数的值。</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> obj </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">bar</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">x</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> x;</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 作为 obj 对象的一个方法来调用 bar，把它的 this 绑定到 obj。</span></span>
<span class="line"><span style="color:#6A737D;">// 将返回的函数的引用赋值给 fn。</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> fn </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> obj.</span><span style="color:#B392F0;">bar</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 直接调用 fn 而不设置 this，</span></span>
<span class="line"><span style="color:#6A737D;">// 通常 (即不使用箭头函数的情况) 默认为全局对象</span></span>
<span class="line"><span style="color:#6A737D;">// 若在严格模式则为 undefined</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> obj); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 但是注意，如果你只是引用 obj 的方法，</span></span>
<span class="line"><span style="color:#6A737D;">// 而没有调用它</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> fn2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> obj.bar;</span></span>
<span class="line"><span style="color:#6A737D;">// 那么调用箭头函数后，this 指向 window，因为它从 bar 继承了 this。</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">fn2</span><span style="color:#E1E4E8;">()() </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> window); </span><span style="color:#6A737D;">// true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 创建一个含有 bar 方法的 obj 对象，</span></span>
<span class="line"><span style="color:#6A737D;">// bar 返回一个函数，</span></span>
<span class="line"><span style="color:#6A737D;">// 这个函数返回 this，</span></span>
<span class="line"><span style="color:#6A737D;">// 这个返回的函数是以箭头函数创建的，</span></span>
<span class="line"><span style="color:#6A737D;">// 所以它的 this 被永久绑定到了它外层函数的 this。</span></span>
<span class="line"><span style="color:#6A737D;">// bar 的值可以在调用中设置，这反过来又设置了返回函数的值。</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> obj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">bar</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">x</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> x;</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 作为 obj 对象的一个方法来调用 bar，把它的 this 绑定到 obj。</span></span>
<span class="line"><span style="color:#6A737D;">// 将返回的函数的引用赋值给 fn。</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> fn </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> obj.</span><span style="color:#6F42C1;">bar</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 直接调用 fn 而不设置 this，</span></span>
<span class="line"><span style="color:#6A737D;">// 通常 (即不使用箭头函数的情况) 默认为全局对象</span></span>
<span class="line"><span style="color:#6A737D;">// 若在严格模式则为 undefined</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> obj); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 但是注意，如果你只是引用 obj 的方法，</span></span>
<span class="line"><span style="color:#6A737D;">// 而没有调用它</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> fn2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> obj.bar;</span></span>
<span class="line"><span style="color:#6A737D;">// 那么调用箭头函数后，this 指向 window，因为它从 bar 继承了 this。</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">fn2</span><span style="color:#24292E;">()() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> window); </span><span style="color:#6A737D;">// true</span></span></code></pre></div>`,21),e=[o];function c(t,r,y,E,i,d){return n(),a("div",null,e)}const u=s(p,[["render",c]]);export{F as __pageData,u as default};
