import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.a7175731.js";const p="/assets/1662866775916.8a8e6666.png",g=JSON.parse('{"title":"TypeScript --笔记","description":"","frontmatter":{},"headers":[],"relativePath":"前端/typescript/笔记.md","filePath":"前端/typescript/笔记.md","lastUpdated":null}'),o={name:"前端/typescript/笔记.md"},e=l('<h1 id="typescript-笔记" tabindex="-1">TypeScript --笔记 <a class="header-anchor" href="#typescript-笔记" aria-label="Permalink to &quot;TypeScript --笔记&quot;">​</a></h1><h2 id="一、typescript开发环境" tabindex="-1">一、TypeScript开发环境 <a class="header-anchor" href="#一、typescript开发环境" aria-label="Permalink to &quot;一、TypeScript开发环境&quot;">​</a></h2><h3 id="_1、node-js下载安装" tabindex="-1">1、Node.js下载安装 <a class="header-anchor" href="#_1、node-js下载安装" aria-label="Permalink to &quot;1、Node.js下载安装&quot;">​</a></h3><ul><li><a href="http://nodejs.cn/download/" target="_blank" rel="noreferrer">http://nodejs.cn/download/</a></li></ul><h3 id="_2、npm全局安装typescript" tabindex="-1">2、Npm全局安装TypeScript <a class="header-anchor" href="#_2、npm全局安装typescript" aria-label="Permalink to &quot;2、Npm全局安装TypeScript&quot;">​</a></h3><ul><li>npm i -g typescript</li><li>tsc</li></ul><h3 id="_3、创建ts文件" tabindex="-1">3、创建Ts文件 <a class="header-anchor" href="#_3、创建ts文件" aria-label="Permalink to &quot;3、创建Ts文件&quot;">​</a></h3><ul><li>demo.ts</li></ul><h3 id="_4、使用tsc-对-ts文件编译" tabindex="-1">4、使用tsc 对 ts文件编译 <a class="header-anchor" href="#_4、使用tsc-对-ts文件编译" aria-label="Permalink to &quot;4、使用tsc 对 ts文件编译&quot;">​</a></h3><ul><li>打开对应demo.ts文件路径的cmd窗口</li><li>tsc demo.ts</li></ul><h2 id="二、基本类型" tabindex="-1">二、基本类型 <a class="header-anchor" href="#二、基本类型" aria-label="Permalink to &quot;二、基本类型&quot;">​</a></h2><h3 id="_1、类型声明" tabindex="-1">1、类型声明 <a class="header-anchor" href="#_1、类型声明" aria-label="Permalink to &quot;1、类型声明&quot;">​</a></h3><p><img src="'+p+`" alt="1662866775916"></p><ul><li><p>字面量</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//1、字面量，同时可以使用 | 来添加多个可能的变量值 或者 变量类型</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;male&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;female&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;male&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;female&quot;</span></span>
<span class="line"><span style="color:#6A737D;">// b = &quot;hello&quot; 这样就不行了</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> c </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">c </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">c </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;hello&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//1、字面量，同时可以使用 | 来添加多个可能的变量值 或者 变量类型</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;male&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;female&quot;</span></span>
<span class="line"><span style="color:#24292E;">b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;male&quot;</span></span>
<span class="line"><span style="color:#24292E;">b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;female&quot;</span></span>
<span class="line"><span style="color:#6A737D;">// b = &quot;hello&quot; 这样就不行了</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> c </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">boolean</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;hello&#39;</span></span></code></pre></div></li><li><p>any <code>尽量不要用</code></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//2、any 表示任何值 及 类型 都可以，尽量不要使用any</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> d </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">//显式any ； 如果不指定类型，则TS解析器自动判断该变量是any 隐士any</span></span>
<span class="line"><span style="color:#E1E4E8;">d </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">d </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;hello&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//2、any 表示任何值 及 类型 都可以，尽量不要使用any</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> d </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">any</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">//显式any ； 如果不指定类型，则TS解析器自动判断该变量是any 隐士any</span></span>
<span class="line"><span style="color:#24292E;">d </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">d </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;hello&#39;</span></span></code></pre></div></li><li><p>unknown</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//3、unknown  表示未知类型</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> e </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> f </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">unknown</span></span>
<span class="line"><span style="color:#E1E4E8;">f </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;hello&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">e </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> f </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//可以用来告诉解析器变量的实际类型</span></span>
<span class="line"><span style="color:#E1E4E8;">e </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#85E89D;">string</span><span style="color:#E1E4E8;">&gt;f  //也可通过&lt;&gt;方式来声明变量的实际类型</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//3、unknown  表示未知类型</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> e </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> f </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">unknown</span></span>
<span class="line"><span style="color:#24292E;">f </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;hello&#39;</span></span>
<span class="line"><span style="color:#24292E;">e </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> f </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">  </span><span style="color:#6A737D;">//可以用来告诉解析器变量的实际类型</span></span>
<span class="line"><span style="color:#24292E;">e </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> &lt;</span><span style="color:#22863A;">string</span><span style="color:#24292E;">&gt;f  //也可通过&lt;&gt;方式来声明变量的实际类型</span></span></code></pre></div></li><li><p>数组Array</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//4、数组，尽量存储同种类型，长度不限制</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> m </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">[]  </span><span style="color:#6A737D;">//或者let m : Array&lt;number&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">m </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//4、数组，尽量存储同种类型，长度不限制</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> m </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">[]  </span><span style="color:#6A737D;">//或者let m : Array&lt;number&gt;</span></span>
<span class="line"><span style="color:#24292E;">m </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">]</span></span></code></pre></div></li><li><p>元组tuple</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//5、元组：固定长度的数组,具体语法： [类型，类型，类型]</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> o </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//5、元组：固定长度的数组,具体语法： [类型，类型，类型]</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> o </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">string</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">]</span></span></code></pre></div></li><li><p>对象Object</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//6、object对象， 可用{}来指定对象中可以包含哪些属性</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> h </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span><span style="color:#FFAB70;">name</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">age</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">}  </span><span style="color:#6A737D;">//表明h对象中只能有name或者age，其中age可有可无</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> g </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span><span style="color:#FFAB70;">name</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">, [</span><span style="color:#FFAB70;">propName</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">} </span><span style="color:#6A737D;">//这种方式会指定后面多个参数的属性名及属性值的类型</span></span>
<span class="line"><span style="color:#E1E4E8;">g </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {name: </span><span style="color:#9ECBFF;">&#39;smallTiger&#39;</span><span style="color:#E1E4E8;">, gender: </span><span style="color:#9ECBFF;">&#39;male&#39;</span><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//6、object对象， 可用{}来指定对象中可以包含哪些属性</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> h </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span><span style="color:#E36209;">name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">, </span><span style="color:#E36209;">age</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">}  </span><span style="color:#6A737D;">//表明h对象中只能有name或者age，其中age可有可无</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> g </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span><span style="color:#E36209;">name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">, [</span><span style="color:#E36209;">propName</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">any</span><span style="color:#24292E;">} </span><span style="color:#6A737D;">//这种方式会指定后面多个参数的属性名及属性值的类型</span></span>
<span class="line"><span style="color:#24292E;">g </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {name: </span><span style="color:#032F62;">&#39;smallTiger&#39;</span><span style="color:#24292E;">, gender: </span><span style="color:#032F62;">&#39;male&#39;</span><span style="color:#24292E;">}</span></span></code></pre></div></li><li><p>函数function</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//5、设置函数结构的类型声明，具体语法：  (形参1： 类型， 形参2： 类型) =&gt; 返回值类型</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> j </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">a</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">b</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span></span>
<span class="line"><span style="color:#B392F0;">j</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">l</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">n</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> l </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> n</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//5、设置函数结构的类型声明，具体语法：  (形参1： 类型， 形参2： 类型) =&gt; 返回值类型</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> j </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">a</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">, </span><span style="color:#E36209;">b</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span></span>
<span class="line"><span style="color:#6F42C1;">j</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">l</span><span style="color:#24292E;">, </span><span style="color:#E36209;">n</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> l </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> n</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div></li></ul><h3 id="_2、编译选项" tabindex="-1">2、编译选项 <a class="header-anchor" href="#_2、编译选项" aria-label="Permalink to &quot;2、编译选项&quot;">​</a></h3><h2 id="三、接口" tabindex="-1">三、接口 <a class="header-anchor" href="#三、接口" aria-label="Permalink to &quot;三、接口&quot;">​</a></h2><p>作用：一系列抽象方法的声明，是一些方法特征的集合，这些方法都应该是抽象的，需要由具体的类去实现，然后第三方就可以通过这组抽象方法调用，让具体的类执行具体的方法。</p><ul><li>指定 键值对的值类型</li></ul><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RunOptions</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">program</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">commandline</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">[]</span><span style="color:#F97583;">|</span><span style="color:#79B8FF;">string</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">(()</span><span style="color:#F97583;">=&gt;</span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// commandline 是字符串</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> options</span><span style="color:#F97583;">:</span><span style="color:#B392F0;">RunOptions</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {program:</span><span style="color:#9ECBFF;">&quot;test1&quot;</span><span style="color:#E1E4E8;">,commandline:</span><span style="color:#9ECBFF;">&quot;Hello&quot;</span><span style="color:#E1E4E8;">}; </span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(options.commandline)  </span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#6A737D;">// commandline 是字符串数组</span></span>
<span class="line"><span style="color:#E1E4E8;">options </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {program:</span><span style="color:#9ECBFF;">&quot;test1&quot;</span><span style="color:#E1E4E8;">,commandline:[</span><span style="color:#9ECBFF;">&quot;Hello&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;World&quot;</span><span style="color:#E1E4E8;">]}; </span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(options.commandline[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]); </span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(options.commandline[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]);  </span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#6A737D;">// commandline 是一个函数表达式</span></span>
<span class="line"><span style="color:#E1E4E8;">options </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {program:</span><span style="color:#9ECBFF;">&quot;test1&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#B392F0;">commandline</span><span style="color:#E1E4E8;">:()</span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;">{</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;**Hello World**&quot;</span><span style="color:#E1E4E8;">;}}; </span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> fn</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> options.commandline; </span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">());</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RunOptions</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">program</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">string</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">commandline</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">string</span><span style="color:#24292E;">[]</span><span style="color:#D73A49;">|</span><span style="color:#005CC5;">string</span><span style="color:#D73A49;">|</span><span style="color:#24292E;">(()</span><span style="color:#D73A49;">=&gt;</span><span style="color:#005CC5;">string</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// commandline 是字符串</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> options</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;">RunOptions</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {program:</span><span style="color:#032F62;">&quot;test1&quot;</span><span style="color:#24292E;">,commandline:</span><span style="color:#032F62;">&quot;Hello&quot;</span><span style="color:#24292E;">}; </span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(options.commandline)  </span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#6A737D;">// commandline 是字符串数组</span></span>
<span class="line"><span style="color:#24292E;">options </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {program:</span><span style="color:#032F62;">&quot;test1&quot;</span><span style="color:#24292E;">,commandline:[</span><span style="color:#032F62;">&quot;Hello&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;World&quot;</span><span style="color:#24292E;">]}; </span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(options.commandline[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]); </span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(options.commandline[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]);  </span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#6A737D;">// commandline 是一个函数表达式</span></span>
<span class="line"><span style="color:#24292E;">options </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {program:</span><span style="color:#032F62;">&quot;test1&quot;</span><span style="color:#24292E;">,</span><span style="color:#6F42C1;">commandline</span><span style="color:#24292E;">:()</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">{</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;**Hello World**&quot;</span><span style="color:#24292E;">;}}; </span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> fn</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">any</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> options.commandline; </span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">());</span></span></code></pre></div><ul><li>指定 键值对的索引值类型</li></ul><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">namelist</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">   [</span><span style="color:#FFAB70;">index</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#6A737D;">// 类型一致，正确</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> list2</span><span style="color:#F97583;">:</span><span style="color:#B392F0;">namelist</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&quot;Google&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;Runoob&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;Taobao&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#6A737D;">// 错误元素 1 不是 string 类型</span></span>
<span class="line"><span style="color:#6A737D;">// var list2:namelist = [&quot;Runoob&quot;,1,&quot;Taobao&quot;]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">namelist</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">   [</span><span style="color:#E36209;">index</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">number</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">string</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#6A737D;">// 类型一致，正确</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> list2</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;">namelist</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;Google&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;Runoob&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;Taobao&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#6A737D;">// 错误元素 1 不是 string 类型</span></span>
<span class="line"><span style="color:#6A737D;">// var list2:namelist = [&quot;Runoob&quot;,1,&quot;Taobao&quot;]</span></span></code></pre></div><ul><li>支持接口继承</li></ul><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IParent1</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">v1</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IParent2</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">v2</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Child</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IParent1</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">IParent2</span><span style="color:#E1E4E8;"> { } </span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> Iobj</span><span style="color:#F97583;">:</span><span style="color:#B392F0;">Child</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { v1:</span><span style="color:#79B8FF;">12</span><span style="color:#E1E4E8;">, v2:</span><span style="color:#79B8FF;">23</span><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;value 1: &quot;</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">Iobj.v1</span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;">&quot; value 2: &quot;</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">Iobj.v2)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IParent1</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">v1</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">number</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IParent2</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">v2</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">number</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Child</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IParent1</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">IParent2</span><span style="color:#24292E;"> { } </span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> Iobj</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;">Child</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { v1:</span><span style="color:#005CC5;">12</span><span style="color:#24292E;">, v2:</span><span style="color:#005CC5;">23</span><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;value 1: &quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">Iobj.v1</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">&quot; value 2: &quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">Iobj.v2)</span></span></code></pre></div>`,23),t=[e];function c(r,y,E,i,F,d){return n(),a("div",null,t)}const h=s(o,[["render",c]]);export{g as __pageData,h as default};
