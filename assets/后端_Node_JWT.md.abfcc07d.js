import{_ as s,o as n,c as a,Q as p}from"./chunks/framework.a7175731.js";const l="/assets/image-20231106130752043.1026fb7d.png",o="/assets/image-20231106131255035.e3ded2ff.png",D=JSON.parse('{"title":"Json Web Token --笔记","description":"","frontmatter":{},"headers":[],"relativePath":"后端/Node/JWT.md","filePath":"后端/Node/JWT.md","lastUpdated":null}'),e={name:"后端/Node/JWT.md"},c=p('<h1 id="json-web-token-笔记" tabindex="-1">Json Web Token --笔记 <a class="header-anchor" href="#json-web-token-笔记" aria-label="Permalink to &quot;Json Web Token --笔记&quot;">​</a></h1><blockquote><p><a href="https://blog.csdn.net/weixin_43263566/article/details/126990129" target="_blank" rel="noreferrer">https://blog.csdn.net/weixin_43263566/article/details/126990129</a></p></blockquote><h2 id="一、概念" tabindex="-1">一、概念 <a class="header-anchor" href="#一、概念" aria-label="Permalink to &quot;一、概念&quot;">​</a></h2><p>全称 JSON Web TOKEN，一种<code>跨域认证解决方案</code></p><h2 id="二、jwt工作原理" tabindex="-1">二、JWT工作原理 <a class="header-anchor" href="#二、jwt工作原理" aria-label="Permalink to &quot;二、JWT工作原理&quot;">​</a></h2><p>💡 用户的信息通过Token字符串的形式，保存在客户端浏览器中，服务器通过还原Token字符串的形式进而认证用户的身份。</p><p><img src="'+l+'" alt="image-20231106130752043"></p><h2 id="三、jwt组成部分" tabindex="-1">三、JWT组成部分 <a class="header-anchor" href="#三、jwt组成部分" aria-label="Permalink to &quot;三、JWT组成部分&quot;">​</a></h2><p>JWT由三部分组成，分别是Header头部、Payload有效荷载，Signature签名。三者之间使用英文的.分隔，格式如下</p><p>Header.Payload.Signature</p><p><strong>具体字符串示例</strong></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTIsInVzZXJuYW1lIjoid3pqIiwicGFzc3dvcmQiOiIiLCJuaWNrbmFtZSI6Iuato-e7j-S6uiIsImVtYWlsIjoiMTI4NDUwMzI5OUBxcS5jb20iLCJ1c2VyX3BpYyI6IiIsInJvbGVfaWQiOjEsInJvbGVfbmFtZSI6Iui2hee6p-euoeeQhuWRmCIsImlzX2VuYWJsZWQiOjAsImlhdCI6MTY2Mjg4OTEzNywiZXhwIjoxNjYyOTI1MTM3fQ.D1MRl0v18cP-QlgAWxZO9-cwnNNQH-y-Db2ezAapfps</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTIsInVzZXJuYW1lIjoid3pqIiwicGFzc3dvcmQiOiIiLCJuaWNrbmFtZSI6Iuato-e7j-S6uiIsImVtYWlsIjoiMTI4NDUwMzI5OUBxcS5jb20iLCJ1c2VyX3BpYyI6IiIsInJvbGVfaWQiOjEsInJvbGVfbmFtZSI6Iui2hee6p-euoeeQhuWRmCIsImlzX2VuYWJsZWQiOjAsImlhdCI6MTY2Mjg4OTEzNywiZXhwIjoxNjYyOTI1MTM3fQ.D1MRl0v18cP-QlgAWxZO9-cwnNNQH-y-Db2ezAapfps</span></span></code></pre></div><ul><li>PayLoad部分才是真正的用户信息，它是用户信息经过加密之后生成的字符串</li><li>Header 和 Signature 是安全性相关的部分，只是为了保证Token的安全性</li></ul><p><img src="'+o+`" alt="image-20231106131255035"></p><h2 id="四、node端使用jwt" tabindex="-1">四、Node端使用JWT <a class="header-anchor" href="#四、node端使用jwt" aria-label="Permalink to &quot;四、Node端使用JWT&quot;">​</a></h2><h3 id="_4-1-安装相关包-npm-i-jsonwebtoken-express-jwt" tabindex="-1">4.1 安装相关包 npm i jsonwebtoken express-jwt <a class="header-anchor" href="#_4-1-安装相关包-npm-i-jsonwebtoken-express-jwt" aria-label="Permalink to &quot;4.1 安装相关包  npm i jsonwebtoken express-jwt&quot;">​</a></h3><ul><li>jsonwebtoken 用于生成 JWT 字符串（也就是 token ）</li><li>express-jwt 用于将 JWT 字符串解析还原成 JSON 对象</li></ul><h3 id="_4-2-使用require-导入包" tabindex="-1">4.2 使用require 导入包 <a class="header-anchor" href="#_4-2-使用require-导入包" aria-label="Permalink to &quot;4.2 使用require 导入包&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 1.导入用与生成 JWT 字符串的包</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">jwt</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;jsonwebtoken&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">// 2.导入用于将客户端发送过来的 JWT 字符串，解析还原成 JSON 对象的包</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">expressJWT</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;express-jwt&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 1.导入用与生成 JWT 字符串的包</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">jwt</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;jsonwebtoken&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">// 2.导入用于将客户端发送过来的 JWT 字符串，解析还原成 JSON 对象的包</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">expressJWT</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;express-jwt&#39;</span><span style="color:#24292E;">)</span></span></code></pre></div><h3 id="_4-3-定义secret-密匙" tabindex="-1">4.3 定义secret 密匙 <a class="header-anchor" href="#_4-3-定义secret-密匙" aria-label="Permalink to &quot;4.3 定义secret 密匙&quot;">​</a></h3><p>为了保证 JWT 字符串的安全性，防止 JWT 字符串在网络传输过程中被别人破解，我们需要专门定义一个用于加密和解密的 secret 密钥：</p><p>当生成 JWT 字符串的时候，需要使用 secret 密钥对用户的信息进行加密，最终得到加密好的 JWT 字符串 当把 JWT 字符串解析还原成 JSON 对象的时候，需要使用 secret 密钥进行解密</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">// secret 秘钥本质，就是一个字符串</span></span>
<span class="line"><span style="color:#e1e4e8;"> </span></span>
<span class="line"><span style="color:#e1e4e8;">const secretKey = &#39;itheima No ^_^&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">// secret 秘钥本质，就是一个字符串</span></span>
<span class="line"><span style="color:#24292e;"> </span></span>
<span class="line"><span style="color:#24292e;">const secretKey = &#39;itheima No ^_^&#39;</span></span></code></pre></div><h3 id="_4-4-登录成功后生成jwt字符串-返给客户端的localstorage" tabindex="-1">4.4 登录成功后生成JWT字符串（返给客户端的localStorage） <a class="header-anchor" href="#_4-4-登录成功后生成jwt字符串-返给客户端的localstorage" aria-label="Permalink to &quot;4.4 登录成功后生成JWT字符串（返给客户端的localStorage）&quot;">​</a></h3><p>调用 jsonwebtoken 包提供的 sign() 方法，将用户的信息加密成 JWT 字符串，响应给客户端：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// secret 秘钥本质，就是一个字符串</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">secretKey</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;itheima No ^_^&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">post</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/api/login&#39;</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">req</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 判断用户提交的登录信息是否正确</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (req.body.username </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;adnin&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> req.body.password </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;000000&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> res.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">({ status: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, msg: </span><span style="color:#9ECBFF;">&#39;登录失败&#39;</span><span style="color:#E1E4E8;"> })</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  res.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    status: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    msg: </span><span style="color:#9ECBFF;">&#39;登录成功&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 调用 jwt.sign() 生成 JWT 字符串，三个参数分别是：用户信息对象。加密秘钥、配置对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    token: jwt.</span><span style="color:#B392F0;">sign</span><span style="color:#E1E4E8;">({ username: req.body.username, password: req.body.password }, secretKey, { expiresIn: </span><span style="color:#9ECBFF;">&#39;30s&#39;</span><span style="color:#E1E4E8;"> })</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// secret 秘钥本质，就是一个字符串</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">secretKey</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;itheima No ^_^&#39;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">post</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/api/login&#39;</span><span style="color:#24292E;">, (</span><span style="color:#E36209;">req</span><span style="color:#24292E;">, </span><span style="color:#E36209;">res</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 判断用户提交的登录信息是否正确</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (req.body.username </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;adnin&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> req.body.password </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;000000&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> res.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">({ status: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, msg: </span><span style="color:#032F62;">&#39;登录失败&#39;</span><span style="color:#24292E;"> })</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  res.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    status: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    msg: </span><span style="color:#032F62;">&#39;登录成功&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 调用 jwt.sign() 生成 JWT 字符串，三个参数分别是：用户信息对象。加密秘钥、配置对象</span></span>
<span class="line"><span style="color:#24292E;">    token: jwt.</span><span style="color:#6F42C1;">sign</span><span style="color:#24292E;">({ username: req.body.username, password: req.body.password }, secretKey, { expiresIn: </span><span style="color:#032F62;">&#39;30s&#39;</span><span style="color:#24292E;"> })</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><h3 id="_4-5-将jwt字符串还原为json对象" tabindex="-1">4.5 将JWT字符串还原为JSON对象 <a class="header-anchor" href="#_4-5-将jwt字符串还原为json对象" aria-label="Permalink to &quot;4.5 将JWT字符串还原为JSON对象&quot;">​</a></h3><p>客户端每次在访问那些有权限接口的时候，都需要主动通过请求头中的 Authorization 字段，将 Token 字符串发送到服务器进行身份认证。</p><p>此时，服务器可以通过 express-jwt 这个中间件，自动将客户端发送过来的 Token 解析还原成 JSON 对象：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 导入 express 模块</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">express</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;express&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">// 创建 express 的服务器实例</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">app</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">express</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#6A737D;">// TODO_01：安装并导入 JWT 相关的两个包，分别是 jsonwebtoken 和 express-jwt ,npm  i jsonwebtoken express-jwt</span></span>
<span class="line"><span style="color:#6A737D;">// 1.导入用与生成 JWT 字符串的包</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">jwt</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;jsonwebtoken&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">// 2.导入用于将客户端发送过来的 JWT 字符串，解析还原成 JSON 对象的包</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">expressJWT</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;express-jwt&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#6A737D;">// 允许跨域资源共享</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">cors</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;cors&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">use</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">cors</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#6A737D;">// 解析 post 表单数据的中间件</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">bodyParser</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;body-parser&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">use</span><span style="color:#E1E4E8;">(bodyParser.</span><span style="color:#B392F0;">urlencoded</span><span style="color:#E1E4E8;">({ extended: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;"> }))</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#6A737D;">// TODO_02：定义 secret 密钥，建议将密钥命名为 secretKey</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">secretKey</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;itheima No ^_^&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#6A737D;">// TODO_04：注册将 JWT 字符串解析还原成 JSON 对象的中间件</span></span>
<span class="line"><span style="color:#6A737D;">// 使用app.use() 用来注册中间件</span></span>
<span class="line"><span style="color:#6A737D;">// expressJWT({ secret: secretKey }) 就是用来解析 Token 的中间件</span></span>
<span class="line"><span style="color:#6A737D;">// .unless({ path: [/^\\/api\\//] }) 用来指定那些接口不需要访问权限</span></span>
<span class="line"><span style="color:#6A737D;">// 注意：只要配置成功了 express-jwt 这个中间件，就可以把解析出来的用户信息，</span></span>
<span class="line"><span style="color:#6A737D;">// 挂载到 req.user 属性上</span></span>
<span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">use</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">expressJWT</span><span style="color:#E1E4E8;">({ secret: secretKey }).</span><span style="color:#B392F0;">unless</span><span style="color:#E1E4E8;">({ path: [</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">^</span><span style="color:#85E89D;font-weight:bold;">\\/</span><span style="color:#DBEDFF;">api</span><span style="color:#85E89D;font-weight:bold;">\\/</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">] }))</span></span>
<span class="line"><span style="color:#6A737D;">// expressJWT({secret: secretKey, algorithms: [&#39;HS256&#39;]})</span></span>
<span class="line"><span style="color:#6A737D;">// 登录接口</span></span>
<span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">post</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/api/login&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">req</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 将 req.body 请求体中的数据，转存为 userinfo 常量</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">userinfo</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> req.body</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 登录失败</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (userinfo.username </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;admin&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> userinfo.password </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;000000&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> res.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">      status: </span><span style="color:#79B8FF;">400</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      message: </span><span style="color:#9ECBFF;">&#39;登录失败！&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      data: userinfo</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 登录成功  </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// TODO_03：在登录成功之后，调用 jwt.sign() 方法生成 JWT 字符串。并通过 token 属性发送给客户端</span></span>
<span class="line"><span style="color:#E1E4E8;">  res.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    status: </span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    message: </span><span style="color:#9ECBFF;">&#39;登录成功！&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 参数1：用户的信息对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 参数2：加密的秘钥</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 参数3：配置对象，可以配置当前 token 的有效期</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 记住：千万不要把密码加密到 token 字符中</span></span>
<span class="line"><span style="color:#E1E4E8;">    token: jwt.</span><span style="color:#B392F0;">sign</span><span style="color:#E1E4E8;">({ username: req.body.username }, secretKey, { expiresIn: </span><span style="color:#9ECBFF;">&#39;300s&#39;</span><span style="color:#E1E4E8;"> }) </span><span style="color:#6A737D;">// 要发送给客户端的 token 字符串</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#6A737D;">// 这是一个有权限的 API 接口</span></span>
<span class="line"><span style="color:#6A737D;">// 客户端每次在访问那些有权限接口的时候，都需要主动通过请求头中的 Authorization 字段，</span></span>
<span class="line"><span style="color:#6A737D;">// 将 Token 字符串发送到服务器进行身份认证。</span></span>
<span class="line"><span style="color:#6A737D;">// 例如：Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwiaWF0IjoxNjYxNzY4NjIxLCJleHAiOjE2NjE3Njg2NTF9.7uEDhiNtkdFNdAENrsKPIhzBXMJIIWMjmB9T95fl_Es</span></span>
<span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/admin/getinfo&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">req</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// TODO_05：使用 req.user 获取用户信息，并使用 data 属性将用户信息发送给客户端</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 当 express-jwt 这个中间件配置成功之后，即可在那些有权限的接口中，使用 req.user 对象，</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 来访问从 JWT 字符串</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 中解析出来的用户信息了，示例代码</span></span>
<span class="line"><span style="color:#E1E4E8;">  res.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    status: </span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    message: </span><span style="color:#9ECBFF;">&#39;获取用户信息成功！&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    data: req.user </span><span style="color:#6A737D;">// 要发送给客户端的用户信息</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#6A737D;">// TODO_06：使用全局错误处理中间件，捕获解析 JWT 失败后产生的错误</span></span>
<span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">use</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">req</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">next</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// token 解析失败导致的错误</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (err.name </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;UnauthorizedError&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> res.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">({ status: </span><span style="color:#79B8FF;">401</span><span style="color:#E1E4E8;">, message: </span><span style="color:#9ECBFF;">&#39;无效的token&#39;</span><span style="color:#E1E4E8;"> })</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 其它原因导致的错误</span></span>
<span class="line"><span style="color:#E1E4E8;">  res.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">({ status: </span><span style="color:#79B8FF;">500</span><span style="color:#E1E4E8;">, message: </span><span style="color:#9ECBFF;">&#39;未知错误&#39;</span><span style="color:#E1E4E8;"> })</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#6A737D;">// 调用 app.listen 方法，指定端口号并启动web服务器</span></span>
<span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">listen</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">8888</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Express server running at http://127.0.0.1:8888&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 导入 express 模块</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">express</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;express&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">// 创建 express 的服务器实例</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">app</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">express</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#6A737D;">// TODO_01：安装并导入 JWT 相关的两个包，分别是 jsonwebtoken 和 express-jwt ,npm  i jsonwebtoken express-jwt</span></span>
<span class="line"><span style="color:#6A737D;">// 1.导入用与生成 JWT 字符串的包</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">jwt</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;jsonwebtoken&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">// 2.导入用于将客户端发送过来的 JWT 字符串，解析还原成 JSON 对象的包</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">expressJWT</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;express-jwt&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#6A737D;">// 允许跨域资源共享</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">cors</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;cors&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">use</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">cors</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#6A737D;">// 解析 post 表单数据的中间件</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">bodyParser</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;body-parser&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">use</span><span style="color:#24292E;">(bodyParser.</span><span style="color:#6F42C1;">urlencoded</span><span style="color:#24292E;">({ extended: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;"> }))</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#6A737D;">// TODO_02：定义 secret 密钥，建议将密钥命名为 secretKey</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">secretKey</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;itheima No ^_^&#39;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#6A737D;">// TODO_04：注册将 JWT 字符串解析还原成 JSON 对象的中间件</span></span>
<span class="line"><span style="color:#6A737D;">// 使用app.use() 用来注册中间件</span></span>
<span class="line"><span style="color:#6A737D;">// expressJWT({ secret: secretKey }) 就是用来解析 Token 的中间件</span></span>
<span class="line"><span style="color:#6A737D;">// .unless({ path: [/^\\/api\\//] }) 用来指定那些接口不需要访问权限</span></span>
<span class="line"><span style="color:#6A737D;">// 注意：只要配置成功了 express-jwt 这个中间件，就可以把解析出来的用户信息，</span></span>
<span class="line"><span style="color:#6A737D;">// 挂载到 req.user 属性上</span></span>
<span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">use</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">expressJWT</span><span style="color:#24292E;">({ secret: secretKey }).</span><span style="color:#6F42C1;">unless</span><span style="color:#24292E;">({ path: [</span><span style="color:#032F62;">/</span><span style="color:#D73A49;">^</span><span style="color:#22863A;font-weight:bold;">\\/</span><span style="color:#032F62;">api</span><span style="color:#22863A;font-weight:bold;">\\/</span><span style="color:#032F62;">/</span><span style="color:#24292E;">] }))</span></span>
<span class="line"><span style="color:#6A737D;">// expressJWT({secret: secretKey, algorithms: [&#39;HS256&#39;]})</span></span>
<span class="line"><span style="color:#6A737D;">// 登录接口</span></span>
<span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">post</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/api/login&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">req</span><span style="color:#24292E;">, </span><span style="color:#E36209;">res</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 将 req.body 请求体中的数据，转存为 userinfo 常量</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">userinfo</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> req.body</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 登录失败</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (userinfo.username </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;admin&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> userinfo.password </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;000000&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> res.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">      status: </span><span style="color:#005CC5;">400</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      message: </span><span style="color:#032F62;">&#39;登录失败！&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      data: userinfo</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 登录成功  </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// TODO_03：在登录成功之后，调用 jwt.sign() 方法生成 JWT 字符串。并通过 token 属性发送给客户端</span></span>
<span class="line"><span style="color:#24292E;">  res.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    status: </span><span style="color:#005CC5;">200</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    message: </span><span style="color:#032F62;">&#39;登录成功！&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 参数1：用户的信息对象</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 参数2：加密的秘钥</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 参数3：配置对象，可以配置当前 token 的有效期</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 记住：千万不要把密码加密到 token 字符中</span></span>
<span class="line"><span style="color:#24292E;">    token: jwt.</span><span style="color:#6F42C1;">sign</span><span style="color:#24292E;">({ username: req.body.username }, secretKey, { expiresIn: </span><span style="color:#032F62;">&#39;300s&#39;</span><span style="color:#24292E;"> }) </span><span style="color:#6A737D;">// 要发送给客户端的 token 字符串</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#6A737D;">// 这是一个有权限的 API 接口</span></span>
<span class="line"><span style="color:#6A737D;">// 客户端每次在访问那些有权限接口的时候，都需要主动通过请求头中的 Authorization 字段，</span></span>
<span class="line"><span style="color:#6A737D;">// 将 Token 字符串发送到服务器进行身份认证。</span></span>
<span class="line"><span style="color:#6A737D;">// 例如：Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwiaWF0IjoxNjYxNzY4NjIxLCJleHAiOjE2NjE3Njg2NTF9.7uEDhiNtkdFNdAENrsKPIhzBXMJIIWMjmB9T95fl_Es</span></span>
<span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/admin/getinfo&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">req</span><span style="color:#24292E;">, </span><span style="color:#E36209;">res</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// TODO_05：使用 req.user 获取用户信息，并使用 data 属性将用户信息发送给客户端</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 当 express-jwt 这个中间件配置成功之后，即可在那些有权限的接口中，使用 req.user 对象，</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 来访问从 JWT 字符串</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 中解析出来的用户信息了，示例代码</span></span>
<span class="line"><span style="color:#24292E;">  res.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    status: </span><span style="color:#005CC5;">200</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    message: </span><span style="color:#032F62;">&#39;获取用户信息成功！&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    data: req.user </span><span style="color:#6A737D;">// 要发送给客户端的用户信息</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#6A737D;">// TODO_06：使用全局错误处理中间件，捕获解析 JWT 失败后产生的错误</span></span>
<span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">use</span><span style="color:#24292E;">((</span><span style="color:#E36209;">err</span><span style="color:#24292E;">, </span><span style="color:#E36209;">req</span><span style="color:#24292E;">, </span><span style="color:#E36209;">res</span><span style="color:#24292E;">, </span><span style="color:#E36209;">next</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// token 解析失败导致的错误</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (err.name </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;UnauthorizedError&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> res.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">({ status: </span><span style="color:#005CC5;">401</span><span style="color:#24292E;">, message: </span><span style="color:#032F62;">&#39;无效的token&#39;</span><span style="color:#24292E;"> })</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 其它原因导致的错误</span></span>
<span class="line"><span style="color:#24292E;">  res.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">({ status: </span><span style="color:#005CC5;">500</span><span style="color:#24292E;">, message: </span><span style="color:#032F62;">&#39;未知错误&#39;</span><span style="color:#24292E;"> })</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#6A737D;">// 调用 app.listen 方法，指定端口号并启动web服务器</span></span>
<span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">listen</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">8888</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Express server running at http://127.0.0.1:8888&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div>`,30),t=[c];function r(E,y,i,F,d,u){return n(),a("div",null,t)}const h=s(e,[["render",r]]);export{D as __pageData,h as default};
