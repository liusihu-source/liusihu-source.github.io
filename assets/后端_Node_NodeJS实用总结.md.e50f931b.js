import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.a7175731.js";const p="/assets/image-20231225224649099.2cf476f6.png",o="/assets/image-20231226102741918.690dd68b.png",e="/assets/image-20231226110251395.3980609f.png",c="/assets/image-20231226112423444.4f06f895.png",t="/assets/image-20231226112439351.9cf07054.png",r="/assets/image-20231226112531207.f187eed1.png",E="/assets/image-20231226112602697.0fceadf0.png",y="/assets/image-20231226132233617.b5664387.png",i="/assets/image-20231227101306524.964c6e02.png",d="/assets/image-20231228104120029.623fe679.png",D=JSON.parse('{"title":"NodeJS实用总结  --笔记","description":"","frontmatter":{},"headers":[],"relativePath":"后端/Node/NodeJS实用总结.md","filePath":"后端/Node/NodeJS实用总结.md","lastUpdated":null}'),F={name:"后端/Node/NodeJS实用总结.md"},h=l(`<h1 id="nodejs实用总结-笔记" tabindex="-1">NodeJS实用总结 --笔记 <a class="header-anchor" href="#nodejs实用总结-笔记" aria-label="Permalink to &quot;NodeJS实用总结  --笔记&quot;">​</a></h1><blockquote><p><a href="https://www.nodejs.com.cn/7-days-nodejs/#1.1" target="_blank" rel="noreferrer">https://www.nodejs.com.cn/7-days-nodejs/#1.1</a></p></blockquote><h2 id="一、nodejs基础" tabindex="-1">一、NodeJS基础 <a class="header-anchor" href="#一、nodejs基础" aria-label="Permalink to &quot;一、NodeJS基础&quot;">​</a></h2><h3 id="_1-1-概念" tabindex="-1">1.1 概念 <a class="header-anchor" href="#_1-1-概念" aria-label="Permalink to &quot;1.1 概念&quot;">​</a></h3><ul><li><p>脚本语言都需要一个解析器才能运行。对于写在HTML页面里的JS，浏览器充当了解析器的角色。而对于需要独立运行的JS，<code>NodeJS就是一个解析器</code>。</p></li><li><p>每一种解析器都是一个运行环境，不但允许JS定义各种数据结构，进行各种计算，还允许JS使用运行环境提供的内置对象和方法做一些事情。例如运行在浏览器中的JS的用途是操作DOM，浏览器就提供了<code>document</code>之类的内置对象。而运行在NodeJS中的JS的用途是操作磁盘文件或搭建HTTP服务器，NodeJS就相应提供了<code>fs</code>、<code>http</code>等内置对象。</p></li></ul><h3 id="_1-2-用处" tabindex="-1">1.2 用处 <a class="header-anchor" href="#_1-2-用处" aria-label="Permalink to &quot;1.2 用处&quot;">​</a></h3><ul><li>Web服务</li><li>调试JS代码片段</li></ul><h3 id="_1-3-安装" tabindex="-1">1.3 安装 <a class="header-anchor" href="#_1-3-安装" aria-label="Permalink to &quot;1.3 安装&quot;">​</a></h3><p>windows方式：</p><p>略，看NodeJS简介篇即可。</p><p>linux方式：</p><p>Linux系统下没有现成的安装程序可用，虽然一些发行版可以使用<code>apt-get</code>之类的方式安装，但不一定能安装到最新版。因此Linux系统下一般使用以下方式编译方式安装NodeJS。</p><ol><li><p>确保系统下g++版本在4.6以上，python版本在2.6以上。</p></li><li><p>从<a href="http://nodejs.org/download/" target="_blank" rel="noreferrer">nodejs.org</a>下载<code>tar.gz</code>后缀的NodeJS最新版源代码包并解压到某个位置。</p></li><li><p>进入解压到的目录，使用以下命令编译和安装。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">./configure</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">make</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">sudo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">make</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">./configure</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">make</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">sudo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">make</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span></span></code></pre></div></li></ol><h3 id="_1-4-使用" tabindex="-1">1.4 使用 <a class="header-anchor" href="#_1-4-使用" aria-label="Permalink to &quot;1.4 使用&quot;">​</a></h3><p>打开终端，键入<code>node</code>进入命令交互模式，可以输入一条代码语句后立即执行并显示结果，例如：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">node</span></span>
<span class="line"><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> console.log(</span><span style="color:#B392F0;">&#39;Hello World!&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#B392F0;">Hello</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">World!</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">node</span></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> console.log(</span><span style="color:#6F42C1;">&#39;Hello World!&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6F42C1;">Hello</span><span style="color:#24292E;"> </span><span style="color:#032F62;">World!</span></span></code></pre></div><p>如果要运行一大段代码的话，可以先写一个JS文件再运行。例如有以下<code>hello.js</code>。</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hello</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Hello World!&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#B392F0;">hello</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hello</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Hello World!&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">hello</span><span style="color:#24292E;">();</span></span></code></pre></div><p>写好后在终端下键入<code>node hello.js</code>运行，结果如下：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">node</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">hello.js</span></span>
<span class="line"><span style="color:#B392F0;">Hello</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">World!</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">node</span><span style="color:#24292E;"> </span><span style="color:#032F62;">hello.js</span></span>
<span class="line"><span style="color:#6F42C1;">Hello</span><span style="color:#24292E;"> </span><span style="color:#032F62;">World!</span></span></code></pre></div><p><img src="`+p+`" alt="image-20231225224649099"></p><p>💡 linux下使用权限问题</p><p>在Linux系统下，使用NodeJS监听80或443端口提供HTTP(S)服务时需要root权限，有两种方式可以做到。</p><p>一种方式是使用<code>sudo</code>命令运行NodeJS。例如通过以下命令运行的<code>server.js</code>中有权限使用80和443端口。一般推荐这种方式，可以保证仅为有需要的JS脚本提供root权限。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">sudo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">node</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">server.js</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">sudo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">node</span><span style="color:#24292E;"> </span><span style="color:#032F62;">server.js</span></span></code></pre></div><p>另一种方式是使用<code>chmod +s</code>命令让NodeJS总是以root权限运行，具体做法如下。因为这种方式让任何JS脚本都有了root权限，不太安全，因此在需要很考虑安全的系统下不推荐使用。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">sudo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">chown</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">root</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/usr/local/bin/node</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">sudo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">chmod</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">+s</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/usr/local/bin/node</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">sudo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">chown</span><span style="color:#24292E;"> </span><span style="color:#032F62;">root</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/usr/local/bin/node</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">sudo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">chmod</span><span style="color:#24292E;"> </span><span style="color:#032F62;">+s</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/usr/local/bin/node</span></span></code></pre></div><h3 id="_1-5-模块" tabindex="-1">1.5 模块 <a class="header-anchor" href="#_1-5-模块" aria-label="Permalink to &quot;1.5 模块&quot;">​</a></h3><blockquote><ul><li>编写稍大一点的程序时一般都会将代码模块化。在NodeJS中，一般将代码合理拆分到不同的JS文件中，每一个文件就是一个模块，而文件路径就是模块名。</li><li>在编写每个模块时，都有<code>require</code>、<code>exports</code>、<code>module</code>三个预先定义好的变量可供使用。</li></ul></blockquote><h4 id="_1-5-1-require" tabindex="-1">1.5.1 require ⭐ <a class="header-anchor" href="#_1-5-1-require" aria-label="Permalink to &quot;1.5.1  require :star:&quot;">​</a></h4><p><code>require</code>函数用于在当前模块中加载和使用别的模块，传入一个模块名，返回一个模块导出对象。模块名可使用相对路径（以<code>./</code>开头），或者是绝对路径（以<code>/</code>或<code>C:</code>之类的盘符开头）。另外，模块名中的<code>.js</code>扩展名可以省略。以下是一个例子。</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> foo1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./foo&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> foo2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./foo.js&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> foo3 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/home/user/foo&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> foo4 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/home/user/foo.js&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// foo1至foo4中保存的是同一个模块的导出对象。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> foo1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./foo&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> foo2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./foo.js&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> foo3 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/home/user/foo&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> foo4 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/home/user/foo.js&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// foo1至foo4中保存的是同一个模块的导出对象。</span></span></code></pre></div><p>另外，可以使用以下方式加载和使用一个JSON文件。</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./data.json&#39;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./data.json&#39;</span><span style="color:#24292E;">);</span></span></code></pre></div><h4 id="_1-5-2-exports" tabindex="-1">1.5.2 exports ⭐ <a class="header-anchor" href="#_1-5-2-exports" aria-label="Permalink to &quot;1.5.2 exports :star:&quot;">​</a></h4><p><code>exports</code>对象是当前模块的导出对象，用于导出模块公有方法和属性。别的模块通过<code>require</code>函数使用当前模块时得到的就是当前模块的<code>exports</code>对象。以下例子中导出了一个公有方法。</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">hello</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Hello World!&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">exports</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">hello</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Hello World!&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><h4 id="_1-5-3-module" tabindex="-1">1.5.3 module <a class="header-anchor" href="#_1-5-3-module" aria-label="Permalink to &quot;1.5.3 module&quot;">​</a></h4><p>通过<code>module</code>对象可以访问到当前模块的一些相关信息，<code>但最多的用途是替换当前模块的导出对象</code>。例如模块导出对象默认是一个普通对象，如果想改成一个函数的话，可以使用以下方式。</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Hello World!&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#6A737D;">//以上代码中，模块默认导出对象被替换为一个函数。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Hello World!&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#6A737D;">//以上代码中，模块默认导出对象被替换为一个函数。</span></span></code></pre></div><h4 id="_1-5-4-模块初始化" tabindex="-1">1.5.4 模块初始化 <a class="header-anchor" href="#_1-5-4-模块初始化" aria-label="Permalink to &quot;1.5.4 模块初始化&quot;">​</a></h4><ul><li><p>一个模块中的JS代码<code>仅在模块第一次被使用时执行一次，并在执行过程中初始化模块的导出对象</code>。</p></li><li><p>之后，<code>缓存起来的导出对象被重复利用</code>。</p></li></ul><h4 id="_1-5-5-主模块" tabindex="-1">1.5.5 主模块 <a class="header-anchor" href="#_1-5-5-主模块" aria-label="Permalink to &quot;1.5.5 主模块&quot;">​</a></h4><p>通过命令行参数传递给NodeJS以启动程序的模块被称为主模块。主模块负责调度组成整个程序的其它模块完成工作。例如通过以下命令启动程序时，<code>main.js</code>就是主模块。例如有以下目录。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/home/user/hello/</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">util/</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">counter.js</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">main.js</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/home/user/hello/</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">util/</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">counter.js</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">main.js</span></span></code></pre></div><p>其中<code>counter.js</code>内容如下：</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">count</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">i;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">.count </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> count;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">count</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">++</span><span style="color:#24292E;">i;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">exports</span><span style="color:#24292E;">.count </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> count;</span></span></code></pre></div><p>该模块内部定义了一个私有变量<code>i</code>，并在<code>exports</code>对象导出了一个公有方法<code>count</code>。</p><p>主模块<code>main.js</code>内容如下：</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> counter1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./util/counter&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> counter2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./util/counter&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(counter1.</span><span style="color:#B392F0;">count</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(counter2.</span><span style="color:#B392F0;">count</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(counter2.</span><span style="color:#B392F0;">count</span><span style="color:#E1E4E8;">());</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> counter1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./util/counter&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> counter2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./util/counter&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(counter1.</span><span style="color:#6F42C1;">count</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(counter2.</span><span style="color:#6F42C1;">count</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(counter2.</span><span style="color:#6F42C1;">count</span><span style="color:#24292E;">());</span></span></code></pre></div><p>运行该程序的结果如下：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">node</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">main.js</span></span>
<span class="line"><span style="color:#B392F0;">1</span></span>
<span class="line"><span style="color:#B392F0;">2</span></span>
<span class="line"><span style="color:#B392F0;">3</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">node</span><span style="color:#24292E;"> </span><span style="color:#032F62;">main.js</span></span>
<span class="line"><span style="color:#6F42C1;">1</span></span>
<span class="line"><span style="color:#6F42C1;">2</span></span>
<span class="line"><span style="color:#6F42C1;">3</span></span></code></pre></div><blockquote><p>💡 可以看到，<code>counter.js</code>并没有因为被require了两次而初始化两次。</p></blockquote><p>📖 虽然一般使用JS编写模块，但<code>NodeJS也支持使用C/C++编写二进制模块。编译好的二进制模块除了文件扩展名是.node外，和JS模块的使用方式相同</code>。虽然二进制模块能使用操作系统提供的所有功能，拥有无限的潜能，但对于前端同学而言编写过于困难，并且难以跨平台使用。</p><h2 id="二、代码的组织-和-部署" tabindex="-1">二、代码的组织 和 部署 <a class="header-anchor" href="#二、代码的组织-和-部署" aria-label="Permalink to &quot;二、代码的组织 和 部署&quot;">​</a></h2><p>任何项目开发前，都需要有个入口，以及后续的目录结构等。同样的，<code>使用NodeJS编写程序前，为了有个良好的开端，首先需要准备好代码的目录结构和部署方式，本节内容将介绍相关的知识</code>。</p><h3 id="_2-1-模块路径解析规则" tabindex="-1">2.1 模块路径解析规则 ⭐ <a class="header-anchor" href="#_2-1-模块路径解析规则" aria-label="Permalink to &quot;2.1 模块路径解析规则 :star:&quot;">​</a></h3><p><code>require</code>函数支持三种模块引入方式</p><p>💡 前两种引入方式在模块之间建立了强耦合关系，一旦某个模块文件的存放位置需要变更，使用该模块的其它模块的代码也需要跟着调整。因此也有第三种方式</p><ol><li><p>支持斜杠（<code>/</code>）或盘符（<code>C:</code>）开头的绝对路径</p></li><li><p>支持<code>./</code>开头的相对路径。</p><ul><li>但这两种路径在模块之间建立了强耦合关系，一旦某个模块文件的存放位置需要变更，使用该模块的其它模块的代码也需要跟着调整，变得牵一发动全身。因此，<code>require</code>函数支持第三种形式的路径，写法类似于<code>foo/bar</code>，并依次按照以下规则解析路径，直到找到模块位置。</li></ul></li><li><p>比如需要引入require(&#39;foo/bar&#39;)</p><ul><li><p>内置模块</p><ul><li>如果传递给<code>require</code>函数的是NodeJS内置模块名称，不做路径解析，直接返回内部模块的导出对象，例如<code>require(&#39;fs&#39;)</code>。</li></ul></li><li><p>node_modules目录</p><ul><li><p>NodeJS定义了一个特殊的<code>node_modules</code>目录用于存放模块。例如某个模块的绝对路径是<code>/home/user/hello.js</code>，在该模块中使用<code>require(&#39;foo/bar&#39;)</code>方式加载模块时，则NodeJS依次尝试使用以下路径。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">/home/user/node_modules/foo/bar</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">/home/node_modules/foo/bar</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">/node_modules/foo/bar</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">/home/user/node_modules/foo/bar</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">/home/node_modules/foo/bar</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">/node_modules/foo/bar</span></span></code></pre></div></li></ul></li><li><p>NODE_PATH环境变量</p><ul><li><p>与PATH环境变量类似，NodeJS允许通过NODE_PATH环境变量来指定额外的模块搜索路径。NODE_PATH环境变量中包含一到多个目录路径，路径之间在Linux下使用<code>:</code>分隔，在Windows下使用<code>;</code>分隔</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"> NODE_PATH</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">/home/user/lib:/home/lib</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"> NODE_PATH</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">/home/user/lib:/home/lib</span></span></code></pre></div></li><li><p>当使用<code>require(&#39;foo/bar&#39;)</code>的方式加载模块时，则NodeJS依次尝试以下路径</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">/home/user/lib/foo/bar</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">/home/lib/foo/bar</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">/home/user/lib/foo/bar</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#6F42C1;">/home/lib/foo/bar</span></span></code></pre></div></li></ul></li></ul></li></ol><blockquote><p>💡 以上方式中，自建的文件一般以相对路径引入，再有内置模块 和 node_module模块较为常用</p></blockquote><h3 id="_2-2-package包" tabindex="-1">2.2 package包 <a class="header-anchor" href="#_2-2-package包" aria-label="Permalink to &quot;2.2 package包&quot;">​</a></h3><blockquote><ul><li><code>JS模块的基本单位是单个JS文件</code>，但复杂些的模块往往由多个子模块组成。</li><li>为了便于管理和使用，我们可以把由多个子模块组成的大模块称做<code>包</code>，并把所有子模块放在同一个目录里。</li><li><code>在组成一个包的所有子模块中，需要有一个入口模块，入口模块的导出对象被作为包的导出对象</code>。</li></ul></blockquote><h4 id="_2-2-1-自建包结构" tabindex="-1">2.2.1 自建包结构 <a class="header-anchor" href="#_2-2-1-自建包结构" aria-label="Permalink to &quot;2.2.1 自建包结构&quot;">​</a></h4><p>如有如下目录结构</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/home/user/lib/</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">cat/</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">head.js</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">body.js</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">main.js</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/home/user/lib/</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cat/</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">head.js</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">body.js</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">main.js</span></span></code></pre></div><p>其中<code>cat</code>目录定义了一个包，其中包含了3个子模块。<code>main.js</code>作为入口模块，其内容如下：</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> head </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./head&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> body </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./body&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        name: name,</span></span>
<span class="line"><span style="color:#E1E4E8;">        head: head.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">        body: body.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> head </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./head&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> body </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./body&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">exports</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">name</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        name: name,</span></span>
<span class="line"><span style="color:#24292E;">        head: head.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">        body: body.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>其他模块使用包的时候，使用<code>require(&#39;/home/user/lib/cat/main&#39;)</code>能达到目的，但<code>入口模块名称出现在路径里看上去不是个好主意。因此我们需要做点额外的工作，让包使用起来更像是单个模块</code>。</p><h4 id="_2-2-2-npm注册表中软件包结构" tabindex="-1">2.2.2 npm注册表中软件包结构⭐ <a class="header-anchor" href="#_2-2-2-npm注册表中软件包结构" aria-label="Permalink to &quot;2.2.2 npm注册表中软件包结构:star:&quot;">​</a></h4><p><strong>index.js</strong></p><p>当模块的文件名是<code>index.js</code>，加载模块时可以使用模块所在目录的路径代替模块文件路径，因此接着上例，以下两条语句等价。</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> cat </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/home/user/lib/cat&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> cat </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/home/user/lib/cat/index&#39;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> cat </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/home/user/lib/cat&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> cat </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/home/user/lib/cat/index&#39;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>现在只需把包目录路径传递给<code>require</code>函数，感觉上整个目录被当作单个模块使用，更有<code>整体感</code>。</p><p><strong>package.json</strong></p><p>如果想自定义入口模块的文件名和存放位置，就需要在包目录下包含一个<code>package.json</code>文件，并在其中指定入口模块的路径。上例中的<code>cat</code>模块可以重构如下。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/home/user/lib/</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">cat/</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">doc/</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">lib/</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">head.js</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">body.js</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">main.js</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">tests/</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">package.json</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/home/user/lib/</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cat/</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">doc/</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">lib/</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">head.js</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">body.js</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">main.js</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tests/</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">package.json</span></span></code></pre></div><p>其中，package.json内容如下：</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;cat&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;main&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;./lib/main.js&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;cat&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;main&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;./lib/main.js&quot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这样可以使用<code>require(&#39;/home/user/lib/cat&#39;)</code>的方式加载模块。NodeJS会根据包目录下的<code>package.json</code>找到入口模块所在位置。</p><p><img src="`+o+`" alt="image-20231226102741918"></p><h3 id="_2-3-命令行程序" tabindex="-1">2.3 命令行程序 <a class="header-anchor" href="#_2-3-命令行程序" aria-label="Permalink to &quot;2.3 命令行程序&quot;">​</a></h3><p>使用NodeJS编写的东西，要么是一个包，要么是一个命令行程序，而前者最终也会用于开发后者。</p><p>使用NodeJS写个程序，可以把命令行参数原样打印出来。该程序很简单，在主模块内实现了所有功能。并且写好后，把该程序部署在<code>/home/user/bin/node-echo.js</code>这个位置。为了在任何目录下都能运行该程序，需要使用以下终端命令。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">node</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/home/user/bin/node-echo.js</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Hello</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">World</span></span>
<span class="line"><span style="color:#B392F0;">Hello</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">World</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">node</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/home/user/bin/node-echo.js</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Hello</span><span style="color:#24292E;"> </span><span style="color:#032F62;">World</span></span>
<span class="line"><span style="color:#6F42C1;">Hello</span><span style="color:#24292E;"> </span><span style="color:#032F62;">World</span></span></code></pre></div><p>这种使用方式看起来不怎么像是一个命令行程序，下边的才是我们期望的方式。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">node-echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Hello</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">World</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">node-echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Hello</span><span style="color:#24292E;"> </span><span style="color:#032F62;">World</span></span></code></pre></div><h4 id="_2-3-1-linux" tabindex="-1">2.3.1 Linux <a class="header-anchor" href="#_2-3-1-linux" aria-label="Permalink to &quot;2.3.1 Linux&quot;">​</a></h4><p>在Linux系统下，可以把JS文件当作shell脚本来运行，从而达到上述目的，具体步骤如下：</p><ol><li><p>在shell脚本中，可以通过<code>#!</code>注释来指定当前脚本使用的解析器。所以首先在<code>node-echo.js</code>文件顶部增加以下一行注释，表明当前脚本使用NodeJS解析。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;"> #! /usr/bin/env node</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;"> #! /usr/bin/env node</span></span></code></pre></div><p>NodeJS会忽略掉位于JS模块首行的<code>#!</code>注释，不必担心这行注释是非法语句。</p></li><li><p>然后使用以下命令赋予<code>node-echo.js</code>文件执行权限。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;"> $ chmod +x /home/user/bin/node-echo.js</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;"> $ chmod +x /home/user/bin/node-echo.js</span></span></code></pre></div></li><li><p>最后在PATH环境变量中指定的某个目录下，例如在<code>/usr/local/bin</code>下边创建一个软链文件，文件名与希望使用的终端命令同名，命令如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;"> $ sudo ln -s /home/user/bin/node-echo.js /usr/local/bin/node-echo</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;"> $ sudo ln -s /home/user/bin/node-echo.js /usr/local/bin/node-echo</span></span></code></pre></div></li></ol><p>这样就可以在任何目录下使用<code>node-echo</code>命令了。</p><h4 id="_2-3-2-windows" tabindex="-1">2.3.2 Windows⭐ <a class="header-anchor" href="#_2-3-2-windows" aria-label="Permalink to &quot;2.3.2 Windows:star:&quot;">​</a></h4><p>在Windows系统下的做法完全不同，需要使用<code>.cmd</code>文件来解决问题。假设<code>node-echo.js</code>存放在<code>C:\\Users\\user\\bin</code>目录，并且该目录已经添加到PATH环境变量里了。接下来需要在该目录下新建一个名为<code>node-echo.cmd</code>的文件，文件内容如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">@node &quot;C:\\User\\user\\bin\\node-echo.js&quot; %*</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">@node &quot;C:\\User\\user\\bin\\node-echo.js&quot; %*</span></span></code></pre></div><p>这样处理后，我们就可以在任何目录下使用<code>node-echo</code>命令了。</p><h3 id="_2-4-工程目录" tabindex="-1">2.4 工程目录 ⭐ <a class="header-anchor" href="#_2-4-工程目录" aria-label="Permalink to &quot;2.4 工程目录 :star:&quot;">​</a></h3><p>完整地规划一个工程目录。以编写一个命令行程序为例，一般<code>会同时提供命令行模式和API模式两种使用方式</code>，并且会<code>借助三方包来编写代码</code>。除了代码外，一个完整的程序也应该有<code>自己的文档和测试用例</code>。因此，一个标准的工程目录都看起来像下边这样。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/home/user/workspace/node-echo/</span><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;"># 工程目录</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bin/</span><span style="color:#E1E4E8;">                          </span><span style="color:#6A737D;"># 存放命令行相关代码</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">node-echo</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">doc/</span><span style="color:#E1E4E8;">                          </span><span style="color:#6A737D;"># 存放文档</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">lib/</span><span style="color:#E1E4E8;">                          </span><span style="color:#6A737D;"># 存放API相关代码</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;">.js</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">node_modules/</span><span style="color:#E1E4E8;">                 </span><span style="color:#6A737D;"># 存放三方包</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">argv/</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">tests/</span><span style="color:#E1E4E8;">                        </span><span style="color:#6A737D;"># 存放测试用例</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">package.json</span><span style="color:#E1E4E8;">                    </span><span style="color:#6A737D;"># 元数据文件</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">README.md</span><span style="color:#E1E4E8;">                       </span><span style="color:#6A737D;"># 说明文件</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/home/user/workspace/node-echo/</span><span style="color:#24292E;">   </span><span style="color:#6A737D;"># 工程目录</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bin/</span><span style="color:#24292E;">                          </span><span style="color:#6A737D;"># 存放命令行相关代码</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">node-echo</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">doc/</span><span style="color:#24292E;">                          </span><span style="color:#6A737D;"># 存放文档</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">lib/</span><span style="color:#24292E;">                          </span><span style="color:#6A737D;"># 存放API相关代码</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;">.js</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">node_modules/</span><span style="color:#24292E;">                 </span><span style="color:#6A737D;"># 存放三方包</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">argv/</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tests/</span><span style="color:#24292E;">                        </span><span style="color:#6A737D;"># 存放测试用例</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">package.json</span><span style="color:#24292E;">                    </span><span style="color:#6A737D;"># 元数据文件</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">README.md</span><span style="color:#24292E;">                       </span><span style="color:#6A737D;"># 说明文件</span></span></code></pre></div><p>其中部分文件内容如下：</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/* bin/node-echo */</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> argv </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;argv&#39;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">    echo </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;../lib/echo&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">echo</span><span style="color:#E1E4E8;">(argv.</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39; &#39;</span><span style="color:#E1E4E8;">)));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/* lib/echo.js */</span></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">message</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> message;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/* package.json */</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;node-echo&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;main&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;./lib/echo.js&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/* bin/node-echo */</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> argv </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;argv&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    echo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;../lib/echo&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">echo</span><span style="color:#24292E;">(argv.</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39; &#39;</span><span style="color:#24292E;">)));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/* lib/echo.js */</span></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">message</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> message;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/* package.json */</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;node-echo&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;main&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;./lib/echo.js&quot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><img src="`+e+'" alt="image-20231226110251395"></p><p><img src="'+c+'" alt="image-20231226112423444"></p><p><img src="'+t+'" alt="image-20231226112439351"></p><p><img src="'+r+'" alt="image-20231226112531207"></p><p><img src="'+E+`" alt="image-20231226112602697"></p><h3 id="_2-5-npm" tabindex="-1">2.5 NPM <a class="header-anchor" href="#_2-5-npm" aria-label="Permalink to &quot;2.5 NPM&quot;">​</a></h3><p>NPM是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题，常见的使用场景有以下几种：</p><ul><li><code>允许用户从NPM服务器下载别人编写的三方包到本地使用</code>。</li><li><code>允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用</code>。</li><li>允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用。</li></ul><blockquote><p>💡 由此NPM建立了一个NodeJS生态圈，NodeJS开发者和用户可以在里边互通有无。</p></blockquote><h4 id="_2-5-1-下载第三方包" tabindex="-1">2.5.1 下载第三方包 <a class="header-anchor" href="#_2-5-1-下载第三方包" aria-label="Permalink to &quot;2.5.1 下载第三方包&quot;">​</a></h4><blockquote><p>需要使用三方包时，首先得知道有哪些包可用。<a href="https://npmjs.org/" target="_blank" rel="noreferrer">npmjs.org</a> 提供了搜索框可以根据包名来搜索</p></blockquote><p>如上边例子中的<code>argv</code>，就可以在工程目录下打开终端，使用以下命令来下载三方包。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">argv@0.0.1</span></span>
<span class="line"><span style="color:#79B8FF;">...</span></span>
<span class="line"><span style="color:#B392F0;">argv@0.0.1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">node_modules</span><span style="color:#79B8FF;">\\a</span><span style="color:#9ECBFF;">rgv</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">argv@0.0.1</span></span>
<span class="line"><span style="color:#005CC5;">...</span></span>
<span class="line"><span style="color:#6F42C1;">argv@0.0.1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">node_modules</span><span style="color:#005CC5;">\\a</span><span style="color:#032F62;">rgv</span></span></code></pre></div><ul><li>下载好之后，<code>argv</code>包就放在了工程目录下的<code>node_modules</code>目录中，因此在代码中只需要通过<code>require(&#39;argv&#39;)</code>的方式就好，无需指定三方包路径。</li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;name&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;node-echo&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;main&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;./lib/echo.js&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;dependencies&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">&quot;argv&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;0.0.2&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;name&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;node-echo&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;main&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;./lib/echo.js&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;dependencies&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">&quot;argv&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;0.0.2&quot;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ul><li>以上命令默认下载最新版三方包，如果想要下载指定版本的话，可以在包名后边加上<code>@&lt;version&gt;</code>，例如通过以下命令可下载0.0.1版的<code>argv</code>。</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">argv@0.0.1</span></span>
<span class="line"><span style="color:#79B8FF;">...</span></span>
<span class="line"><span style="color:#B392F0;">argv@0.0.1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">node_modules</span><span style="color:#79B8FF;">\\a</span><span style="color:#9ECBFF;">rgv</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">argv@0.0.1</span></span>
<span class="line"><span style="color:#005CC5;">...</span></span>
<span class="line"><span style="color:#6F42C1;">argv@0.0.1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">node_modules</span><span style="color:#005CC5;">\\a</span><span style="color:#032F62;">rgv</span></span></code></pre></div><p>⚠️ 现在的argv包已经过时了，可以使用process.argv替换</p><p>若使用到的三方包比较多，可直接根据package.json内的dependencies，利用npm install / yarn install等。</p><h4 id="_2-5-2-安装命令行程序" tabindex="-1">2.5.2 安装命令行程序 ⭐⭐ <a class="header-anchor" href="#_2-5-2-安装命令行程序" aria-label="Permalink to &quot;2.5.2 安装命令行程序 :star::star:&quot;">​</a></h4><p>从NPM服务上下载安装一个命令行程序的方法与三方包类似。使用如下命令即可</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">node-echo</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-g</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">node-echo</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-g</span></span></code></pre></div><p>参数中的<code>-g</code>表示全局安装，因此<code>node-echo</code>会默认安装到以下位置，并且NPM会自动创建好Linux系统下需要的软链文件或Windows系统下需要的<code>.cmd</code>文件。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/usr/local/</span><span style="color:#E1E4E8;">               </span><span style="color:#6A737D;"># Linux系统下</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">lib/node_modules/</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">node-echo/</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bin/</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">node-echo</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">%C:</span><span style="color:#79B8FF;">\\U</span><span style="color:#9ECBFF;">sers</span><span style="color:#79B8FF;">\\小</span><span style="color:#9ECBFF;">Tiger</span><span style="color:#79B8FF;">\\A</span><span style="color:#9ECBFF;">ppData</span><span style="color:#79B8FF;">\\R</span><span style="color:#9ECBFF;">oaming</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">pm</span><span style="color:#79B8FF;">\\ </span><span style="color:#E1E4E8;">           </span><span style="color:#6A737D;"># Windows系统下</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">node_modules</span><span style="color:#79B8FF;">\\</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">node-echo</span><span style="color:#79B8FF;">\\</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">node-echo.cmd</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/usr/local/</span><span style="color:#24292E;">               </span><span style="color:#6A737D;"># Linux系统下</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">lib/node_modules/</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">node-echo/</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">...</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bin/</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">node-echo</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">...</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">%C:</span><span style="color:#005CC5;">\\U</span><span style="color:#032F62;">sers</span><span style="color:#005CC5;">\\小</span><span style="color:#032F62;">Tiger</span><span style="color:#005CC5;">\\A</span><span style="color:#032F62;">ppData</span><span style="color:#005CC5;">\\R</span><span style="color:#032F62;">oaming</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">pm</span><span style="color:#005CC5;">\\ </span><span style="color:#24292E;">           </span><span style="color:#6A737D;"># Windows系统下</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">node_modules</span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">node-echo</span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">...</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">node-echo.cmd</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">...</span></span></code></pre></div><p>如下图中的yarn 和 json-server</p><p><img src="`+y+`" alt="image-20231226132233617"></p><h4 id="_2-5-3-发布代码" tabindex="-1">2.5.3 发布代码 <a class="header-anchor" href="#_2-5-3-发布代码" aria-label="Permalink to &quot;2.5.3 发布代码&quot;">​</a></h4><p>第一次使用NPM发布代码前需要注册一个账号。终端下运行<code>npm adduser</code>，之后按照提示做即可。账号搞定后，接着我们需要编辑<code>package.json</code>文件，加入NPM必需的字段。接着上边<code>node-echo</code>的例子，<code>package.json</code>里必要的字段如下。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;name&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;node-echo&quot;</span><span style="color:#E1E4E8;">,           </span><span style="color:#FDAEB7;font-style:italic;">#</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">包名，在NPM服务器上须要保持唯一</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;version&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;1.0.0&quot;</span><span style="color:#E1E4E8;">,            </span><span style="color:#FDAEB7;font-style:italic;">#</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">当前版本号</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;dependencies&quot;</span><span style="color:#E1E4E8;">: {              </span><span style="color:#FDAEB7;font-style:italic;">#</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">三方包依赖，需要指定包名和版本号</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">&quot;argv&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;0.0.2&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">      },</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;main&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;./lib/echo.js&quot;</span><span style="color:#E1E4E8;">,       </span><span style="color:#FDAEB7;font-style:italic;">#</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">入口模块位置</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;bin&quot;</span><span style="color:#E1E4E8;"> : {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">&quot;node-echo&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;./bin/node-echo&quot;</span><span style="color:#E1E4E8;">      </span><span style="color:#FDAEB7;font-style:italic;">#</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">命令行程序名和主模块位置</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;name&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;node-echo&quot;</span><span style="color:#24292E;">,           </span><span style="color:#B31D28;font-style:italic;">#</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">包名，在NPM服务器上须要保持唯一</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;version&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;1.0.0&quot;</span><span style="color:#24292E;">,            </span><span style="color:#B31D28;font-style:italic;">#</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">当前版本号</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;dependencies&quot;</span><span style="color:#24292E;">: {              </span><span style="color:#B31D28;font-style:italic;">#</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">三方包依赖，需要指定包名和版本号</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">&quot;argv&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;0.0.2&quot;</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;main&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;./lib/echo.js&quot;</span><span style="color:#24292E;">,       </span><span style="color:#B31D28;font-style:italic;">#</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">入口模块位置</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;bin&quot;</span><span style="color:#24292E;"> : {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">&quot;node-echo&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;./bin/node-echo&quot;</span><span style="color:#24292E;">      </span><span style="color:#B31D28;font-style:italic;">#</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">命令行程序名和主模块位置</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在当下目录中运行<code>npm publish</code>即可发布代码了</p><h4 id="_2-5-4-版本号" tabindex="-1">2.5.4 版本号⭐ <a class="header-anchor" href="#_2-5-4-版本号" aria-label="Permalink to &quot;2.5.4 版本号:star:&quot;">​</a></h4><p>语义版本号分为<code>X.Y.Z</code>三位，分别代表主版本号、次版本号和补丁版本号</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">如果只是修复bug，需要更新Z位。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">如果是新增了功能，但是向下兼容，需要更新Y位。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">如果有大变动，向下不兼容，需要更新X位。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">如果只是修复bug，需要更新Z位。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">如果是新增了功能，但是向下兼容，需要更新Y位。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">如果有大变动，向下不兼容，需要更新X位。</span></span></code></pre></div><h4 id="_2-5-5-其他命令" tabindex="-1">2.5.5 其他命令 <a class="header-anchor" href="#_2-5-5-其他命令" aria-label="Permalink to &quot;2.5.5 其他命令&quot;">​</a></h4><p>NPM还提供了很多功能，<code>package.json</code>里也有很多其它有用的字段。可以在<a href="https://npmjs.org/doc/" target="_blank" rel="noreferrer">npmjs.org/doc/</a>查看官方文档</p><h2 id="三、文件操作" tabindex="-1">三、文件操作⭐ <a class="header-anchor" href="#三、文件操作" aria-label="Permalink to &quot;三、文件操作:star:&quot;">​</a></h2><h3 id="_3-1-文件拷贝" tabindex="-1">3.1 文件拷贝 <a class="header-anchor" href="#_3-1-文件拷贝" aria-label="Permalink to &quot;3.1 文件拷贝&quot;">​</a></h3><h4 id="_3-1-1-小文件拷贝" tabindex="-1">3.1.1 小文件拷贝 <a class="header-anchor" href="#_3-1-1-小文件拷贝" aria-label="Permalink to &quot;3.1.1 小文件拷贝&quot;">​</a></h4><p>使用NodeJS内置的<code>fs</code>模块简单实现这个程序如下。</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> fs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;fs&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">copy</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">src</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">dst</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    fs.</span><span style="color:#B392F0;">writeFileSync</span><span style="color:#E1E4E8;">(dst, fs.</span><span style="color:#B392F0;">readFileSync</span><span style="color:#E1E4E8;">(src));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">argv</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">copy</span><span style="color:#E1E4E8;">(argv[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">], argv[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(process.argv.</span><span style="color:#B392F0;">slice</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> fs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;fs&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">copy</span><span style="color:#24292E;">(</span><span style="color:#E36209;">src</span><span style="color:#24292E;">, </span><span style="color:#E36209;">dst</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    fs.</span><span style="color:#6F42C1;">writeFileSync</span><span style="color:#24292E;">(dst, fs.</span><span style="color:#6F42C1;">readFileSync</span><span style="color:#24292E;">(src));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#E36209;">argv</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">copy</span><span style="color:#24292E;">(argv[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">], argv[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(process.argv.</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">));</span></span></code></pre></div><p>以上程序使用<code>fs.readFileSync</code>从源路径读取文件内容，并使用<code>fs.writeFileSync</code>将文件内容写入目标路径。</p><blockquote><p>💡 <code>process</code>是一个全局变量，可通过<code>process.argv</code>获得命令行参数。由于<code>argv[0]</code>固定等于NodeJS执行程序的绝对路径，<code>argv[1]</code>固定等于主模块的绝对路径，因此第一个命令行参数从<code>argv[2]</code>这个位置开始。</p></blockquote><h4 id="_3-1-2-大文件拷贝" tabindex="-1">3.1.2 大文件拷贝 <a class="header-anchor" href="#_3-1-2-大文件拷贝" aria-label="Permalink to &quot;3.1.2 大文件拷贝&quot;">​</a></h4><p>上边的程序拷贝一些小文件没啥问题，但这种一次性把所有文件内容都读取到内存中后再一次性写入磁盘的方式不适合拷贝大文件，内存会爆仓。对于大文件，只能读一点写一点，直到完成拷贝。因此上边的程序需要改造如下。</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> fs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;fs&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">copy</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">src</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">dst</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    fs.</span><span style="color:#B392F0;">createReadStream</span><span style="color:#E1E4E8;">(src).</span><span style="color:#B392F0;">pipe</span><span style="color:#E1E4E8;">(fs.</span><span style="color:#B392F0;">createWriteStream</span><span style="color:#E1E4E8;">(dst));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">argv</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">copy</span><span style="color:#E1E4E8;">(argv[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">], argv[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(process.argv.</span><span style="color:#B392F0;">slice</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> fs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;fs&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">copy</span><span style="color:#24292E;">(</span><span style="color:#E36209;">src</span><span style="color:#24292E;">, </span><span style="color:#E36209;">dst</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    fs.</span><span style="color:#6F42C1;">createReadStream</span><span style="color:#24292E;">(src).</span><span style="color:#6F42C1;">pipe</span><span style="color:#24292E;">(fs.</span><span style="color:#6F42C1;">createWriteStream</span><span style="color:#24292E;">(dst));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#E36209;">argv</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">copy</span><span style="color:#24292E;">(argv[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">], argv[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(process.argv.</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">));</span></span></code></pre></div><p>以上程序使用<code>fs.createReadStream</code>创建了一个源文件的只读数据流，并使用<code>fs.createWriteStream</code>创建了一个目标文件的只写数据流，并且用<code>pipe</code>方法把两个数据流连接了起来。连接起来后发生的事情，说得抽象点的话，水顺着水管从一个桶流到了另一个桶。</p><h3 id="_3-2-api概述" tabindex="-1">3.2 API概述 ⭐ <a class="header-anchor" href="#_3-2-api概述" aria-label="Permalink to &quot;3.2 API概述 :star:&quot;">​</a></h3><blockquote><p>官方API文档：<a href="https://nodejs.org/docs/latest/api/" target="_blank" rel="noreferrer">https://nodejs.org/docs/latest/api/</a></p></blockquote><h4 id="_3-2-1-buffer" tabindex="-1">3.2.1 Buffer <a class="header-anchor" href="#_3-2-1-buffer" aria-label="Permalink to &quot;3.2.1 Buffer&quot;">​</a></h4><p>💡 <strong>官方文档：</strong> <a href="http://nodejs.org/api/buffer.html" target="_blank" rel="noreferrer">http://nodejs.org/api/buffer.html</a></p><p>JS语言自身只有字符串数据类型，没有二进制数据类型，因此NodeJS提供了一个与<code>String</code>对等的全局构造函数<code>Buffer</code>来提供对二进制数据的操作。除了可以读取文件得到<code>Buffer</code>的实例外，还能够直接构造，例如：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bin</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Buffer</span><span style="color:#E1E4E8;">([ </span><span style="color:#79B8FF;">0x68</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0x65</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0x6c</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0x6c</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0x6f</span><span style="color:#E1E4E8;"> ]);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">var</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bin</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">new</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Buffer</span><span style="color:#24292E;">([ </span><span style="color:#005CC5;">0x68</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0x65</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0x6c</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0x6c</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0x6f</span><span style="color:#24292E;"> ]);</span></span></code></pre></div><p><code>Buffer</code>与字符串类似，除了可以用<code>.length</code>属性得到字节长度外，还可以用<code>[index]</code>方式读取指定位置的字节，例如：</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">bin[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]; </span><span style="color:#6A737D;">// =&gt; 0x68;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">bin[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]; </span><span style="color:#6A737D;">// =&gt; 0x68;</span></span></code></pre></div><p><code>Buffer</code>与字符串能够互相转化，例如可以使用指定编码将二进制数据转化为字符串：</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> str </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> bin.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;utf-8&#39;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// =&gt; &quot;hello&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> bin </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Buffer</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;hello&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;utf-8&#39;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// =&gt; &lt;Buffer 68 65 6c 6c 6f&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> bin.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;utf-8&#39;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// =&gt; &quot;hello&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> bin </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Buffer</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;hello&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;utf-8&#39;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// =&gt; &lt;Buffer 68 65 6c 6c 6f&gt;</span></span></code></pre></div><p>⭐ <code>Buffer</code>与字符串有一个重要区别。字符串是只读的（字面量），并且对字符串的任何修改得到的都是一个新字符串，原字符串保持不变。至于<code>Buffer</code>，更像是可以做指针操作的C语言数组。例如，可以用<code>[index]</code>方式直接修改某个位置的字节。</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">bin[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0x48</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">bin[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0x48</span><span style="color:#24292E;">;</span></span></code></pre></div><p>而<code>.slice</code>方法也不是返回一个新的<code>Buffer</code>，而更像是返回了指向原<code>Buffer</code>中间的某个位置的指针，如下所示。</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[ </span><span style="color:#79B8FF;">0x68</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0x65</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0x6c</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0x6c</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0x6f</span><span style="color:#E1E4E8;"> ]</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">^</span><span style="color:#E1E4E8;">           </span><span style="color:#F97583;">^</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">           </span><span style="color:#F97583;">|</span></span>
<span class="line"><span style="color:#E1E4E8;">   bin     bin.</span><span style="color:#B392F0;">slice</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[ </span><span style="color:#005CC5;">0x68</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0x65</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0x6c</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0x6c</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0x6f</span><span style="color:#24292E;"> ]</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">^</span><span style="color:#24292E;">           </span><span style="color:#D73A49;">^</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">|</span><span style="color:#24292E;">           </span><span style="color:#D73A49;">|</span></span>
<span class="line"><span style="color:#24292E;">   bin     bin.</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span></code></pre></div><p>因此对<code>.slice</code>方法返回的<code>Buffer</code>的修改会作用于原<code>Buffer</code>，例如：</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> bin </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Buffer</span><span style="color:#E1E4E8;">([ </span><span style="color:#79B8FF;">0x68</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0x65</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0x6c</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0x6c</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0x6f</span><span style="color:#E1E4E8;"> ]);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> sub </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> bin.</span><span style="color:#B392F0;">slice</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">sub[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0x65</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(bin); </span><span style="color:#6A737D;">// =&gt; &lt;Buffer 68 65 65 6c 6f&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> bin </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Buffer</span><span style="color:#24292E;">([ </span><span style="color:#005CC5;">0x68</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0x65</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0x6c</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0x6c</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0x6f</span><span style="color:#24292E;"> ]);</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> sub </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> bin.</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">sub[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0x65</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(bin); </span><span style="color:#6A737D;">// =&gt; &lt;Buffer 68 65 65 6c 6f&gt;</span></span></code></pre></div><p>也因此，如果想要拷贝一份<code>Buffer</code>，得首先创建一个新的<code>Buffer</code>，并通过<code>.copy</code>方法把原<code>Buffer</code>中的数据复制过去。这个类似于申请一块新的内存，并把已有内存中的数据复制过去。以下是一个例子。</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> bin </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Buffer</span><span style="color:#E1E4E8;">([ </span><span style="color:#79B8FF;">0x68</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0x65</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0x6c</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0x6c</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0x6f</span><span style="color:#E1E4E8;"> ]);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> dup </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Buffer</span><span style="color:#E1E4E8;">(bin.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">bin.</span><span style="color:#B392F0;">copy</span><span style="color:#E1E4E8;">(dup);</span></span>
<span class="line"><span style="color:#E1E4E8;">dup[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0x48</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(bin); </span><span style="color:#6A737D;">// =&gt; &lt;Buffer 68 65 6c 6c 6f&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(dup); </span><span style="color:#6A737D;">// =&gt; &lt;Buffer 48 65 65 6c 6f&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> bin </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Buffer</span><span style="color:#24292E;">([ </span><span style="color:#005CC5;">0x68</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0x65</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0x6c</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0x6c</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0x6f</span><span style="color:#24292E;"> ]);</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> dup </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Buffer</span><span style="color:#24292E;">(bin.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">bin.</span><span style="color:#6F42C1;">copy</span><span style="color:#24292E;">(dup);</span></span>
<span class="line"><span style="color:#24292E;">dup[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0x48</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(bin); </span><span style="color:#6A737D;">// =&gt; &lt;Buffer 68 65 6c 6c 6f&gt;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(dup); </span><span style="color:#6A737D;">// =&gt; &lt;Buffer 48 65 65 6c 6f&gt;</span></span></code></pre></div><h4 id="_3-2-2-stream" tabindex="-1">3.2.2 Stream <a class="header-anchor" href="#_3-2-2-stream" aria-label="Permalink to &quot;3.2.2 Stream&quot;">​</a></h4><blockquote><p><strong>官方文档：</strong> <a href="http://nodejs.org/api/stream.html" target="_blank" rel="noreferrer">http://nodejs.org/api/stream.html</a></p></blockquote><p>当内存中无法一次装下需要处理的数据时，或者一边读取一边处理更加高效时，需要用到数据流。NodeJS中通过各种<code>Stream</code>来提供对数据流的操作。</p><p>以上边的大文件拷贝程序为例，可以为数据来源创建一个只读数据流，以下代码给<code>doSomething</code>函数加上了回调，因此可以在处理数据前暂停数据读取，并在处理数据后继续读取数据。：</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> rs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fs.</span><span style="color:#B392F0;">createReadStream</span><span style="color:#E1E4E8;">(src);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">rs.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;data&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">chunk</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    rs.</span><span style="color:#B392F0;">pause</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">doSomething</span><span style="color:#E1E4E8;">(chunk, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">        rs.</span><span style="color:#B392F0;">resume</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">rs.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;end&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">cleanUp</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> rs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fs.</span><span style="color:#6F42C1;">createReadStream</span><span style="color:#24292E;">(src);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">rs.</span><span style="color:#6F42C1;">on</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;data&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">chunk</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    rs.</span><span style="color:#6F42C1;">pause</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">doSomething</span><span style="color:#24292E;">(chunk, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">        rs.</span><span style="color:#6F42C1;">resume</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">rs.</span><span style="color:#6F42C1;">on</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;end&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">cleanUp</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>此外，也可以为数据目标创建一个只写数据流，以下代码实现了数据从只读数据流到只写数据流的搬运，并包括了防爆仓控制。因为这种使用场景很多，例如上边的大文件拷贝程序，NodeJS直接提供了<code>.pipe</code>方法来做这件事情，其内部实现方式与上边的代码类似</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> rs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fs.</span><span style="color:#B392F0;">createReadStream</span><span style="color:#E1E4E8;">(src);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> ws </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fs.</span><span style="color:#B392F0;">createWriteStream</span><span style="color:#E1E4E8;">(dst);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">rs.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;data&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">chunk</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (ws.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(chunk) </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        rs.</span><span style="color:#B392F0;">pause</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">rs.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;end&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">    ws.</span><span style="color:#B392F0;">end</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">ws.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;drain&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">    rs.</span><span style="color:#B392F0;">resume</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> rs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fs.</span><span style="color:#6F42C1;">createReadStream</span><span style="color:#24292E;">(src);</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> ws </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fs.</span><span style="color:#6F42C1;">createWriteStream</span><span style="color:#24292E;">(dst);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">rs.</span><span style="color:#6F42C1;">on</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;data&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">chunk</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (ws.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(chunk) </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        rs.</span><span style="color:#6F42C1;">pause</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">rs.</span><span style="color:#6F42C1;">on</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;end&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">    ws.</span><span style="color:#6F42C1;">end</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">ws.</span><span style="color:#6F42C1;">on</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;drain&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">    rs.</span><span style="color:#6F42C1;">resume</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><h4 id="_3-2-3-file-system" tabindex="-1">3.2.3 File System <a class="header-anchor" href="#_3-2-3-file-system" aria-label="Permalink to &quot;3.2.3 File System&quot;">​</a></h4><blockquote><p><strong>官方文档：</strong> <a href="http://nodejs.org/api/fs.html" target="_blank" rel="noreferrer">http://nodejs.org/api/fs.html</a></p></blockquote><p>NodeJS通过<code>fs</code>内置模块提供对文件的操作。<code>fs</code>模块提供的API基本上可以分为以下三类</p><ul><li><p>文件属性读写。</p><p>其中常用的有<code>fs.stat</code>、<code>fs.chmod</code>、<code>fs.chown</code>等等。</p><ul><li>stat：获取文件或目录的信息，如文件大小、创建日期、修改日期等</li><li>chmod：用于更改文件或目录的权限</li><li>chown：用于更改文件或目录的所有者（owner）和所属组（group）</li></ul></li><li><p>文件内容读写。</p><p>其中常用的有<code>fs.readFile</code>、<code>fs.readdir</code>、<code>fs.writeFile</code>、<code>fs.mkdir</code>等等。</p></li><li><p>底层文件操作。</p><p>其中常用的有<code>fs.open</code>、<code>fs.read</code>、<code>fs.write</code>、<code>fs.close</code>等等。</p></li></ul><blockquote><p>💡 fs.readFile 和 fs.read 两者区别</p><ul><li>fs.readFile 更高级别、更方便的文件读取方法，将文件的全部内容读取到内存中的一个 Buffer 或字符串中，并在读取完成后将其作为整个文件的内容传递给回调函数。</li><li>fs.read 更底层的方法，用于从文件中读取数据到缓冲区（Buffer）中，需要显式地打开文件描述符，并且需要指定读取的字节数量和读取的起始位置。</li></ul></blockquote><p>NodeJS最精华的异步IO模型在<code>fs</code>模块里有着充分的体现，例如上边提到的这些API都通过回调函数传递结果。以<code>fs.readFile</code>为例：</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">fs.</span><span style="color:#B392F0;">readFile</span><span style="color:#E1E4E8;">(pathname, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (err) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// Deal with error.</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// Deal with data.</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">fs.</span><span style="color:#6F42C1;">readFile</span><span style="color:#24292E;">(pathname, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">err</span><span style="color:#24292E;">, </span><span style="color:#E36209;">data</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (err) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// Deal with error.</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// Deal with data.</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>上边代码所示，基本上所有<code>fs</code>模块API的回调参数都有两个。第一个参数在有错误发生时等于异常对象，第二个参数始终用于返回API方法执行结果。</p><p>此外，<code>fs</code>模块的所有异步API都有对应的同步版本，用于无法使用异步操作时，或者同步操作更方便时的情况。同步API除了方法名的末尾多了一个<code>Sync</code>之外，异常对象与执行结果的传递方式也有相应变化。同样以<code>fs.readFileSync</code>为例：</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fs.</span><span style="color:#B392F0;">readFileSync</span><span style="color:#E1E4E8;">(pathname);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Deal with data.</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (err) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Deal with error.</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fs.</span><span style="color:#6F42C1;">readFileSync</span><span style="color:#24292E;">(pathname);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Deal with data.</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (err) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Deal with error.</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="_3-2-4-path" tabindex="-1">3.2.4 Path <a class="header-anchor" href="#_3-2-4-path" aria-label="Permalink to &quot;3.2.4 Path&quot;">​</a></h4><p>操作文件时难免不与文件路径打交道。NodeJS提供了<code>path</code>内置模块来简化路径相关操作，并提升代码可读性。以下分别介绍几个常用的API。</p><p><strong>path.normalize</strong>（返回一个标准化的路径，确保程序在不同系统下都能正确使用相同的路径）</p><p><code>将传入的路径转换为标准路径</code>，具体讲的话，除了解析路径中的<code>.</code>与<code>..</code>外，还能去掉多余的斜杠。如果有程序需要使用路径作为某些数据的索引，但又允许用户随意输入路径时，就需要使用该方法保证路径的唯一性。以下是一个例子：</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> cache </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">store</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">key</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      cache[path.</span><span style="color:#B392F0;">normalize</span><span style="color:#E1E4E8;">(key)] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> value;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">store</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;foo/bar&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">store</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;foo//baz//../bar&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(cache);  </span><span style="color:#6A737D;">// =&gt; { &quot;foo/bar&quot;: 2 }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> cache </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">store</span><span style="color:#24292E;">(</span><span style="color:#E36209;">key</span><span style="color:#24292E;">, </span><span style="color:#E36209;">value</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      cache[path.</span><span style="color:#6F42C1;">normalize</span><span style="color:#24292E;">(key)] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> value;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">store</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;foo/bar&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">store</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;foo//baz//../bar&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(cache);  </span><span style="color:#6A737D;">// =&gt; { &quot;foo/bar&quot;: 2 }</span></span></code></pre></div><p><strong>path.join</strong> （动态构建文件路径）</p><p>将传入的多个路径拼接为标准路径。该方法可避免手工拼接路径字符串的繁琐，并且能在不同系统下正确使用相应的路径分隔符。以下是一个例子：</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">path.</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;foo/&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;baz/&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;../bar&#39;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// =&gt; &quot;foo/bar&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">path.</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;foo/&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;baz/&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;../bar&#39;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// =&gt; &quot;foo/bar&quot;</span></span></code></pre></div><p><strong>path.extname</strong>（文件类型识别）</p><p>当需要根据不同文件扩展名做不同操作时，该方法就显得很好用。以下是一个例子：</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">path.</span><span style="color:#B392F0;">extname</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;foo/bar.js&#39;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// =&gt; &quot;.js&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">path.</span><span style="color:#6F42C1;">extname</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;foo/bar.js&#39;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// =&gt; &quot;.js&quot;</span></span></code></pre></div><h3 id="_3-3-遍历目录" tabindex="-1">3.3 遍历目录 <a class="header-anchor" href="#_3-3-遍历目录" aria-label="Permalink to &quot;3.3 遍历目录&quot;">​</a></h3><p>遍历目录是操作文件时的一个常见需求。比如写一个程序，需要找到并处理指定目录下的所有JS文件时，就需要遍历整个目录。</p><h4 id="_3-3-1-递归算法" tabindex="-1">3.3.1 递归算法 <a class="header-anchor" href="#_3-3-1-递归算法" aria-label="Permalink to &quot;3.3.1 递归算法&quot;">​</a></h4><p>遍历目录时一般使用递归算法，这种方法外观是简洁的代码</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">factorial</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">n</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (n </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> n </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">factorial</span><span style="color:#E1E4E8;">(n </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">factorial</span><span style="color:#24292E;">(</span><span style="color:#E36209;">n</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (n </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> n </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">factorial</span><span style="color:#24292E;">(n </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>⚠️ 使用递归算法编写的代码虽然简洁，但由于每递归一次就产生一次函数调用，在需要优先考虑性能时，需要把递归算法转换为循环算法，以减少函数调用次数。</p><h4 id="_3-3-2-遍历算法" tabindex="-1">3.3.2 遍历算法 <a class="header-anchor" href="#_3-3-2-遍历算法" aria-label="Permalink to &quot;3.3.2 遍历算法&quot;">​</a></h4><p>目录是一个树状结构，在遍历时一般使用深度优先+先序遍历算法。深度优先，意味着到达一个节点后，首先接着遍历子节点而不是邻居节点。先序遍历，意味着首次到达了某节点就算遍历完成，而不是最后一次返回某节点才算数。因此使用这种遍历方式时，下边这棵树的遍历顺序是<code>A &gt; B &gt; D &gt; E &gt; C &gt; F</code>。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">A</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#B392F0;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">\\</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">B</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">C</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#B392F0;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">\\ </span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">\\</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">D</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">E</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">F</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">A</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6F42C1;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">B</span><span style="color:#24292E;">   </span><span style="color:#032F62;">C</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6F42C1;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\ </span><span style="color:#24292E;">  </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">D</span><span style="color:#24292E;">   </span><span style="color:#032F62;">E</span><span style="color:#24292E;">   </span><span style="color:#032F62;">F</span></span></code></pre></div><h4 id="_3-3-3-同步遍历" tabindex="-1">3.3.3 同步遍历 ⭐ ⭐ <a class="header-anchor" href="#_3-3-3-同步遍历" aria-label="Permalink to &quot;3.3.3 同步遍历 :star: :star:&quot;">​</a></h4><p>了解了必要的算法后，我们可以简单地实现以下目录遍历函数。</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">travel</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">dir</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">callback</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    fs.</span><span style="color:#B392F0;">readdirSync</span><span style="color:#E1E4E8;">(dir).</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">file</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> pathname </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> path.</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(dir, file);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (fs.</span><span style="color:#B392F0;">statSync</span><span style="color:#E1E4E8;">(pathname).</span><span style="color:#B392F0;">isDirectory</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">travel</span><span style="color:#E1E4E8;">(pathname, callback);</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(pathname);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">travel</span><span style="color:#24292E;">(</span><span style="color:#E36209;">dir</span><span style="color:#24292E;">, </span><span style="color:#E36209;">callback</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    fs.</span><span style="color:#6F42C1;">readdirSync</span><span style="color:#24292E;">(dir).</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">file</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> pathname </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> path.</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(dir, file);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (fs.</span><span style="color:#6F42C1;">statSync</span><span style="color:#24292E;">(pathname).</span><span style="color:#6F42C1;">isDirectory</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">travel</span><span style="color:#24292E;">(pathname, callback);</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">(pathname);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以看到，该函数以某个目录作为遍历的起点。遇到一个子目录时，就先接着遍历子目录。遇到一个文件时，就把文件的绝对路径传给回调函数。回调函数拿到文件路径后，就可以做各种判断和处理。因此假设有以下目录：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/home/user/</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">foo/</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">x.js</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bar/</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">y.js</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">z.css</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/home/user/</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">foo/</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">x.js</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bar/</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">y.js</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">z.css</span></span></code></pre></div><p>使用上述方法后遍历结果如下</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">travel</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/home/user&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">pathname</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(pathname);</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">------------------------</span></span>
<span class="line"><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">home</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">user</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">foo</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">x.js</span></span>
<span class="line"><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">home</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">user</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">bar</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">y.js</span></span>
<span class="line"><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">home</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">user</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">z.css</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">travel</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/home/user&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">pathname</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(pathname);</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">------------------------</span></span>
<span class="line"><span style="color:#D73A49;">/</span><span style="color:#24292E;">home</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">user</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">foo</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">x.js</span></span>
<span class="line"><span style="color:#D73A49;">/</span><span style="color:#24292E;">home</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">user</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">bar</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">y.js</span></span>
<span class="line"><span style="color:#D73A49;">/</span><span style="color:#24292E;">home</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">user</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">z.css</span></span></code></pre></div><h4 id="_3-3-4-异步遍历" tabindex="-1">3.3.4 异步遍历 <a class="header-anchor" href="#_3-3-4-异步遍历" aria-label="Permalink to &quot;3.3.4 异步遍历&quot;">​</a></h4><p>读取目录或读取文件状态时使用的是异步API，目录遍历函数实现起来会有些复杂，但原理完全相同。<code>travel</code>函数的异步版本如下。</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">travel</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">dir</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">callback</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">finish</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    fs.</span><span style="color:#B392F0;">readdir</span><span style="color:#E1E4E8;">(dir, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">files</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        (</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">i</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> files.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> pathname </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> path.</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(dir, files[i]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">                fs.</span><span style="color:#B392F0;">stat</span><span style="color:#E1E4E8;">(pathname, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">stats</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (stats.</span><span style="color:#B392F0;">isDirectory</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#B392F0;">travel</span><span style="color:#E1E4E8;">(pathname, callback, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">                            </span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">(i </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">                        });</span></span>
<span class="line"><span style="color:#E1E4E8;">                    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(pathname, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">                            </span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">(i </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">                        });</span></span>
<span class="line"><span style="color:#E1E4E8;">                    }</span></span>
<span class="line"><span style="color:#E1E4E8;">                });</span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                finish </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">finish</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">travel</span><span style="color:#24292E;">(</span><span style="color:#E36209;">dir</span><span style="color:#24292E;">, </span><span style="color:#E36209;">callback</span><span style="color:#24292E;">, </span><span style="color:#E36209;">finish</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    fs.</span><span style="color:#6F42C1;">readdir</span><span style="color:#24292E;">(dir, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">err</span><span style="color:#24292E;">, </span><span style="color:#E36209;">files</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        (</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">(</span><span style="color:#E36209;">i</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> files.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> pathname </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> path.</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(dir, files[i]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">                fs.</span><span style="color:#6F42C1;">stat</span><span style="color:#24292E;">(pathname, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">err</span><span style="color:#24292E;">, </span><span style="color:#E36209;">stats</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (stats.</span><span style="color:#6F42C1;">isDirectory</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#6F42C1;">travel</span><span style="color:#24292E;">(pathname, callback, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">                            </span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">(i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                        });</span></span>
<span class="line"><span style="color:#24292E;">                    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">(pathname, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">                            </span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">(i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                        });</span></span>
<span class="line"><span style="color:#24292E;">                    }</span></span>
<span class="line"><span style="color:#24292E;">                });</span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                finish </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">finish</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="_3-4-文本编码" tabindex="-1">3.4 文本编码 <a class="header-anchor" href="#_3-4-文本编码" aria-label="Permalink to &quot;3.4 文本编码&quot;">​</a></h3><p>使用NodeJS编写前端工具时，操作得最多的是文本文件，因此也就涉及到了文件编码的处理问题。</p><p>我们常用的文本编码有<code>UTF8</code>和<code>GBK</code>两种，并且<code>UTF8</code>文件还可能带有BOM。在读取不同编码的文本文件时，<code>需要将文件内容转换为JS使用的UTF8编码字符串后才能正常处理</code></p><h4 id="_3-4-1-bom移除" tabindex="-1">3.4.1 BOM移除 <a class="header-anchor" href="#_3-4-1-bom移除" aria-label="Permalink to &quot;3.4.1 BOM移除&quot;">​</a></h4><p>BOM用于标记一个文本文件使用Unicode编码，其本身是一个Unicode字符（&quot;\\uFEFF&quot;），位于文本文件头部。可使用以下代码判断文件是否包含BOM，把包含的去掉即可。</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">fs</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;fs&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">path</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;path&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">containsBOM</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">filepath</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">buffer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fs.</span><span style="color:#B392F0;">readFileSync</span><span style="color:#E1E4E8;">(filepath);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (buffer.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> buffer[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0xEF</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> buffer[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0xBB</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> buffer[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0xBF</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 文件包含BOM</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 文件不包含BOM</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">traverseDirectory</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">dirPath</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">files</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fs.</span><span style="color:#B392F0;">readdirSync</span><span style="color:#E1E4E8;">(dirPath);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    files.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">file</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">filePath</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> path.</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(dirPath, file);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">stats</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fs.</span><span style="color:#B392F0;">statSync</span><span style="color:#E1E4E8;">(filePath);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (stats.</span><span style="color:#B392F0;">isDirectory</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">traverseDirectory</span><span style="color:#E1E4E8;">(filePath); </span><span style="color:#6A737D;">// 如果是目录，递归遍历子目录</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (stats.</span><span style="color:#B392F0;">isFile</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> path.</span><span style="color:#B392F0;">extname</span><span style="color:#E1E4E8;">(file) </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;.js&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 判断是否是.js文件</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">containsBOM</span><span style="color:#E1E4E8;">(filePath)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`File \${</span><span style="color:#E1E4E8;">filePath</span><span style="color:#9ECBFF;">} contains BOM.\`</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`File \${</span><span style="color:#E1E4E8;">filePath</span><span style="color:#9ECBFF;">} does not contain BOM.\`</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 指定目录路径</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">directoryPath</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;/path/to/your/directory&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 开始遍历目录</span></span>
<span class="line"><span style="color:#B392F0;">traverseDirectory</span><span style="color:#E1E4E8;">(directoryPath);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">fs</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;fs&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">path</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;path&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">containsBOM</span><span style="color:#24292E;">(</span><span style="color:#E36209;">filepath</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">buffer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fs.</span><span style="color:#6F42C1;">readFileSync</span><span style="color:#24292E;">(filepath);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (buffer.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> buffer[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0xEF</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> buffer[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0xBB</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> buffer[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0xBF</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 文件包含BOM</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 文件不包含BOM</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">traverseDirectory</span><span style="color:#24292E;">(</span><span style="color:#E36209;">dirPath</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">files</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fs.</span><span style="color:#6F42C1;">readdirSync</span><span style="color:#24292E;">(dirPath);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    files.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">((</span><span style="color:#E36209;">file</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">filePath</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> path.</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(dirPath, file);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">stats</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fs.</span><span style="color:#6F42C1;">statSync</span><span style="color:#24292E;">(filePath);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (stats.</span><span style="color:#6F42C1;">isDirectory</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">traverseDirectory</span><span style="color:#24292E;">(filePath); </span><span style="color:#6A737D;">// 如果是目录，递归遍历子目录</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (stats.</span><span style="color:#6F42C1;">isFile</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> path.</span><span style="color:#6F42C1;">extname</span><span style="color:#24292E;">(file) </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;.js&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 判断是否是.js文件</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">containsBOM</span><span style="color:#24292E;">(filePath)) {</span></span>
<span class="line"><span style="color:#24292E;">                console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`File \${</span><span style="color:#24292E;">filePath</span><span style="color:#032F62;">} contains BOM.\`</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`File \${</span><span style="color:#24292E;">filePath</span><span style="color:#032F62;">} does not contain BOM.\`</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 指定目录路径</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">directoryPath</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;/path/to/your/directory&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 开始遍历目录</span></span>
<span class="line"><span style="color:#6F42C1;">traverseDirectory</span><span style="color:#24292E;">(directoryPath);</span></span></code></pre></div><p>💡 经过测试，个人建立的js文件一般都不包括BOM</p><p><img src="`+i+`" alt="image-20231227101306524"></p><h4 id="_3-4-2-gbk转utf8" tabindex="-1">3.4.2 GBK转UTF8 <a class="header-anchor" href="#_3-4-2-gbk转utf8" aria-label="Permalink to &quot;3.4.2 GBK转UTF8&quot;">​</a></h4><p>NodeJS支持在读取文本文件时，或者在<code>Buffer</code>转换为字符串时指定文本编码，但遗憾的是，GBK编码不在NodeJS自身支持范围内。因此，一般借助<code>iconv-lite</code>这个三方包来转换编码。使用NPM下载该包后，可以按下边方式编写一个读取GBK文本文件的函数。</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> iconv </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;iconv-lite&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">readGBKText</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">pathname</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> bin </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fs.</span><span style="color:#B392F0;">readFileSync</span><span style="color:#E1E4E8;">(pathname);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> iconv.</span><span style="color:#B392F0;">decode</span><span style="color:#E1E4E8;">(bin, </span><span style="color:#9ECBFF;">&#39;gbk&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> iconv </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;iconv-lite&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">readGBKText</span><span style="color:#24292E;">(</span><span style="color:#E36209;">pathname</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> bin </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fs.</span><span style="color:#6F42C1;">readFileSync</span><span style="color:#24292E;">(pathname);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> iconv.</span><span style="color:#6F42C1;">decode</span><span style="color:#24292E;">(bin, </span><span style="color:#032F62;">&#39;gbk&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="四、网络操作" tabindex="-1">四、网络操作 ⭐ <a class="header-anchor" href="#四、网络操作" aria-label="Permalink to &quot;四、网络操作 :star:&quot;">​</a></h2><blockquote><ul><li>获取其他源数据</li><li>优化前端性能</li><li>故障排查</li></ul></blockquote><h3 id="_4-1-小案例" tabindex="-1">4.1 小案例 <a class="header-anchor" href="#_4-1-小案例" aria-label="Permalink to &quot;4.1 小案例&quot;">​</a></h3><p>以下程序创建了一个HTTP服务器并监听<code>8124</code>端口，浏览器访问该端口<code>http://127.0.0.1:8124/</code>能看到效果。</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> http </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;http&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">http.</span><span style="color:#B392F0;">createServer</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">request</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">response</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    response.</span><span style="color:#B392F0;">writeHead</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">, { </span><span style="color:#9ECBFF;">&#39;Content-Type&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;text-plain&#39;</span><span style="color:#E1E4E8;"> });</span></span>
<span class="line"><span style="color:#E1E4E8;">    response.</span><span style="color:#B392F0;">end</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Hello World</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}).</span><span style="color:#B392F0;">listen</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">8124</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> http </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;http&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">http.</span><span style="color:#6F42C1;">createServer</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">request</span><span style="color:#24292E;">, </span><span style="color:#E36209;">response</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    response.</span><span style="color:#6F42C1;">writeHead</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">200</span><span style="color:#24292E;">, { </span><span style="color:#032F62;">&#39;Content-Type&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;text-plain&#39;</span><span style="color:#24292E;"> });</span></span>
<span class="line"><span style="color:#24292E;">    response.</span><span style="color:#6F42C1;">end</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Hello World</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}).</span><span style="color:#6F42C1;">listen</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">8124</span><span style="color:#24292E;">);</span></span></code></pre></div><h3 id="_4-2-api概述" tabindex="-1">4.2 API概述 <a class="header-anchor" href="#_4-2-api概述" aria-label="Permalink to &quot;4.2 API概述&quot;">​</a></h3><h4 id="_4-2-1-http" tabindex="-1">4.2.1 HTTP <a class="header-anchor" href="#_4-2-1-http" aria-label="Permalink to &quot;4.2.1 HTTP&quot;">​</a></h4><blockquote><p><strong>官方文档：</strong> <a href="http://nodejs.org/api/http.html" target="_blank" rel="noreferrer">http://nodejs.org/api/http.html</a></p></blockquote><p>http模块提供两种使用方式：</p><ul><li>作为服务端使用时，创建一个HTTP服务器，监听HTTP客户端请求并返回响应。</li><li>作为客户端使用时，发起一个HTTP客户端请求，获取服务端响应。</li></ul><p>💡 HTTP请求 和 HTTP响应本质都是数据流，由请求头 和 请求体组成</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//请求</span></span>
<span class="line"><span style="color:#79B8FF;">POST</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">HTTP</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">1.1</span></span>
<span class="line"><span style="color:#E1E4E8;">User</span><span style="color:#F97583;">-</span><span style="color:#B392F0;">Agent</span><span style="color:#E1E4E8;">: curl</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">7.26</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#B392F0;">Host</span><span style="color:#E1E4E8;">: localhost</span></span>
<span class="line"><span style="color:#B392F0;">Accept</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">*</span><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">Content-Length: 11</span></span>
<span class="line"><span style="color:#6A737D;">Content-Type: application/x-www-form-urlencoded</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">Hello World</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//响应</span></span>
<span class="line"><span style="color:#6A737D;">HTTP/1.1 200 OK</span></span>
<span class="line"><span style="color:#6A737D;">Content-Type: text/plain</span></span>
<span class="line"><span style="color:#6A737D;">Content-Length: 11</span></span>
<span class="line"><span style="color:#6A737D;">Date: Tue, 05 Nov 2013 05:31:38 GMT</span></span>
<span class="line"><span style="color:#6A737D;">Connection: keep-alive</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">Hello World</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//请求</span></span>
<span class="line"><span style="color:#005CC5;">POST</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">HTTP</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">1.1</span></span>
<span class="line"><span style="color:#24292E;">User</span><span style="color:#D73A49;">-</span><span style="color:#6F42C1;">Agent</span><span style="color:#24292E;">: curl</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">7.26</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#6F42C1;">Host</span><span style="color:#24292E;">: localhost</span></span>
<span class="line"><span style="color:#6F42C1;">Accept</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">*</span><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">Content-Length: 11</span></span>
<span class="line"><span style="color:#6A737D;">Content-Type: application/x-www-form-urlencoded</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">Hello World</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//响应</span></span>
<span class="line"><span style="color:#6A737D;">HTTP/1.1 200 OK</span></span>
<span class="line"><span style="color:#6A737D;">Content-Type: text/plain</span></span>
<span class="line"><span style="color:#6A737D;">Content-Length: 11</span></span>
<span class="line"><span style="color:#6A737D;">Date: Tue, 05 Nov 2013 05:31:38 GMT</span></span>
<span class="line"><span style="color:#6A737D;">Connection: keep-alive</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">Hello World</span></span></code></pre></div><p>做服务端案例</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">http.</span><span style="color:#B392F0;">createServer</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">request</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">response</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> body </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(request.method);</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(request.headers);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    request.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;data&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">chunk</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        body.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(chunk);</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    request.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;end&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">        body </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Buffer.</span><span style="color:#B392F0;">concat</span><span style="color:#E1E4E8;">(body);</span></span>
<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(body.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">}).</span><span style="color:#B392F0;">listen</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">80</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">http.</span><span style="color:#6F42C1;">createServer</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">request</span><span style="color:#24292E;">, </span><span style="color:#E36209;">response</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> body </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(request.method);</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(request.headers);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    request.</span><span style="color:#6F42C1;">on</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;data&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">chunk</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        body.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(chunk);</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    request.</span><span style="color:#6F42C1;">on</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;end&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">        body </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Buffer.</span><span style="color:#6F42C1;">concat</span><span style="color:#24292E;">(body);</span></span>
<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(body.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">}).</span><span style="color:#6F42C1;">listen</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">80</span><span style="color:#24292E;">);</span></span></code></pre></div><p>做客户端案例</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> options </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        hostname: </span><span style="color:#9ECBFF;">&#39;www.example.com&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        port: </span><span style="color:#79B8FF;">80</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        path: </span><span style="color:#9ECBFF;">&#39;/upload&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        method: </span><span style="color:#9ECBFF;">&#39;POST&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        headers: {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&#39;Content-Type&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;application/x-www-form-urlencoded&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> request </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> http.</span><span style="color:#B392F0;">request</span><span style="color:#E1E4E8;">(options, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">response</span><span style="color:#E1E4E8;">) {});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">request.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Hello World&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">request.</span><span style="color:#B392F0;">end</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> options </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        hostname: </span><span style="color:#032F62;">&#39;www.example.com&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        port: </span><span style="color:#005CC5;">80</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        path: </span><span style="color:#032F62;">&#39;/upload&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        method: </span><span style="color:#032F62;">&#39;POST&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        headers: {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&#39;Content-Type&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;application/x-www-form-urlencoded&#39;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> request </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> http.</span><span style="color:#6F42C1;">request</span><span style="color:#24292E;">(options, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">response</span><span style="color:#24292E;">) {});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">request.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Hello World&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">request.</span><span style="color:#6F42C1;">end</span><span style="color:#24292E;">();</span></span></code></pre></div><h4 id="_4-2-2-https" tabindex="-1">4.2.2 HTTPS ⭐ <a class="header-anchor" href="#_4-2-2-https" aria-label="Permalink to &quot;4.2.2 HTTPS :star:&quot;">​</a></h4><p>💡 <code>https</code>模块与<code>http</code>模块极为类似，区别在于<code>https</code>模块需要额外处理SSL（<strong>Secure Sockets Layer</strong>）证书。ssl证书在双端建立加密链接，保护通信内容的机密性 和 完整性。</p><p>服务端下</p><ul><li>增加一个options对象，内部设置key：服务器使用的私钥 和 cert字段：服务器的公钥</li><li>NodeJS支持SNI（Server name indication 服务器名称指示）技术，同一个https服务器下可以根据不同的域名使用不同的证书</li></ul><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> options </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        key: fs.</span><span style="color:#B392F0;">readFileSync</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./ssl/default.key&#39;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">        cert: fs.</span><span style="color:#B392F0;">readFileSync</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./ssl/default.cer&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> server </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> https.</span><span style="color:#B392F0;">createServer</span><span style="color:#E1E4E8;">(options, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">request</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">response</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">server.</span><span style="color:#B392F0;">addContext</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;foo.com&#39;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">    key: fs.</span><span style="color:#B392F0;">readFileSync</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./ssl/foo.com.key&#39;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">    cert: fs.</span><span style="color:#B392F0;">readFileSync</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./ssl/foo.com.cer&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">server.</span><span style="color:#B392F0;">addContext</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;bar.com&#39;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">    key: fs.</span><span style="color:#B392F0;">readFileSync</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./ssl/bar.com.key&#39;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">    cert: fs.</span><span style="color:#B392F0;">readFileSync</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./ssl/bar.com.cer&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> options </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        key: fs.</span><span style="color:#6F42C1;">readFileSync</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./ssl/default.key&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">        cert: fs.</span><span style="color:#6F42C1;">readFileSync</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./ssl/default.cer&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> server </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> https.</span><span style="color:#6F42C1;">createServer</span><span style="color:#24292E;">(options, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">request</span><span style="color:#24292E;">, </span><span style="color:#E36209;">response</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">server.</span><span style="color:#6F42C1;">addContext</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;foo.com&#39;</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">    key: fs.</span><span style="color:#6F42C1;">readFileSync</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./ssl/foo.com.key&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    cert: fs.</span><span style="color:#6F42C1;">readFileSync</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./ssl/foo.com.cer&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">server.</span><span style="color:#6F42C1;">addContext</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;bar.com&#39;</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">    key: fs.</span><span style="color:#6F42C1;">readFileSync</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./ssl/bar.com.key&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    cert: fs.</span><span style="color:#6F42C1;">readFileSync</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./ssl/bar.com.cer&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>💡 如果目标服务器使用的SSL证书是自制的，不是从颁发机构购买的，默认情况下<code>https</code>模块会拒绝连接，提示说有证书安全问题。在<code>options</code>里加入<code>rejectUnauthorized: false</code>字段可以禁用对证书有效性的检查，从而允许<code>https</code>模块请求开发环境下使用自制证书的HTTPS服务器。</p><p>客户端下</p><p>同HTTP相同</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> options </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        hostname: </span><span style="color:#9ECBFF;">&#39;www.example.com&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        port: </span><span style="color:#79B8FF;">443</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        path: </span><span style="color:#9ECBFF;">&#39;/&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        method: </span><span style="color:#9ECBFF;">&#39;GET&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> request </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> https.</span><span style="color:#B392F0;">request</span><span style="color:#E1E4E8;">(options, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">response</span><span style="color:#E1E4E8;">) {});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">request.</span><span style="color:#B392F0;">end</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> options </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        hostname: </span><span style="color:#032F62;">&#39;www.example.com&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        port: </span><span style="color:#005CC5;">443</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        path: </span><span style="color:#032F62;">&#39;/&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        method: </span><span style="color:#032F62;">&#39;GET&#39;</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> request </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> https.</span><span style="color:#6F42C1;">request</span><span style="color:#24292E;">(options, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">response</span><span style="color:#24292E;">) {});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">request.</span><span style="color:#6F42C1;">end</span><span style="color:#24292E;">();</span></span></code></pre></div><h4 id="_4-2-3-url" tabindex="-1">4.2.3 URL ⭐ <a class="header-anchor" href="#_4-2-3-url" aria-label="Permalink to &quot;4.2.3 URL :star:&quot;">​</a></h4><blockquote><p><strong>官方文档：</strong> <a href="http://nodejs.org/api/url.html" target="_blank" rel="noreferrer">http://nodejs.org/api/url.html</a></p></blockquote><p>处理HTTP请求时<code>url</code>模块使用率超高，因为该模块允许<code>解析URL、生成URL，以及拼接URL</code>。</p><p>认识一个URL字符串整体结构</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">                           href</span></span>
<span class="line"><span style="color:#E1E4E8;"> -----------------------------------------------------------------</span></span>
<span class="line"><span style="color:#E1E4E8;">                            host              path</span></span>
<span class="line"><span style="color:#E1E4E8;">                      --------------- ----------------------------</span></span>
<span class="line"><span style="color:#E1E4E8;"> http: </span><span style="color:#6A737D;">// user:pass @ host.com : 8080 /p/a/t/h ?query=string #hash</span></span>
<span class="line"><span style="color:#E1E4E8;"> -----    ---------   --------   ---- -------- ------------- -----</span></span>
<span class="line"><span style="color:#E1E4E8;">protocol     auth     hostname   port pathname     search     hash</span></span>
<span class="line"><span style="color:#E1E4E8;">                                                ------------</span></span>
<span class="line"><span style="color:#E1E4E8;">                                                   query</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">                           href</span></span>
<span class="line"><span style="color:#24292E;"> -----------------------------------------------------------------</span></span>
<span class="line"><span style="color:#24292E;">                            host              path</span></span>
<span class="line"><span style="color:#24292E;">                      --------------- ----------------------------</span></span>
<span class="line"><span style="color:#24292E;"> http: </span><span style="color:#6A737D;">// user:pass @ host.com : 8080 /p/a/t/h ?query=string #hash</span></span>
<span class="line"><span style="color:#24292E;"> -----    ---------   --------   ---- -------- ------------- -----</span></span>
<span class="line"><span style="color:#24292E;">protocol     auth     hostname   port pathname     search     hash</span></span>
<span class="line"><span style="color:#24292E;">                                                ------------</span></span>
<span class="line"><span style="color:#24292E;">                                                   query</span></span></code></pre></div><p>如下示例可将一个URL字符串转为URL对象。</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">url.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;http://user:pass@host.com:8080/p/a/t/h?query=string#hash&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">/* =&gt;</span></span>
<span class="line"><span style="color:#6A737D;">{ protocol: &#39;http:&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">  auth: &#39;user:pass&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">  host: &#39;host.com:8080&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">  port: &#39;8080&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">  hostname: &#39;host.com&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">  hash: &#39;#hash&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">  search: &#39;?query=string&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">  query: &#39;query=string&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">  pathname: &#39;/p/a/t/h&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">  path: &#39;/p/a/t/h?query=string&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">  href: &#39;http://user:pass@host.com:8080/p/a/t/h?query=string#hash&#39; }</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">url.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;http://user:pass@host.com:8080/p/a/t/h?query=string#hash&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">/* =&gt;</span></span>
<span class="line"><span style="color:#6A737D;">{ protocol: &#39;http:&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">  auth: &#39;user:pass&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">  host: &#39;host.com:8080&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">  port: &#39;8080&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">  hostname: &#39;host.com&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">  hash: &#39;#hash&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">  search: &#39;?query=string&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">  query: &#39;query=string&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">  pathname: &#39;/p/a/t/h&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">  path: &#39;/p/a/t/h?query=string&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">  href: &#39;http://user:pass@host.com:8080/p/a/t/h?query=string#hash&#39; }</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre></div><p>其中，url.parse方法内部的URL字符串不一定是完整的URL，例如在HTTP服务器回调函数中，<code>request.url</code>不包含协议头和域名，但同样可以用<code>.parse</code>方法解析。</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">http.</span><span style="color:#B392F0;">createServer</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">request</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">response</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> tmp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> request.url; </span><span style="color:#6A737D;">// =&gt; &quot;/foo/bar?a=b&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    url.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(tmp);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/* =&gt;</span></span>
<span class="line"><span style="color:#6A737D;">    { protocol: null,</span></span>
<span class="line"><span style="color:#6A737D;">      slashes: null,</span></span>
<span class="line"><span style="color:#6A737D;">      auth: null,</span></span>
<span class="line"><span style="color:#6A737D;">      host: null,</span></span>
<span class="line"><span style="color:#6A737D;">      port: null,</span></span>
<span class="line"><span style="color:#6A737D;">      hostname: null,</span></span>
<span class="line"><span style="color:#6A737D;">      hash: null,</span></span>
<span class="line"><span style="color:#6A737D;">      search: &#39;?a=b&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">      query: &#39;a=b&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">      pathname: &#39;/foo/bar&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">      path: &#39;/foo/bar?a=b&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">      href: &#39;/foo/bar?a=b&#39; }</span></span>
<span class="line"><span style="color:#6A737D;">    */</span></span>
<span class="line"><span style="color:#E1E4E8;">}).</span><span style="color:#B392F0;">listen</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">80</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">http.</span><span style="color:#6F42C1;">createServer</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">request</span><span style="color:#24292E;">, </span><span style="color:#E36209;">response</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> tmp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> request.url; </span><span style="color:#6A737D;">// =&gt; &quot;/foo/bar?a=b&quot;</span></span>
<span class="line"><span style="color:#24292E;">    url.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(tmp);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/* =&gt;</span></span>
<span class="line"><span style="color:#6A737D;">    { protocol: null,</span></span>
<span class="line"><span style="color:#6A737D;">      slashes: null,</span></span>
<span class="line"><span style="color:#6A737D;">      auth: null,</span></span>
<span class="line"><span style="color:#6A737D;">      host: null,</span></span>
<span class="line"><span style="color:#6A737D;">      port: null,</span></span>
<span class="line"><span style="color:#6A737D;">      hostname: null,</span></span>
<span class="line"><span style="color:#6A737D;">      hash: null,</span></span>
<span class="line"><span style="color:#6A737D;">      search: &#39;?a=b&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">      query: &#39;a=b&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">      pathname: &#39;/foo/bar&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">      path: &#39;/foo/bar?a=b&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">      href: &#39;/foo/bar?a=b&#39; }</span></span>
<span class="line"><span style="color:#6A737D;">    */</span></span>
<span class="line"><span style="color:#24292E;">}).</span><span style="color:#6F42C1;">listen</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">80</span><span style="color:#24292E;">);</span></span></code></pre></div><p><code>.parse</code>方法还支持第二个和第三个布尔类型可选参数。第二个参数等于<code>true</code>时，该方法返回的URL对象中，<code>query</code>字段不再是一个字符串，而是一个经过<code>querystring</code>模块转换后的参数对象。第三个参数等于<code>true</code>时，该方法可以正确解析不带协议头的URL，例如<code>//www.example.com/foo/bar</code>。</p><p>相反的，format方法可以将一个URL对象转换为URL字符串，示例如下</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">url.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    protocol: </span><span style="color:#9ECBFF;">&#39;http:&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    host: </span><span style="color:#9ECBFF;">&#39;www.example.com&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    pathname: </span><span style="color:#9ECBFF;">&#39;/p/a/t/h&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    search: </span><span style="color:#9ECBFF;">&#39;query=string&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#6A737D;">/* =&gt;</span></span>
<span class="line"><span style="color:#6A737D;">&#39;http://www.example.com/p/a/t/h?query=string&#39;</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">url.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    protocol: </span><span style="color:#032F62;">&#39;http:&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    host: </span><span style="color:#032F62;">&#39;www.example.com&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    pathname: </span><span style="color:#032F62;">&#39;/p/a/t/h&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    search: </span><span style="color:#032F62;">&#39;query=string&#39;</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#6A737D;">/* =&gt;</span></span>
<span class="line"><span style="color:#6A737D;">&#39;http://www.example.com/p/a/t/h?query=string&#39;</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre></div><p>另外，<code>.resolve</code>方法可以用于拼接URL，示例如下</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">url.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;http://www.example.com/foo/bar&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;../baz&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">/* =&gt;</span></span>
<span class="line"><span style="color:#6A737D;">http://www.example.com/baz</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">url.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;http://www.example.com/foo/bar&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;../baz&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">/* =&gt;</span></span>
<span class="line"><span style="color:#6A737D;">http://www.example.com/baz</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre></div><h4 id="_4-2-4-query-string" tabindex="-1">4.2.4 Query String <a class="header-anchor" href="#_4-2-4-query-string" aria-label="Permalink to &quot;4.2.4 Query String&quot;">​</a></h4><blockquote><p><strong>官方文档：</strong> <a href="http://nodejs.org/api/querystring.html" target="_blank" rel="noreferrer">http://nodejs.org/api/querystring.html</a></p></blockquote><p><code>querystring</code>模块用于实现URL参数字符串与参数对象的互相转换，示例如下</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">querystring.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;foo=bar&amp;baz=qux&amp;baz=quux&amp;corge&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">/* =&gt;</span></span>
<span class="line"><span style="color:#6A737D;">{ foo: &#39;bar&#39;, baz: [&#39;qux&#39;, &#39;quux&#39;], corge: &#39;&#39; }</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">querystring.</span><span style="color:#B392F0;">stringify</span><span style="color:#E1E4E8;">({ foo: </span><span style="color:#9ECBFF;">&#39;bar&#39;</span><span style="color:#E1E4E8;">, baz: [</span><span style="color:#9ECBFF;">&#39;qux&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;quux&#39;</span><span style="color:#E1E4E8;">], corge: </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;"> });</span></span>
<span class="line"><span style="color:#6A737D;">/* =&gt;</span></span>
<span class="line"><span style="color:#6A737D;">&#39;foo=bar&amp;baz=qux&amp;baz=quux&amp;corge=&#39;</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">querystring.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;foo=bar&amp;baz=qux&amp;baz=quux&amp;corge&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">/* =&gt;</span></span>
<span class="line"><span style="color:#6A737D;">{ foo: &#39;bar&#39;, baz: [&#39;qux&#39;, &#39;quux&#39;], corge: &#39;&#39; }</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">querystring.</span><span style="color:#6F42C1;">stringify</span><span style="color:#24292E;">({ foo: </span><span style="color:#032F62;">&#39;bar&#39;</span><span style="color:#24292E;">, baz: [</span><span style="color:#032F62;">&#39;qux&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;quux&#39;</span><span style="color:#24292E;">], corge: </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;"> });</span></span>
<span class="line"><span style="color:#6A737D;">/* =&gt;</span></span>
<span class="line"><span style="color:#6A737D;">&#39;foo=bar&amp;baz=qux&amp;baz=quux&amp;corge=&#39;</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre></div><h4 id="_4-2-5-zlib" tabindex="-1">4.2.5 Zlib <a class="header-anchor" href="#_4-2-5-zlib" aria-label="Permalink to &quot;4.2.5 Zlib&quot;">​</a></h4><p>提供了数据压缩和解压的功能</p><p>判断客户端是否支持接收gzip响应，并在支持的情况下使用<code>zlib</code>模块返回gzip之后的响应体数据</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">http.</span><span style="color:#B392F0;">createServer</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">request</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">response</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1024</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (i</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        data </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;.&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ((request.headers[</span><span style="color:#9ECBFF;">&#39;accept-encoding&#39;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">indexOf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;gzip&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        zlib.</span><span style="color:#B392F0;">gzip</span><span style="color:#E1E4E8;">(data, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            response.</span><span style="color:#B392F0;">writeHead</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#9ECBFF;">&#39;Content-Type&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;text/plain&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#9ECBFF;">&#39;Content-Encoding&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;gzip&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">            });</span></span>
<span class="line"><span style="color:#E1E4E8;">            response.</span><span style="color:#B392F0;">end</span><span style="color:#E1E4E8;">(data);</span></span>
<span class="line"><span style="color:#E1E4E8;">        });</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        response.</span><span style="color:#B392F0;">writeHead</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&#39;Content-Type&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;text/plain&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">        });</span></span>
<span class="line"><span style="color:#E1E4E8;">        response.</span><span style="color:#B392F0;">end</span><span style="color:#E1E4E8;">(data);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}).</span><span style="color:#B392F0;">listen</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">80</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">http.</span><span style="color:#6F42C1;">createServer</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">request</span><span style="color:#24292E;">, </span><span style="color:#E36209;">response</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1024</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (i</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        data </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;.&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((request.headers[</span><span style="color:#032F62;">&#39;accept-encoding&#39;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">indexOf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;gzip&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        zlib.</span><span style="color:#6F42C1;">gzip</span><span style="color:#24292E;">(data, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">err</span><span style="color:#24292E;">, </span><span style="color:#E36209;">data</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            response.</span><span style="color:#6F42C1;">writeHead</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">200</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&#39;Content-Type&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;text/plain&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&#39;Content-Encoding&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;gzip&#39;</span></span>
<span class="line"><span style="color:#24292E;">            });</span></span>
<span class="line"><span style="color:#24292E;">            response.</span><span style="color:#6F42C1;">end</span><span style="color:#24292E;">(data);</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        response.</span><span style="color:#6F42C1;">writeHead</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">200</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&#39;Content-Type&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;text/plain&#39;</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">        response.</span><span style="color:#6F42C1;">end</span><span style="color:#24292E;">(data);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}).</span><span style="color:#6F42C1;">listen</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">80</span><span style="color:#24292E;">);</span></span></code></pre></div><p>判断服务端响应是否使用gzip压缩，并在压缩的情况使用<code>zlib</code>模块解压响应体数据</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> options </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        hostname: </span><span style="color:#9ECBFF;">&#39;www.example.com&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        port: </span><span style="color:#79B8FF;">80</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        path: </span><span style="color:#9ECBFF;">&#39;/&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        method: </span><span style="color:#9ECBFF;">&#39;GET&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        headers: {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&#39;Accept-Encoding&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;gzip, deflate&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">http.</span><span style="color:#B392F0;">request</span><span style="color:#E1E4E8;">(options, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">response</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> body </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    response.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;data&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">chunk</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        body.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(chunk);</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    response.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;end&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">        body </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Buffer.</span><span style="color:#B392F0;">concat</span><span style="color:#E1E4E8;">(body);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (response.headers[</span><span style="color:#9ECBFF;">&#39;content-encoding&#39;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;gzip&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            zlib.</span><span style="color:#B392F0;">gunzip</span><span style="color:#E1E4E8;">(body, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(data.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">            });</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(data.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">}).</span><span style="color:#B392F0;">end</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> options </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        hostname: </span><span style="color:#032F62;">&#39;www.example.com&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        port: </span><span style="color:#005CC5;">80</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        path: </span><span style="color:#032F62;">&#39;/&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        method: </span><span style="color:#032F62;">&#39;GET&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        headers: {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&#39;Accept-Encoding&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;gzip, deflate&#39;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">http.</span><span style="color:#6F42C1;">request</span><span style="color:#24292E;">(options, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">response</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> body </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    response.</span><span style="color:#6F42C1;">on</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;data&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">chunk</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        body.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(chunk);</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    response.</span><span style="color:#6F42C1;">on</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;end&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">        body </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Buffer.</span><span style="color:#6F42C1;">concat</span><span style="color:#24292E;">(body);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (response.headers[</span><span style="color:#032F62;">&#39;content-encoding&#39;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;gzip&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            zlib.</span><span style="color:#6F42C1;">gunzip</span><span style="color:#24292E;">(body, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">err</span><span style="color:#24292E;">, </span><span style="color:#E36209;">data</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(data.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">            });</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(data.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">}).</span><span style="color:#6F42C1;">end</span><span style="color:#24292E;">();</span></span></code></pre></div><h4 id="_4-2-6-net" tabindex="-1">4.2.6 Net <a class="header-anchor" href="#_4-2-6-net" aria-label="Permalink to &quot;4.2.6 Net&quot;">​</a></h4><blockquote><p><strong>官方文档：</strong> <a href="http://nodejs.org/api/net.html" target="_blank" rel="noreferrer">http://nodejs.org/api/net.html</a></p></blockquote><p>简单案例</p><p>服务端</p><p>这个HTTP服务器不管收到啥请求，都固定返回相同的响应</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">net.</span><span style="color:#B392F0;">createServer</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">conn</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    conn.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;data&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        conn.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">([</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&#39;HTTP/1.1 200 OK&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&#39;Content-Type: text/plain&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&#39;Content-Length: 11&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&#39;Hello World&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">        ].</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">}).</span><span style="color:#B392F0;">listen</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">80</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">net.</span><span style="color:#6F42C1;">createServer</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">conn</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    conn.</span><span style="color:#6F42C1;">on</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;data&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">data</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        conn.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">([</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&#39;HTTP/1.1 200 OK&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&#39;Content-Type: text/plain&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&#39;Content-Length: 11&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&#39;Hello World&#39;</span></span>
<span class="line"><span style="color:#24292E;">        ].</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">}).</span><span style="color:#6F42C1;">listen</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">80</span><span style="color:#24292E;">);</span></span></code></pre></div><p>客户端</p><p>Socket客户端在建立连接后发送了一个HTTP GET请求，并通过<code>data</code>事件监听函数来获取服务器响应。</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> options </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        port: </span><span style="color:#79B8FF;">80</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        host: </span><span style="color:#9ECBFF;">&#39;www.example.com&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> client </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> net.</span><span style="color:#B392F0;">connect</span><span style="color:#E1E4E8;">(options, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">        client.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">([</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&#39;GET / HTTP/1.1&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&#39;User-Agent: curl/7.26.0&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&#39;Host: www.baidu.com&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&#39;Accept: */*&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&#39;&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">        ].</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">client.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;data&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(data.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    client.</span><span style="color:#B392F0;">end</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> options </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        port: </span><span style="color:#005CC5;">80</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        host: </span><span style="color:#032F62;">&#39;www.example.com&#39;</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> client </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> net.</span><span style="color:#6F42C1;">connect</span><span style="color:#24292E;">(options, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">        client.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">([</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&#39;GET / HTTP/1.1&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&#39;User-Agent: curl/7.26.0&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&#39;Host: www.baidu.com&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&#39;Accept: */*&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&#39;&#39;</span></span>
<span class="line"><span style="color:#24292E;">        ].</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">client.</span><span style="color:#6F42C1;">on</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;data&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">data</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(data.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    client.</span><span style="color:#6F42C1;">end</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p><strong>总结</strong></p><ul><li><code>http</code>和<code>https</code>模块支持服务端模式和客户端模式两种使用方式。</li><li><code>request</code>和<code>response</code>对象除了用于读写头数据外，都可以当作数据流来操作。</li><li><code>url.parse</code>方法加上<code>request.url</code>属性是处理HTTP请求时的固定搭配。</li><li>使用<code>zlib</code>模块可以减少使用HTTP协议时的数据传输量。</li><li>通过<code>net</code>模块的Socket服务器与客户端可对HTTP协议做底层操作 <ul><li>通常情况下，HTTP 服务器是基于 TCP 的 Socket 服务器构建的，而 Node.js 的 <code>net</code> 模块允许在更低级别上直接操作 TCP 和网络通信，因此可以在这个基础上构建和处理 HTTP 协议。</li></ul></li></ul><h2 id="五、进程管理" tabindex="-1">五、进程管理 <a class="header-anchor" href="#五、进程管理" aria-label="Permalink to &quot;五、进程管理&quot;">​</a></h2><h3 id="_5-1-拷贝文件案例" tabindex="-1">5.1 拷贝文件案例 <a class="header-anchor" href="#_5-1-拷贝文件案例" aria-label="Permalink to &quot;5.1 拷贝文件案例&quot;">​</a></h3><p>使用NodeJS调用终端命令来简化目录拷贝</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> child_process </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;child_process&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> util </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;util&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">copy</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">source</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">target</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">callback</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    child_process.</span><span style="color:#B392F0;">exec</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        util.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;cp -r %s/* %s&#39;</span><span style="color:#E1E4E8;">, source, target), callback);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">copy</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;b&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> child_process </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;child_process&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> util </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;util&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">copy</span><span style="color:#24292E;">(</span><span style="color:#E36209;">source</span><span style="color:#24292E;">, </span><span style="color:#E36209;">target</span><span style="color:#24292E;">, </span><span style="color:#E36209;">callback</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    child_process.</span><span style="color:#6F42C1;">exec</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        util.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;cp -r %s/* %s&#39;</span><span style="color:#24292E;">, source, target), callback);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">copy</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;a&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;b&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">err</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>💡 <code>从以上代码中可以看到，子进程是异步运行的，是通过回调函数返回执行结果</code></p><h3 id="_5-2-api概述" tabindex="-1">5.2 API概述 <a class="header-anchor" href="#_5-2-api概述" aria-label="Permalink to &quot;5.2 API概述&quot;">​</a></h3><h4 id="_5-2-1-process" tabindex="-1">5.2.1 Process ⭐ <a class="header-anchor" href="#_5-2-1-process" aria-label="Permalink to &quot;5.2.1 Process :star:&quot;">​</a></h4><blockquote><p><strong>官方文档：</strong> <a href="http://nodejs.org/api/process.html" target="_blank" rel="noreferrer">http://nodejs.org/api/process.html</a></p></blockquote><p>任何一个进程都有启动进程时使用的命令行参数，有标准输入标准输出，有运行权限，有运行环境和运行状态。在NodeJS中，可以通过<code>process</code>对象感知和控制NodeJS自身进程的方方面面。另外需要注意的是，<code>process</code>不是内置模块，<code>而是一个全局对象，因此在任何地方都可以直接使用</code>。</p><h4 id="_5-2-2-child-process" tabindex="-1">5.2.2 Child Process ⭐ <a class="header-anchor" href="#_5-2-2-child-process" aria-label="Permalink to &quot;5.2.2 Child Process :star:&quot;">​</a></h4><blockquote><p><strong>官方文档：</strong> <a href="http://nodejs.org/api/child_process.html" target="_blank" rel="noreferrer">http://nodejs.org/api/child_process.html</a></p></blockquote><p>使用\`\`模块可以创建和控制子进程<code>。该模块提供的API中最核心的是</code>.spawn\`，其余API都是针对特定使用场景对它的进一步封装，算是一种语法糖。</p><p>💡 其中.spawn 用于执行外部命令，例如<code>运行系统命令、执行可执行文件等。它是一个异步操作，允许你在 Node.js 中与其他程序进行交互，比如执行命令、传递参数、接收标准输入输出</code>等。</p><h4 id="_5-2-3-cluster" tabindex="-1">5.2.3 Cluster ⭐ <a class="header-anchor" href="#_5-2-3-cluster" aria-label="Permalink to &quot;5.2.3 Cluster :star:&quot;">​</a></h4><blockquote><p><strong>官方文档：</strong> <a href="http://nodejs.org/api/cluster.html" target="_blank" rel="noreferrer">http://nodejs.org/api/cluster.html</a></p></blockquote><p><code>cluster</code> 模块用于创建多进程的集群，允许 Node.js 应用程序利用多核系统资源，通过将工作负载分布到多个子进程来提高性能和可靠性。</p><p><code>cluster</code> 模块的主要作用包括：⭐</p><ol><li><strong>利用多核 CPU</strong>: Node.js 是单线程的，通过 <code>cluster</code> 模块，可以充分利用多核 CPU 的优势，创建多个子进程来同时处理请求，提高应用程序的并发处理能力和性能。</li><li><strong>负载均衡</strong>: <code>cluster</code> 模块提供了一种简单的负载均衡机制。它允许主进程（Master）接收外部的连接，并将连接请求分发到多个子进程（Worker）上去处理。</li><li><strong>提高应用的稳定性</strong>: 单个 Node.js 进程崩溃可能导致整个应用程序崩溃，而使用 <code>cluster</code> 模块可以创建多个子进程，即使某个子进程出现了问题，其他子进程仍然可以继续工作，提高了应用的稳定性。</li></ol><h3 id="_5-3-应用场景" tabindex="-1">5.3 应用场景 <a class="header-anchor" href="#_5-3-应用场景" aria-label="Permalink to &quot;5.3 应用场景&quot;">​</a></h3><h4 id="_5-3-1-获取命令行参数-process" tabindex="-1">5.3.1 获取命令行参数(Process) ⭐ <a class="header-anchor" href="#_5-3-1-获取命令行参数-process" aria-label="Permalink to &quot;5.3.1 获取命令行参数(Process) :star:&quot;">​</a></h4><p>在NodeJS中可以通过<code>process.argv</code>获取命令行参数。但是比较意外的是，<code>node</code>执行程序路径和主模块文件路径固定占据了<code>argv[0]</code>和<code>argv[1]</code>两个位置，而第一个命令行参数从<code>argv[2]</code>开始。为了让<code>argv</code>使用起来更加自然，可以按照以下方式处理。</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">argv</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(process.argv.</span><span style="color:#B392F0;">slice</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#E36209;">argv</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(process.argv.</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">));</span></span></code></pre></div><h4 id="_5-3-2-退出程序-process" tabindex="-1">5.3.2 退出程序(Process) ⭐ <a class="header-anchor" href="#_5-3-2-退出程序-process" aria-label="Permalink to &quot;5.3.2 退出程序(Process) :star:&quot;">​</a></h4><p>通常一个程序做完所有事情后就正常退出了，这时程序的退出状态码为<code>0</code>。或者一个程序运行时发生了异常后就挂了，这时程序的退出状态码不等于<code>0</code>。如果我们在代码中捕获了某个异常，但是觉得程序不应该继续运行下去，需要立即退出，并且需要把退出状态码设置为指定数字<code>1</code></p><p><img src="`+d+`" alt="image-20231228104120029"></p><h4 id="_5-3-3-控制输入输出-process" tabindex="-1">5.3.3 控制输入输出(Process) <a class="header-anchor" href="#_5-3-3-控制输入输出-process" aria-label="Permalink to &quot;5.3.3 控制输入输出(Process)&quot;">​</a></h4><p>NodeJS程序的标准输入流（stdin）、一个标准输出流（stdout）、一个标准错误流（stderr）分别对应<code>process.stdin</code>、<code>process.stdout</code>和<code>process.stderr</code>，第一个是只读数据流，后边两个是只写数据流，对它们的操作按照对数据流的操作方式即可。例如，<code>console.log</code>可以按照以下方式实现。</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    process.stdout.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        util.format.</span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(util, </span><span style="color:#79B8FF;">arguments</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    process.stdout.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        util.format.</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(util, </span><span style="color:#005CC5;">arguments</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>💡 上述代码使用 <code>util.format.apply(util, arguments)</code> 来格式化传入的参数，并通过 <code>process.stdout.write()</code> 将格式化后的内容写入标准输出流，并在最后添加换行符 <code>\\n</code>。</p><h4 id="_5-3-4-创建子进程-childprocess" tabindex="-1">5.3.4 创建子进程(childProcess) ⭐ <a class="header-anchor" href="#_5-3-4-创建子进程-childprocess" aria-label="Permalink to &quot;5.3.4 创建子进程(childProcess) :star:&quot;">​</a></h4><p>案例</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> child </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> child_process.</span><span style="color:#B392F0;">spawn</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;node&#39;</span><span style="color:#E1E4E8;">, [ </span><span style="color:#9ECBFF;">&#39;xxx.js&#39;</span><span style="color:#E1E4E8;"> ]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">child.stdout.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;data&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;stdout: &#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> data);</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">child.stderr.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;data&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;stderr: &#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> data);</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">child.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;close&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">code</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;child process exited with code &#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> code);</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> child </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> child_process.</span><span style="color:#6F42C1;">spawn</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;node&#39;</span><span style="color:#24292E;">, [ </span><span style="color:#032F62;">&#39;xxx.js&#39;</span><span style="color:#24292E;"> ]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">child.stdout.</span><span style="color:#6F42C1;">on</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;data&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">data</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;stdout: &#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> data);</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">child.stderr.</span><span style="color:#6F42C1;">on</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;data&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">data</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;stderr: &#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> data);</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">child.</span><span style="color:#6F42C1;">on</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;close&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">code</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;child process exited with code &#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> code);</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>上例中使用了<code>.spawn(exec, args, options)</code>方法，该方法支持三个参数。第一个参数是执行文件路径，可以是执行文件的相对或绝对路径，也可以是根据PATH环境变量能找到的执行文件名。第二个参数中，数组中的每个成员都按顺序对应一个命令行参数。第三个参数可选，用于配置子进程的执行环境与行为。</p><p>另外，上例中虽然通过子进程对象的<code>.stdout</code>和<code>.stderr</code>访问子进程的输出，但通过<code>options.stdio</code>字段的不同配置，可以将子进程的输入输出重定向到任何数据流上，或者让子进程共享父进程的标准输入输出流，或者直接忽略子进程的输入输出。</p><h4 id="_5-3-5-进程间通讯" tabindex="-1">5.3.5 进程间通讯 ⭐ <a class="header-anchor" href="#_5-3-5-进程间通讯" aria-label="Permalink to &quot;5.3.5 进程间通讯 :star:&quot;">​</a></h4><p>如果父子进程都是NodeJS进程，就可以通过IPC（进程间通讯）双向传递数据。以下是一个例子，类似Vue中的Bus机制</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/* parent.js */</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> child </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> child_process.</span><span style="color:#B392F0;">spawn</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;node&#39;</span><span style="color:#E1E4E8;">, [ </span><span style="color:#9ECBFF;">&#39;child.js&#39;</span><span style="color:#E1E4E8;"> ], {</span></span>
<span class="line"><span style="color:#E1E4E8;">        stdio: [ </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;ipc&#39;</span><span style="color:#E1E4E8;"> ]</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">child.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;message&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">msg</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(msg);</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">child.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">({ hello: </span><span style="color:#9ECBFF;">&#39;hello&#39;</span><span style="color:#E1E4E8;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/* child.js */</span></span>
<span class="line"><span style="color:#E1E4E8;">process.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;message&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">msg</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    msg.hello </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> msg.hello.</span><span style="color:#B392F0;">toUpperCase</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    process.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">(msg);</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/* parent.js */</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> child </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> child_process.</span><span style="color:#6F42C1;">spawn</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;node&#39;</span><span style="color:#24292E;">, [ </span><span style="color:#032F62;">&#39;child.js&#39;</span><span style="color:#24292E;"> ], {</span></span>
<span class="line"><span style="color:#24292E;">        stdio: [ </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;ipc&#39;</span><span style="color:#24292E;"> ]</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">child.</span><span style="color:#6F42C1;">on</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;message&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">msg</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(msg);</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">child.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">({ hello: </span><span style="color:#032F62;">&#39;hello&#39;</span><span style="color:#24292E;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/* child.js */</span></span>
<span class="line"><span style="color:#24292E;">process.</span><span style="color:#6F42C1;">on</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;message&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">msg</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    msg.hello </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> msg.hello.</span><span style="color:#6F42C1;">toUpperCase</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    process.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(msg);</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>可以看到，父进程在创建子进程时，在<code>options.stdio</code>字段中通过<code>ipc</code>开启了一条IPC通道，之后就可以监听子进程对象的<code>message</code>事件接收来自子进程的消息，并通过<code>.send</code>方法给子进程发送消息。在子进程这边，可以在<code>process</code>对象上监听<code>message</code>事件接收来自父进程的消息，并通过<code>.send</code>方法向父进程发送消息。数据在传递过程中，会先在发送端使用<code>JSON.stringify</code>方法序列化，再在接收端使用<code>JSON.parse</code>方法反序列化。</p><h4 id="_5-3-6-守护子进程" tabindex="-1">5.3.6 守护子进程 <a class="header-anchor" href="#_5-3-6-守护子进程" aria-label="Permalink to &quot;5.3.6 守护子进程&quot;">​</a></h4><p>守护进程一般用于监控工作进程的运行状态，<code>在工作进程不正常退出时重启工作进程，保障工作进程不间断运行</code>。以下是一种实现方式。</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/* daemon.js */</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">spawn</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">mainModule</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> worker </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> child_process.</span><span style="color:#B392F0;">spawn</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;node&#39;</span><span style="color:#E1E4E8;">, [ mainModule ]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    worker.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;exit&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">code</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (code </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">spawn</span><span style="color:#E1E4E8;">(mainModule);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">spawn</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;worker.js&#39;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/* daemon.js */</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">spawn</span><span style="color:#24292E;">(</span><span style="color:#E36209;">mainModule</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> worker </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> child_process.</span><span style="color:#6F42C1;">spawn</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;node&#39;</span><span style="color:#24292E;">, [ mainModule ]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    worker.</span><span style="color:#6F42C1;">on</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;exit&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">code</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (code </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">spawn</span><span style="color:#24292E;">(mainModule);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">spawn</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;worker.js&#39;</span><span style="color:#24292E;">);</span></span></code></pre></div><p><strong>总结</strong></p><ul><li>使用<code>process</code>对象管理自身。</li><li>使用<code>child_process</code>模块创建和管理子进程。</li></ul><h2 id="六、异步编程" tabindex="-1">六、异步编程:⭐ <a class="header-anchor" href="#六、异步编程" aria-label="Permalink to &quot;六、异步编程::star:&quot;">​</a></h2><h3 id="_6-1-回调" tabindex="-1">6.1 回调 ⭐ <a class="header-anchor" href="#_6-1-回调" aria-label="Permalink to &quot;6.1 回调 :star:&quot;">​</a></h3><p>💡 JS本身是单线程运行的，不可能在一段代码还未结束运行时去运行别的代码，因此也就不存在异步执行的概念。<code>但是，如果某个函数做的事情是创建一个别的线程或进程，并与JS主线程并行地做一些事情，并在事情做完后通知JS主线程，那情况又不一样了。我们接着看看以下代码。</code></p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">setTimeout</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;world&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}, </span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;hello&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">--</span><span style="color:#E1E4E8;"> Console </span><span style="color:#F97583;">------------------------------</span></span>
<span class="line"><span style="color:#E1E4E8;">hello</span></span>
<span class="line"><span style="color:#E1E4E8;">world</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">setTimeout</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;world&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}, </span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;hello&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">--</span><span style="color:#24292E;"> Console </span><span style="color:#D73A49;">------------------------------</span></span>
<span class="line"><span style="color:#24292E;">hello</span></span>
<span class="line"><span style="color:#24292E;">world</span></span></code></pre></div><p>💡 如同上边所说，JS本身是单线程的，无法异步执行，因此我们可以认为<code>setTimeout</code>这类JS规范之外的由运行环境提供的特殊函数做的事情是创建一个平行线程后立即返回，让JS主进程可以接着执行后续代码，并在收到平行进程的通知后再执行回调函数。除了<code>setTimeout</code>、<code>setInterval</code>这些常见的，这类函数还包括NodeJS提供的诸如<code>fs.readFile</code>之类的异步API。</p><p>💡 另外，仍然回到JS是单线程运行的这个事实上，这决定了JS在执行完一段代码之前无法执行包括回调函数在内的别的代码。也就是说，即使平行线程完成工作了，通知JS主线程执行回调函数了，回调函数也要等到JS主线程空闲时才能开始执行。</p><h3 id="_6-2-代码设计模式" tabindex="-1">6.2 代码设计模式 <a class="header-anchor" href="#_6-2-代码设计模式" aria-label="Permalink to &quot;6.2 代码设计模式&quot;">​</a></h3><blockquote><p>异步编程有很多特有的代码设计模式，为了实现同样的功能，使用同步方式和异步方式编写的代码会有很大差异。以下分别介绍一些常见的模式。</p></blockquote><h4 id="_6-2-1-函数返回值" tabindex="-1">6.2.1 函数返回值 <a class="header-anchor" href="#_6-2-1-函数返回值" aria-label="Permalink to &quot;6.2.1  函数返回值&quot;">​</a></h4><p>使用一个函数的输出作为另一个函数的输入是很常见的需求，在同步方式下一般按以下方式编写代码：</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> output </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fn1</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">fn2</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;input&#39;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#6A737D;">// Do something.</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> output </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fn1</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">fn2</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;input&#39;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#6A737D;">// Do something.</span></span></code></pre></div><p>而在异步方式下，由于函数执行结果不是通过返回值，而是通过回调函数传递，因此一般按以下方式编写代码：</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">fn2</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;input&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">output2</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">fn1</span><span style="color:#E1E4E8;">(output2, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">output1</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// Do something.</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">fn2</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;input&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">output2</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">fn1</span><span style="color:#24292E;">(output2, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">output1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// Do something.</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>⚠️ 可以看到，这种方式就是一个回调函数套一个回调函多，套得太多了很容易写出<code>&gt;</code>形状的代码。</p><h4 id="_6-2-2-遍历数组" tabindex="-1">6.2.2 遍历数组 <a class="header-anchor" href="#_6-2-2-遍历数组" aria-label="Permalink to &quot;6.2.2 遍历数组&quot;">​</a></h4><p>在遍历数组时，使用某个函数依次对数据成员做一些处理也是常见的需求。如果函数是同步执行的，一般就会写出以下代码：</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> len </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> arr.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> len; </span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">i) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    arr[i] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">sync</span><span style="color:#E1E4E8;">(arr[i]);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// All array items have processed.</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> len </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> len; </span><span style="color:#D73A49;">++</span><span style="color:#24292E;">i) {</span></span>
<span class="line"><span style="color:#24292E;">    arr[i] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sync</span><span style="color:#24292E;">(arr[i]);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// All array items have processed.</span></span></code></pre></div><p>如果函数是异步执行的，以上代码就无法保证循环结束后所有数组成员都处理完毕了。如果数组成员必须一个接一个串行处理，则一般按照以下方式编写异步代码：</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">i</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">len</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">callback</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> len) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">async</span><span style="color:#E1E4E8;">(arr[i], </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            arr[i] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> value;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">(i </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, len, callback);</span></span>
<span class="line"><span style="color:#E1E4E8;">        });</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, arr.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// All array items have processed.</span></span>
<span class="line"><span style="color:#E1E4E8;">}));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">(</span><span style="color:#E36209;">i</span><span style="color:#24292E;">, </span><span style="color:#E36209;">len</span><span style="color:#24292E;">, </span><span style="color:#E36209;">callback</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> len) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">async</span><span style="color:#24292E;">(arr[i], </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">value</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            arr[i] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> value;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">(i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, len, callback);</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, arr.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// All array items have processed.</span></span>
<span class="line"><span style="color:#24292E;">}));</span></span></code></pre></div><h4 id="_6-2-3-异常处理" tabindex="-1">6.2.3 异常处理 <a class="header-anchor" href="#_6-2-3-异常处理" aria-label="Permalink to &quot;6.2.3 异常处理&quot;">​</a></h4><p>JS自身提供的异常捕获和处理机制——<code>try..catch..</code>，只能用于同步执行的代码。例子如下</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">sync</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">fn</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">sync</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Do something.</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (err) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Error: %s&#39;</span><span style="color:#E1E4E8;">, err.message);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">--</span><span style="color:#E1E4E8;"> Console </span><span style="color:#F97583;">------------------------------</span></span>
<span class="line"><span style="color:#B392F0;">Error</span><span style="color:#E1E4E8;">: object is not a </span><span style="color:#F97583;">function</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sync</span><span style="color:#24292E;">(</span><span style="color:#E36209;">fn</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">sync</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Do something.</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (err) {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Error: %s&#39;</span><span style="color:#24292E;">, err.message);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">--</span><span style="color:#24292E;"> Console </span><span style="color:#D73A49;">------------------------------</span></span>
<span class="line"><span style="color:#6F42C1;">Error</span><span style="color:#24292E;">: object is not a </span><span style="color:#D73A49;">function</span></span></code></pre></div><p>可以看到，异常会沿着代码执行路径一直冒泡，直到遇到第一个<code>try</code>语句时被捕获住。</p><p>但由于异步函数会打断代码执行路径，异步函数执行过程中以及执行之后产生的异常冒泡到执行路径被打断的位置时，如果一直没有遇到<code>try</code>语句，就作为一个全局异常抛出。以下是一个例子。</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">async</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">fn</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">callback</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Code execution path breaks here.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">setTimeout</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> ()　{</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    }, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">async</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// Do something.</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (err) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Error: %s&#39;</span><span style="color:#E1E4E8;">, err.message);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">--</span><span style="color:#E1E4E8;"> Console </span><span style="color:#F97583;">------------------------------</span></span>
<span class="line"><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">home</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">user</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">test.js:</span><span style="color:#79B8FF;">4</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">                 </span><span style="color:#F97583;">^</span></span>
<span class="line"><span style="color:#B392F0;">TypeError</span><span style="color:#E1E4E8;">: object is not a </span><span style="color:#F97583;">function</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">at</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">null</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">_onTimeout</span><span style="color:#E1E4E8;"> (/</span><span style="color:#FFAB70;">home</span><span style="color:#E1E4E8;">/</span><span style="color:#FFAB70;">user</span><span style="color:#E1E4E8;">/test.js</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">4</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">13</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">at</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Timer</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">listOnTimeout</span><span style="color:#E1E4E8;"> [</span><span style="color:#B392F0;">as</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ontimeout</span><span style="color:#E1E4E8;">] (timers.js</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">110</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">15</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">async</span><span style="color:#24292E;">(</span><span style="color:#E36209;">fn</span><span style="color:#24292E;">, </span><span style="color:#E36209;">callback</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Code execution path breaks here.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">setTimeout</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> ()　{</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">async</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">data</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// Do something.</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (err) {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Error: %s&#39;</span><span style="color:#24292E;">, err.message);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">--</span><span style="color:#24292E;"> Console </span><span style="color:#D73A49;">------------------------------</span></span>
<span class="line"><span style="color:#D73A49;">/</span><span style="color:#24292E;">home</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">user</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">test.js:</span><span style="color:#005CC5;">4</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">                 </span><span style="color:#D73A49;">^</span></span>
<span class="line"><span style="color:#6F42C1;">TypeError</span><span style="color:#24292E;">: object is not a </span><span style="color:#D73A49;">function</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">at</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">null</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">_onTimeout</span><span style="color:#24292E;"> (/</span><span style="color:#E36209;">home</span><span style="color:#24292E;">/</span><span style="color:#E36209;">user</span><span style="color:#24292E;">/test.js</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">4</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">13</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">at</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Timer</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">listOnTimeout</span><span style="color:#24292E;"> [</span><span style="color:#6F42C1;">as</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ontimeout</span><span style="color:#24292E;">] (timers.js</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">110</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">15</span><span style="color:#24292E;">)</span></span></code></pre></div><p>💡因为代码执行路径被打断了，需要在异常冒泡到断点之前用<code>try</code>语句把异常捕获住，并通过回调函数传递被捕获的异常。于是可以像下边这样改造上边的例子。</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">async</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">fn</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">callback</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Code execution path breaks here.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">setTimeout</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> ()　{</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (err) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(err);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">async</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (err) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Error: %s&#39;</span><span style="color:#E1E4E8;">, err.message);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// Do something.</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">--</span><span style="color:#E1E4E8;"> Console </span><span style="color:#F97583;">------------------------------</span></span>
<span class="line"><span style="color:#B392F0;">Error</span><span style="color:#E1E4E8;">: object is not a </span><span style="color:#F97583;">function</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">async</span><span style="color:#24292E;">(</span><span style="color:#E36209;">fn</span><span style="color:#24292E;">, </span><span style="color:#E36209;">callback</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Code execution path breaks here.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">setTimeout</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> ()　{</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (err) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">(err);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">async</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">err</span><span style="color:#24292E;">, </span><span style="color:#E36209;">data</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (err) {</span></span>
<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Error: %s&#39;</span><span style="color:#24292E;">, err.message);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// Do something.</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">--</span><span style="color:#24292E;"> Console </span><span style="color:#D73A49;">------------------------------</span></span>
<span class="line"><span style="color:#6F42C1;">Error</span><span style="color:#24292E;">: object is not a </span><span style="color:#D73A49;">function</span></span></code></pre></div><p>有了异常处理方式后，接着可以想一想一般我们是怎么写代码的。基本上代码都是做一些事情，然后调用一个函数，然后再做一些事情，然后再调用一个函数，如此循环。如果我们写的是同步代码，只需要在代码入口点写一个<code>try</code>语句就能捕获所有冒泡上来的异常，示例如下。</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Do something.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">syncA</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Do something.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">syncB</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Do something.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">syncC</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (err) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Deal with exception.</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Do something.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">syncA</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Do something.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">syncB</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Do something.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">syncC</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (err) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Deal with exception.</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>但是，如果写的是异步代码，由于每次异步函数调用都会打断代码执行路径，只能通过回调函数来传递异常，于是需要在每个回调函数里判断是否有异常发生，于是只用三次异步函数调用，就会产生下边这种代码（回调地域）。</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">callback</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Do something.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">asyncA</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (err) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(err);</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// Do something</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">asyncB</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (err) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(err);</span></span>
<span class="line"><span style="color:#E1E4E8;">                } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#6A737D;">// Do something</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#B392F0;">asyncC</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (err) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                            </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(err);</span></span>
<span class="line"><span style="color:#E1E4E8;">                        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                            </span><span style="color:#6A737D;">// Do something</span></span>
<span class="line"><span style="color:#E1E4E8;">                            </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">                        }</span></span>
<span class="line"><span style="color:#E1E4E8;">                    });</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            });</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (err) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// Deal with exception.</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#E36209;">callback</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Do something.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">asyncA</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">err</span><span style="color:#24292E;">, </span><span style="color:#E36209;">data</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (err) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">(err);</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// Do something</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">asyncB</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">err</span><span style="color:#24292E;">, </span><span style="color:#E36209;">data</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (err) {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">(err);</span></span>
<span class="line"><span style="color:#24292E;">                } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">// Do something</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6F42C1;">asyncC</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">err</span><span style="color:#24292E;">, </span><span style="color:#E36209;">data</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (err) {</span></span>
<span class="line"><span style="color:#24292E;">                            </span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">(err);</span></span>
<span class="line"><span style="color:#24292E;">                        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                            </span><span style="color:#6A737D;">// Do something</span></span>
<span class="line"><span style="color:#24292E;">                            </span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                        }</span></span>
<span class="line"><span style="color:#24292E;">                    });</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            });</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">err</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (err) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// Deal with exception.</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>可以看到，回调函数已经让代码变得复杂了，而异步方式下对异常的处理更加剧了代码的复杂度。如果NodeJS的最大卖点最后变成这个样子，那就没人愿意用NodeJS了，因此接下来会介绍NodeJS提供的一些解决方案。</p>`,357),u=[h];function C(g,B,b,v,f,A){return n(),a("div",null,u)}const k=s(F,[["render",C]]);export{D as __pageData,k as default};
