import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.a7175731.js";const p="/assets/image-20231211172524486.91b02d6d.png",o="/assets/image-20231211204329769.512938ba.png",b=JSON.parse('{"title":"NodeJS简介  --笔记","description":"","frontmatter":{},"headers":[],"relativePath":"后端/Node/NodeJS简介.md","filePath":"后端/Node/NodeJS简介.md","lastUpdated":null}'),e={name:"后端/Node/NodeJS简介.md"},t=l('<h1 id="nodejs简介-笔记" tabindex="-1">NodeJS简介 --笔记 <a class="header-anchor" href="#nodejs简介-笔记" aria-label="Permalink to &quot;NodeJS简介  --笔记&quot;">​</a></h1><blockquote><p>Node.js 建立在 Google Chrome V8 JavaScript 引擎之上，主要用于创建网络服务器 - 但不仅限于此。</p></blockquote><h2 id="一、为什么使用nodejs" tabindex="-1">一、为什么使用NodeJS <a class="header-anchor" href="#一、为什么使用nodejs" aria-label="Permalink to &quot;一、为什么使用NodeJS&quot;">​</a></h2><ol><li>Node.js 是一个开源和跨平台的 JavaScript 运行时环境。 它是几乎任何类型项目的流行工具！</li><li>Node.js 在浏览器之外运行 V8 JavaScript 引擎（Google Chrome 的内核）。 这使得 Node.js 非常高效。</li><li>Node.js 应用在<code>单个进程中</code>运行，<code>无需为每个请求创建新线程</code>。 Node.js 在其标准库中提供了一组<code>异步 I/O 原语，以防止 JavaScript 代码阻塞</code>，并且通常，Node.js 中的库是使用非阻塞范例编写的，这使得阻塞行为成为异常而不是常态。 <ul><li>单个进程 <ul><li>与传统的多线程服务器模型不同，Node.js 应用程序在单个进程中执行。</li></ul></li><li>无需创建新线程 <ul><li>Node.js 使用事件循环和回调函数的方式，不需要为每个请求创建新的线程，这使得处理高并发请求更加高效。</li></ul></li><li>异步I/O 原语 <ul><li>提供了一组异步 I/O（输入/输出）原语，这意味着它允许执行诸如文件读写、网络请求等 I/O 操作时，能够在后台进行而不会阻塞代码的执行。这种方式使得即使在执行耗时的操作时，其他代码也能够继续执行，提高了程序的性能和响应能力。</li></ul></li></ul></li><li>Node.js 执行 I/O 操作时，如从网络读取、访问数据库或文件系统，Node.js 不会阻塞线程和浪费 CPU 周期等待，而是会在响应返回时恢复操作。这使得 Node.js 可以使用单个服务器处理数千个并发连接，而不会引入管理线程并发的负担（这可能是错误的重要来源）。</li><li>Node.js 具有独特的优势，因为数百万为浏览器编写 JavaScript 的前端开发者现在除了客户端代码之外，还能够编写服务器端代码，而无需学习完全不同的语言。</li><li>在 Node.js 中，<code>可以毫无问题地使用新的 ECMAScript 标准，因为你不必等待所有用户更新他们的浏览器</code> - 你负责通过<code>更改 Node.js 版本来决定使用哪个 ECMAScript 版本</code>， 你还可以通过运行<code>带有标志的 Node.js </code>来启用特定的实验性特性。 <ul><li>独立于用户浏览器更新：当想要使用新的 JavaScript 特性时，需要考虑用户的浏览器是否支持这些特性。然而，在 Node.js 中，不必等待所有用户更新他们的浏览器，因为 Node.js 运行在服务器端，与用户浏览器的 JavaScript 版本无关。</li><li>控制ECMAScript版本：在 Node.js 中，可以通过更改 Node.js 的版本来决定使用哪个 ECMAScript 版本。Node.js 通常会在新的稳定版本中包含对最新 ECMAScript 特性的支持。</li><li><strong>启用实验性特性</strong>：Node.js 也允许通过运行带有特定标志的 Node.js 版本来启用实验性特性。这意味着可以在开发环境中尝试并探索即将推出或正在开发中的 JavaScript 特性，即使它们还没有正式成为标准的一部分。</li></ul></li></ol><h2 id="二、安装nodejs-nvm" tabindex="-1">二、安装NodeJS &amp; nvm <a class="header-anchor" href="#二、安装nodejs-nvm" aria-label="Permalink to &quot;二、安装NodeJS &amp; nvm&quot;">​</a></h2><p><a href="https://nodejs.cn/download/" target="_blank" rel="noreferrer">https://nodejs.cn/download/</a> 安装连接，根据自己的操作系统选择需要的版本即可，一般选择长期支持板</p><p>💡 额外安装nvm：<a href="https://github.com/coreybutler/nvm-windows/releases" target="_blank" rel="noreferrer">Releases · coreybutler/nvm-windows</a></p><p><img src="'+p+`" alt="image-20231211172524486"></p><p>nvm常见命令如下</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">nvm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ls</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">：列出所有已安装的</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">node</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">版本</span></span>
<span class="line"><span style="color:#B392F0;">nvm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ls-remote</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">：列出所有远程服务器的版本（官方node</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">version</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">list）</span></span>
<span class="line"><span style="color:#B392F0;">nvm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">list</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">：列出所有已安装的</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">node</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">版本</span></span>
<span class="line"><span style="color:#B392F0;">nvm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">list</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">available</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">：显示所有可下载的版本</span></span>
<span class="line"><span style="color:#B392F0;">nvm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">stable</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">：安装最新版</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">node</span></span>
<span class="line"><span style="color:#B392F0;">nvm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> [node版本号] ：安装指定版本 node</span></span>
<span class="line"><span style="color:#B392F0;">nvm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">uninstall</span><span style="color:#E1E4E8;"> [node版本号] ：删除已安装的指定版本</span></span>
<span class="line"><span style="color:#B392F0;">nvm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">use</span><span style="color:#E1E4E8;"> [node版本号] ：切换到指定版本 node</span></span>
<span class="line"><span style="color:#B392F0;">nvm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">current</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">：当前</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">node</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">版本</span></span>
<span class="line"><span style="color:#B392F0;">nvm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">alias</span><span style="color:#E1E4E8;"> [别名] [node版本号] ：给不同的版本号添加别名</span></span>
<span class="line"><span style="color:#B392F0;">nvm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">unalias</span><span style="color:#E1E4E8;"> [别名] ：删除已定义的别名</span></span>
<span class="line"><span style="color:#B392F0;">nvm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">alias</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">default</span><span style="color:#E1E4E8;"> [node版本号] ：设置默认版本</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">nvm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ls</span><span style="color:#24292E;"> </span><span style="color:#032F62;">：列出所有已安装的</span><span style="color:#24292E;"> </span><span style="color:#032F62;">node</span><span style="color:#24292E;"> </span><span style="color:#032F62;">版本</span></span>
<span class="line"><span style="color:#6F42C1;">nvm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ls-remote</span><span style="color:#24292E;"> </span><span style="color:#032F62;">：列出所有远程服务器的版本（官方node</span><span style="color:#24292E;"> </span><span style="color:#032F62;">version</span><span style="color:#24292E;"> </span><span style="color:#032F62;">list）</span></span>
<span class="line"><span style="color:#6F42C1;">nvm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">list</span><span style="color:#24292E;"> </span><span style="color:#032F62;">：列出所有已安装的</span><span style="color:#24292E;"> </span><span style="color:#032F62;">node</span><span style="color:#24292E;"> </span><span style="color:#032F62;">版本</span></span>
<span class="line"><span style="color:#6F42C1;">nvm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">list</span><span style="color:#24292E;"> </span><span style="color:#032F62;">available</span><span style="color:#24292E;"> </span><span style="color:#032F62;">：显示所有可下载的版本</span></span>
<span class="line"><span style="color:#6F42C1;">nvm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">stable</span><span style="color:#24292E;"> </span><span style="color:#032F62;">：安装最新版</span><span style="color:#24292E;"> </span><span style="color:#032F62;">node</span></span>
<span class="line"><span style="color:#6F42C1;">nvm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> [node版本号] ：安装指定版本 node</span></span>
<span class="line"><span style="color:#6F42C1;">nvm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">uninstall</span><span style="color:#24292E;"> [node版本号] ：删除已安装的指定版本</span></span>
<span class="line"><span style="color:#6F42C1;">nvm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">use</span><span style="color:#24292E;"> [node版本号] ：切换到指定版本 node</span></span>
<span class="line"><span style="color:#6F42C1;">nvm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">current</span><span style="color:#24292E;"> </span><span style="color:#032F62;">：当前</span><span style="color:#24292E;"> </span><span style="color:#032F62;">node</span><span style="color:#24292E;"> </span><span style="color:#032F62;">版本</span></span>
<span class="line"><span style="color:#6F42C1;">nvm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">alias</span><span style="color:#24292E;"> [别名] [node版本号] ：给不同的版本号添加别名</span></span>
<span class="line"><span style="color:#6F42C1;">nvm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">unalias</span><span style="color:#24292E;"> [别名] ：删除已定义的别名</span></span>
<span class="line"><span style="color:#6F42C1;">nvm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">alias</span><span style="color:#24292E;"> </span><span style="color:#032F62;">default</span><span style="color:#24292E;"> [node版本号] ：设置默认版本</span></span></code></pre></div><p><img src="`+o+`" alt="image-20231211204329769"></p><h2 id="三、nodejs前提知识" tabindex="-1">三、NodeJS前提知识 ⭐ <a class="header-anchor" href="#三、nodejs前提知识" aria-label="Permalink to &quot;三、NodeJS前提知识 :star:&quot;">​</a></h2><p>详见章节 <code>前端 - &gt; JS -&gt; 基础 和 进阶</code></p><h2 id="四、nodejs与浏览器之间的区别" tabindex="-1">四、NodeJS与浏览器之间的区别 <a class="header-anchor" href="#四、nodejs与浏览器之间的区别" aria-label="Permalink to &quot;四、NodeJS与浏览器之间的区别&quot;">​</a></h2><ul><li>在浏览器中，大部分时间你所做的是与 DOM 或其他 Web 平台 API（如 Cookie）进行交互。 当然，那些在 Node.js 中不存在。 你没有浏览器提供的 <code>document</code>、<code>window</code> 和所有其他对象。</li><li>有时在网络上你只能使用较旧的 JavaScript / ECMAScript 版本。 在将代码交付到浏览器之前，你可以使用 <code>Babel</code> 将代码转换为 ES5 兼容，但在 Node.js 中，你不需要这样做。</li><li>另一个区别是 Node.js 同时支持 CommonJS 和 ES 模块系统（自 Node.js v12 起），而在浏览器中我们开始看到正在实现的 ES 模块标准。实际上，这意味着你可以在 Node.js 中同时使用 <code>require()</code> 和 <code>import</code>，而在浏览器中只能使用 <code>import</code>。</li></ul><h2 id="五、v8-引擎" tabindex="-1">五、V8 引擎 <a class="header-anchor" href="#五、v8-引擎" aria-label="Permalink to &quot;五、V8 引擎&quot;">​</a></h2><h3 id="_5-1-概述" tabindex="-1">5.1 概述 <a class="header-anchor" href="#_5-1-概述" aria-label="Permalink to &quot;5.1 概述&quot;">​</a></h3><ul><li>V8 是为 Google Chrome 提供支持的 JavaScript 引擎的名称。 即它解析和执行 JavaScript 代码。</li><li>很酷的是 JavaScript 引擎独立于托管它的浏览器。 这个关键特性促成了 Node.js 的兴起。 早在 2009 年，V8 就被选为支持 Node.js 的引擎，随着 Node.js 的爆炸式增长，V8 成为现在支持大量用 JavaScript 编写的服务器端代码的引擎。</li><li>V8 是用 C++ 编写的，V8 一直在发展，就像周围的其他 JavaScript 引擎一样，以加速 Web 和 Node.js 生态系统。</li></ul><h2 id="六、npm包管理器" tabindex="-1">六、NPM包管理器 <a class="header-anchor" href="#六、npm包管理器" aria-label="Permalink to &quot;六、NPM包管理器&quot;">​</a></h2><h3 id="_6-1-npm简介" tabindex="-1">6.1 npm简介 <a class="header-anchor" href="#_6-1-npm简介" aria-label="Permalink to &quot;6.1 npm简介&quot;">​</a></h3><p>据报道，在 2022 年 9 月，npm 注册表中列出了超过 210 万个软件包，使其成为地球上最大的单一语言代码存储库，而且你可以确定（几乎）所有一切都有软件包。</p><p>它最初是作为一种下载和管理 Node.js 包依赖的方式，但后来成为前端 JavaScript 中也使用的工具。</p><h3 id="_6-2-包" tabindex="-1">6.2 包 <a class="header-anchor" href="#_6-2-包" aria-label="Permalink to &quot;6.2 包&quot;">​</a></h3><p><code>npm</code> 管理项目依赖的下载。</p><h4 id="_6-1-1-安装所有依赖" tabindex="-1">6.1.1 安装所有依赖 <a class="header-anchor" href="#_6-1-1-安装所有依赖" aria-label="Permalink to &quot;6.1.1 安装所有依赖&quot;">​</a></h4><p>如果一个项目有一个 <code>package.json</code> 文件，通过运行</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span></span></code></pre></div><p>它将在 <code>node_modules</code> 文件夹中安装项目所需的所有内容，如果它不存在则创建它。</p><h4 id="_6-1-2-安装单个包" tabindex="-1">6.1.2 安装单个包 <a class="header-anchor" href="#_6-1-2-安装单个包" aria-label="Permalink to &quot;6.1.2 安装单个包&quot;">​</a></h4><p>可以安装特定的包，通过运行</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#9ECBFF;">package-nam</span><span style="color:#E1E4E8;">e</span><span style="color:#F97583;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">package-nam</span><span style="color:#24292E;">e</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><p>💡 此外，从 npm 5 开始，此命令将 <code>&lt;package-name&gt;</code> 添加到 <code>package.json</code> 文件依赖。 在版本 5 之前，你需要添加标志 <code>--save</code>。</p><p>通常可以看到更多的标志被添加到这个命令中：</p><ul><li><code>--save-dev</code> 安装并添加条目到 <code>package.json</code> 文件开发依赖</li><li><code>--no-save</code> 安装但不添加条目到 <code>package.json</code> 文件依赖</li><li><code>--save-optional</code> 安装并添加条目到 <code>package.json</code> 文件可选依赖</li><li><code>--no-optional</code> 将阻止安装可选依赖</li></ul><p>也可以使用标志的简写形式：</p><ul><li>-S：<code>--save</code></li><li>-D：<code>--save-dev</code></li><li>-O：<code>--save-optional</code></li></ul><p>📖 补充： <code>-o</code> 或 <code>--optional</code> 用于安装可选依赖。可选依赖项是指在某些情况下，可能需要但不是必需的依赖。如果这些依赖项在安装失败时不会影响主要功能，可以将它们标记为可选依赖。</p><h4 id="_6-1-3-更新包" tabindex="-1">6.1.3 更新包 <a class="header-anchor" href="#_6-1-3-更新包" aria-label="Permalink to &quot;6.1.3 更新包&quot;">​</a></h4><p><code>npm</code> 将检查所有包是否有满足你的版本控制约束的更新版本。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">update</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">update</span></span></code></pre></div><p>也可以指定要更新的单个包：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">update</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#9ECBFF;">package-nam</span><span style="color:#E1E4E8;">e</span><span style="color:#F97583;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">update</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">package-nam</span><span style="color:#24292E;">e</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><h3 id="_6-3-版本控制" tabindex="-1">6.3 版本控制 <a class="header-anchor" href="#_6-3-版本控制" aria-label="Permalink to &quot;6.3 版本控制&quot;">​</a></h3><p>可以安装特定版本的软件包，通过运行</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#9ECBFF;">package-nam</span><span style="color:#E1E4E8;">e</span><span style="color:#F97583;">&gt;</span><span style="color:#9ECBFF;">@</span><span style="color:#F97583;">&lt;</span><span style="color:#9ECBFF;">versio</span><span style="color:#E1E4E8;">n</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#9ECBFF;">package-nam</span><span style="color:#E1E4E8;">e</span><span style="color:#F97583;">&gt;</span><span style="color:#9ECBFF;">@latest</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">package-nam</span><span style="color:#24292E;">e</span><span style="color:#D73A49;">&gt;</span><span style="color:#032F62;">@</span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">versio</span><span style="color:#24292E;">n</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">package-nam</span><span style="color:#24292E;">e</span><span style="color:#D73A49;">&gt;</span><span style="color:#032F62;">@latest</span></span></code></pre></div><h3 id="_6-4-运行任务" tabindex="-1">6.4 运行任务 <a class="header-anchor" href="#_6-4-运行任务" aria-label="Permalink to &quot;6.4 运行任务&quot;">​</a></h3><p>package.json 文件支持指定命令行任务的格式，可以使用</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#9ECBFF;">task-nam</span><span style="color:#E1E4E8;">e</span><span style="color:#F97583;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">task-nam</span><span style="color:#24292E;">e</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><p>例如：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;scripts&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;start-dev&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;node lib/server-development&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;start&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;node lib/server-production&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;scripts&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;start-dev&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;node lib/server-development&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;start&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;node lib/server-production&quot;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="七、支持ecmascript-2015-es6-及以上" tabindex="-1">七、支持ECMAScript 2015 (ES6)及以上 <a class="header-anchor" href="#七、支持ecmascript-2015-es6-及以上" aria-label="Permalink to &quot;七、支持ECMAScript 2015 (ES6)及以上&quot;">​</a></h2><blockquote><p>所有 ECMAScript 2015 (ES6) 特性都分为三组，分别为<strong>shipping</strong>, <strong>staged</strong>, and <strong>in progress</strong></p></blockquote><ul><li>shipping：已发布，可放心使用</li><li>staged：处于 TC39（ECMAScript 标准化组织）的预备阶段，测试中，使用<code>--harmony</code>标识</li><li>progress：萌芽阶段，不推荐使用</li></ul><h2 id="八、开发和生产的区别" tabindex="-1">八、开发和生产的区别 <a class="header-anchor" href="#八、开发和生产的区别" aria-label="Permalink to &quot;八、开发和生产的区别&quot;">​</a></h2><h3 id="_8-1-概述" tabindex="-1">8.1 概述 <a class="header-anchor" href="#_8-1-概述" aria-label="Permalink to &quot;8.1 概述&quot;">​</a></h3><ul><li><p>生产环境 和 开发环境可有不同的配置</p></li><li><p>可通过将环境变量添加到应用初始化命令中来应用环境变量，但最好将它放在你的 shell 配置文件中（例如 Bash shell 的 <code>.bash_profile</code>），否则设置在系统重启时不会保留。</p></li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">NODE_ENV</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">production</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">node</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">app.js</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">NODE_ENV</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">production</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">node</span><span style="color:#24292E;"> </span><span style="color:#032F62;">app.js</span></span></code></pre></div><blockquote><p>💡 例如，如果 <code>NODE_ENV</code> 未设置为 <code>production</code>，则 <a href="https://express.nodejs.cn/" target="_blank" rel="noreferrer">Express</a> 使用的模板库 <a href="https://pug.nodejs.cn/" target="_blank" rel="noreferrer">Pug</a> 将在调试模式下编译。 Express 视图在开发模式下的每个请求中编译，而在生产中它们被缓存。 还有更多的例子。</p><ul><li>当 <code>NODE_ENV</code> 设置为 <code>production</code> 时，代表应用正在生产环境中运行；而未设置或设置为其他值（如 <code>development</code>）则代表应用运行在开发模式下。 <ul><li>在开发模式下，Express 每次接收到请求时都会编译 Pug 模板，这样在开发阶段可以动态修改模板而不需要重启服务器。</li><li>相反，在生产环境中，这些视图（模板）将被缓存，以提高性能。这意味着模板编译只会发生一次，并在后续请求中重用，从而减少了服务器负载和提高了响应速度。</li></ul></li></ul></blockquote><h3 id="_8-2-使用" tabindex="-1">8.2 使用 <a class="header-anchor" href="#_8-2-使用" aria-label="Permalink to &quot;8.2 使用&quot;">​</a></h3><p>可以使用条件语句在不同环境中执行代码：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (p<wbr>rocess.env.</span><span style="color:#79B8FF;">NODE_ENV</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;development&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (p<wbr>rocess.env.</span><span style="color:#79B8FF;">NODE_ENV</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;production&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ([</span><span style="color:#9ECBFF;">&#39;production&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;staging&#39;</span><span style="color:#E1E4E8;">].</span><span style="color:#B392F0;">includes</span><span style="color:#E1E4E8;">(p<wbr>rocess.env.</span><span style="color:#79B8FF;">NODE_ENV</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (p<wbr>rocess.env.</span><span style="color:#005CC5;">NODE_ENV</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;development&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (p<wbr>rocess.env.</span><span style="color:#005CC5;">NODE_ENV</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;production&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ([</span><span style="color:#032F62;">&#39;production&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;staging&#39;</span><span style="color:#24292E;">].</span><span style="color:#6F42C1;">includes</span><span style="color:#24292E;">(p<wbr>rocess.env.</span><span style="color:#005CC5;">NODE_ENV</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 Express 应用中，可以使用它为每个环境设置不同的错误处理程序：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (p<wbr>rocess.env.</span><span style="color:#79B8FF;">NODE_ENV</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;development&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  app.</span><span style="color:#B392F0;">use</span><span style="color:#E1E4E8;">(express.</span><span style="color:#B392F0;">errorHandler</span><span style="color:#E1E4E8;">({ dumpExceptions: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, showStack: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> }));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (p<wbr>rocess.env.</span><span style="color:#79B8FF;">NODE_ENV</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;production&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  app.</span><span style="color:#B392F0;">use</span><span style="color:#E1E4E8;">(express.</span><span style="color:#B392F0;">errorHandler</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (p<wbr>rocess.env.</span><span style="color:#005CC5;">NODE_ENV</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;development&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  app.</span><span style="color:#6F42C1;">use</span><span style="color:#24292E;">(express.</span><span style="color:#6F42C1;">errorHandler</span><span style="color:#24292E;">({ dumpExceptions: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, showStack: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> }));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (p<wbr>rocess.env.</span><span style="color:#005CC5;">NODE_ENV</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;production&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  app.</span><span style="color:#6F42C1;">use</span><span style="color:#24292E;">(express.</span><span style="color:#6F42C1;">errorHandler</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="九、使用typescript的nodejs" tabindex="-1">九、使用TypeScript的NodeJS <a class="header-anchor" href="#九、使用typescript的nodejs" aria-label="Permalink to &quot;九、使用TypeScript的NodeJS&quot;">​</a></h2><h3 id="_9-1-案例" tabindex="-1">9.1 案例 <a class="header-anchor" href="#_9-1-案例" aria-label="Permalink to &quot;9.1 案例&quot;">​</a></h3><p>💡 增加了类型校验</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">User</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">name</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">age</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isAdult</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">user</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">User</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">boolean</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> user.age </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">18</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">justine</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">User</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  name: </span><span style="color:#9ECBFF;">&#39;Justine&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  age: </span><span style="color:#79B8FF;">23</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">isJustineAnAdult</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isAdult</span><span style="color:#E1E4E8;">(justine);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">User</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">age</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isAdult</span><span style="color:#24292E;">(</span><span style="color:#E36209;">user</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">User</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">boolean</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> user.age </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">18</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">justine</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">User</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  name: </span><span style="color:#032F62;">&#39;Justine&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  age: </span><span style="color:#005CC5;">23</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">isJustineAnAdult</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">boolean</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isAdult</span><span style="color:#24292E;">(justine);</span></span></code></pre></div><h3 id="_9-2-使用" tabindex="-1">9.2 使用 <a class="header-anchor" href="#_9-2-使用" aria-label="Permalink to &quot;9.2 使用&quot;">​</a></h3><p>首先安装typeScript</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">i</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-D</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">typescript</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">i</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-D</span><span style="color:#24292E;"> </span><span style="color:#032F62;">typescript</span></span></code></pre></div><p>在终端中使用tsc命令变异javaScript，假如文件名为example.ts，如下命令：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npx</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">tsc</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">example.ts</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npx</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tsc</span><span style="color:#24292E;"> </span><span style="color:#032F62;">example.ts</span></span></code></pre></div><blockquote><ul><li>npx是Node Package Execute 的缩写，可运行 TypeScript 的编译器而无需全局安装它</li><li>TypeScript 编译器，将获取我们的 TypeScript 代码并将其编译为 JavaScript</li></ul></blockquote><p>💡 补充支持typeScript的开源项目</p><ul><li><a href="https://nest.nodejs.cn/" target="_blank" rel="noreferrer">NestJS</a> - 强大且功能齐全的框架，使创建可扩展且架构良好的系统变得轻松愉快</li><li><a href="https://typeorm.nodejs.cn/#/" target="_blank" rel="noreferrer">TypeORM</a> - 很棒的 ORM 受到来自其他语言（如 Hibernate、Doctrine 或 Entity Framework）的其他知名工具的影响</li><li><a href="https://prisma.nodejs.cn/" target="_blank" rel="noreferrer">Prisma</a> - 具有声明性数据模型、生成的迁移和完全类型安全的数据库查询的下一代 ORM</li><li><a href="https://rx.nodejs.cn/" target="_blank" rel="noreferrer">RxJS</a> - 广泛用于响应式编程的库</li><li><a href="https://adonisjs.com/" target="_blank" rel="noreferrer">AdonisJS</a> - 使用 Node.js 的功能齐全的 Web 框架</li><li><a href="https://foalts.org/" target="_blank" rel="noreferrer">FoalTs</a> - 优雅的 Nodejs 框架</li></ul><h2 id="十、使用webassembly" tabindex="-1">十、使用WebAssembly <a class="header-anchor" href="#十、使用webassembly" aria-label="Permalink to &quot;十、使用WebAssembly&quot;">​</a></h2><h3 id="_10-1-概念" tabindex="-1">10.1 概念 <a class="header-anchor" href="#_10-1-概念" aria-label="Permalink to &quot;10.1 概念&quot;">​</a></h3><p>一个高性能的类汇编语言。</p><ul><li>模块 - 已编译的 WebAssembly 二进制文件，即 <code>.wasm</code> 文件。</li><li>内存 - 可调整大小的 ArrayBuffer。</li><li>表 - 不存储在内存中的可调整大小的类型化引用数组。</li><li>实例 - 模块及其内存、表和变量的实例化。</li></ul><h3 id="_10-2-生成webassembly模块" tabindex="-1">10.2 生成WebAssembly模块 <a class="header-anchor" href="#_10-2-生成webassembly模块" aria-label="Permalink to &quot;10.2 生成WebAssembly模块&quot;">​</a></h3><p>为了使用 WebAssembly，需要一个 <code>.wasm</code> 二进制文件和一组 API 来与 WebAssembly 通信。</p><p>生成方式有：</p><ul><li>手写 WebAssembly（<code>.wat</code>）并使用 <a href="https://github.com/webassembly/wabt" target="_blank" rel="noreferrer">wabt</a> 等工具转为二进制格式</li><li>将 <a href="https://emscripten.org/" target="_blank" rel="noreferrer">emscripten</a> 与 C/C++ 应用一起使用</li><li>将 <a href="https://rustwasm.github.io/wasm-pack/book/" target="_blank" rel="noreferrer">wasm-pack</a> 与 Rust 应用一起使用</li><li>如果你更喜欢类似 TypeScript 的体验，请使用 <a href="https://assemblyscript.nodejs.cn/" target="_blank" rel="noreferrer">AssemblyScript</a></li></ul><h3 id="_10-3-使用方式" tabindex="-1">10.3 使用方式 <a class="header-anchor" href="#_10-3-使用方式" aria-label="Permalink to &quot;10.3 使用方式&quot;">​</a></h3><p>一旦有了一个 WebAssembly 模块，你就可以使用 Node.js <code>WebAssembly</code> 对象来实例化它。</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// Assume add.wasm file exists that contains a single function adding 2 provided arguments</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">fs</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;fs&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">wasmBuffer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fs.</span><span style="color:#B392F0;">readFileSync</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/path/to/add.wasm&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">WebAssembly.</span><span style="color:#B392F0;">instantiate</span><span style="color:#E1E4E8;">(wasmBuffer).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">wasmModule</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// Exported function live under instance.exports</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">add</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> wasmModule.instance.exports;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">sum</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(sum); </span><span style="color:#6A737D;">// Outputs: 11</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Assume add.wasm file exists that contains a single function adding 2 provided arguments</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">fs</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;fs&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">wasmBuffer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fs.</span><span style="color:#6F42C1;">readFileSync</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/path/to/add.wasm&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">WebAssembly.</span><span style="color:#6F42C1;">instantiate</span><span style="color:#24292E;">(wasmBuffer).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(</span><span style="color:#E36209;">wasmModule</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Exported function live under instance.exports</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">add</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> wasmModule.instance.exports;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">sum</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(sum); </span><span style="color:#6A737D;">// Outputs: 11</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div>`,86),c=[t];function r(E,y,i,d,F,h){return a(),n("div",null,c)}const m=s(e,[["render",r]]);export{b as __pageData,m as default};
