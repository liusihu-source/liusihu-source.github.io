import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.a7175731.js";const o="/assets/image-20231211172524486.91b02d6d.png",e="/assets/image-20231211204329769.512938ba.png",u=JSON.parse('{"title":"NodeJS简介  --笔记","description":"","frontmatter":{},"headers":[],"relativePath":"后端/Node/NodeJS简介.md","filePath":"后端/Node/NodeJS简介.md","lastUpdated":null}'),p={name:"后端/Node/NodeJS简介.md"},t=l('<h1 id="nodejs简介-笔记" tabindex="-1">NodeJS简介 --笔记 <a class="header-anchor" href="#nodejs简介-笔记" aria-label="Permalink to &quot;NodeJS简介  --笔记&quot;">​</a></h1><blockquote><p>Node.js 建立在 Google Chrome V8 JavaScript 引擎之上，主要用于创建网络服务器 - 但不仅限于此。</p></blockquote><h2 id="一、为什么使用nodejs" tabindex="-1">一、为什么使用NodeJS <a class="header-anchor" href="#一、为什么使用nodejs" aria-label="Permalink to &quot;一、为什么使用NodeJS&quot;">​</a></h2><ol><li>Node.js 是一个开源和跨平台的 JavaScript 运行时环境。 它是几乎任何类型项目的流行工具！</li><li>Node.js 在浏览器之外运行 V8 JavaScript 引擎（Google Chrome 的内核）。 这使得 Node.js 非常高效。</li><li>Node.js 应用在<code>单个进程中</code>运行，<code>无需为每个请求创建新线程</code>。 Node.js 在其标准库中提供了一组<code>异步 I/O 原语，以防止 JavaScript 代码阻塞</code>，并且通常，Node.js 中的库是使用非阻塞范例编写的，这使得阻塞行为成为异常而不是常态。 <ul><li>单个进程 <ul><li>与传统的多线程服务器模型不同，Node.js 应用程序在单个进程中执行。</li></ul></li><li>无需创建新线程 <ul><li>Node.js 使用事件循环和回调函数的方式，不需要为每个请求创建新的线程，这使得处理高并发请求更加高效。</li></ul></li><li>异步I/O 原语 <ul><li>提供了一组异步 I/O（输入/输出）原语，这意味着它允许执行诸如文件读写、网络请求等 I/O 操作时，能够在后台进行而不会阻塞代码的执行。这种方式使得即使在执行耗时的操作时，其他代码也能够继续执行，提高了程序的性能和响应能力。</li></ul></li></ul></li><li>Node.js 执行 I/O 操作时，如从网络读取、访问数据库或文件系统，Node.js 不会阻塞线程和浪费 CPU 周期等待，而是会在响应返回时恢复操作。这使得 Node.js 可以使用单个服务器处理数千个并发连接，而不会引入管理线程并发的负担（这可能是错误的重要来源）。</li><li>Node.js 具有独特的优势，因为数百万为浏览器编写 JavaScript 的前端开发者现在除了客户端代码之外，还能够编写服务器端代码，而无需学习完全不同的语言。</li><li>在 Node.js 中，<code>可以毫无问题地使用新的 ECMAScript 标准，因为你不必等待所有用户更新他们的浏览器</code> - 你负责通过<code>更改 Node.js 版本来决定使用哪个 ECMAScript 版本</code>， 你还可以通过运行<code>带有标志的 Node.js </code>来启用特定的实验性特性。 <ul><li>独立于用户浏览器更新：当想要使用新的 JavaScript 特性时，需要考虑用户的浏览器是否支持这些特性。然而，在 Node.js 中，不必等待所有用户更新他们的浏览器，因为 Node.js 运行在服务器端，与用户浏览器的 JavaScript 版本无关。</li><li>控制ECMAScript版本：在 Node.js 中，可以通过更改 Node.js 的版本来决定使用哪个 ECMAScript 版本。Node.js 通常会在新的稳定版本中包含对最新 ECMAScript 特性的支持。</li><li><strong>启用实验性特性</strong>：Node.js 也允许通过运行带有特定标志的 Node.js 版本来启用实验性特性。这意味着可以在开发环境中尝试并探索即将推出或正在开发中的 JavaScript 特性，即使它们还没有正式成为标准的一部分。</li></ul></li></ol><h2 id="二、安装nodejs-nvm" tabindex="-1">二、安装NodeJS &amp; nvm <a class="header-anchor" href="#二、安装nodejs-nvm" aria-label="Permalink to &quot;二、安装NodeJS &amp; nvm&quot;">​</a></h2><p><a href="https://nodejs.cn/download/" target="_blank" rel="noreferrer">https://nodejs.cn/download/</a> 安装连接，根据自己的操作系统选择需要的版本即可，一般选择长期支持板</p><p>💡 额外安装nvm：<a href="https://github.com/coreybutler/nvm-windows/releases" target="_blank" rel="noreferrer">Releases · coreybutler/nvm-windows</a></p><p><img src="'+o+`" alt="image-20231211172524486"></p><p>nvm常见命令如下</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">nvm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ls</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">：列出所有已安装的</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">node</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">版本</span></span>
<span class="line"><span style="color:#B392F0;">nvm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ls-remote</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">：列出所有远程服务器的版本（官方node</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">version</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">list）</span></span>
<span class="line"><span style="color:#B392F0;">nvm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">list</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">：列出所有已安装的</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">node</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">版本</span></span>
<span class="line"><span style="color:#B392F0;">nvm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">list</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">available</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">：显示所有可下载的版本</span></span>
<span class="line"><span style="color:#B392F0;">nvm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">stable</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">：安装最新版</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">node</span></span>
<span class="line"><span style="color:#B392F0;">nvm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> [node版本号] ：安装指定版本 node</span></span>
<span class="line"><span style="color:#B392F0;">nvm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">uninstall</span><span style="color:#E1E4E8;"> [node版本号] ：删除已安装的指定版本</span></span>
<span class="line"><span style="color:#B392F0;">nvm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">use</span><span style="color:#E1E4E8;"> [node版本号] ：切换到指定版本 node</span></span>
<span class="line"><span style="color:#B392F0;">nvm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">current</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">：当前</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">node</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">版本</span></span>
<span class="line"><span style="color:#B392F0;">nvm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">alias</span><span style="color:#E1E4E8;"> [别名] [node版本号] ：给不同的版本号添加别名</span></span>
<span class="line"><span style="color:#B392F0;">nvm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">unalias</span><span style="color:#E1E4E8;"> [别名] ：删除已定义的别名</span></span>
<span class="line"><span style="color:#B392F0;">nvm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">alias</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">default</span><span style="color:#E1E4E8;"> [node版本号] ：设置默认版本</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">nvm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ls</span><span style="color:#24292E;"> </span><span style="color:#032F62;">：列出所有已安装的</span><span style="color:#24292E;"> </span><span style="color:#032F62;">node</span><span style="color:#24292E;"> </span><span style="color:#032F62;">版本</span></span>
<span class="line"><span style="color:#6F42C1;">nvm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ls-remote</span><span style="color:#24292E;"> </span><span style="color:#032F62;">：列出所有远程服务器的版本（官方node</span><span style="color:#24292E;"> </span><span style="color:#032F62;">version</span><span style="color:#24292E;"> </span><span style="color:#032F62;">list）</span></span>
<span class="line"><span style="color:#6F42C1;">nvm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">list</span><span style="color:#24292E;"> </span><span style="color:#032F62;">：列出所有已安装的</span><span style="color:#24292E;"> </span><span style="color:#032F62;">node</span><span style="color:#24292E;"> </span><span style="color:#032F62;">版本</span></span>
<span class="line"><span style="color:#6F42C1;">nvm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">list</span><span style="color:#24292E;"> </span><span style="color:#032F62;">available</span><span style="color:#24292E;"> </span><span style="color:#032F62;">：显示所有可下载的版本</span></span>
<span class="line"><span style="color:#6F42C1;">nvm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">stable</span><span style="color:#24292E;"> </span><span style="color:#032F62;">：安装最新版</span><span style="color:#24292E;"> </span><span style="color:#032F62;">node</span></span>
<span class="line"><span style="color:#6F42C1;">nvm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> [node版本号] ：安装指定版本 node</span></span>
<span class="line"><span style="color:#6F42C1;">nvm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">uninstall</span><span style="color:#24292E;"> [node版本号] ：删除已安装的指定版本</span></span>
<span class="line"><span style="color:#6F42C1;">nvm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">use</span><span style="color:#24292E;"> [node版本号] ：切换到指定版本 node</span></span>
<span class="line"><span style="color:#6F42C1;">nvm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">current</span><span style="color:#24292E;"> </span><span style="color:#032F62;">：当前</span><span style="color:#24292E;"> </span><span style="color:#032F62;">node</span><span style="color:#24292E;"> </span><span style="color:#032F62;">版本</span></span>
<span class="line"><span style="color:#6F42C1;">nvm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">alias</span><span style="color:#24292E;"> [别名] [node版本号] ：给不同的版本号添加别名</span></span>
<span class="line"><span style="color:#6F42C1;">nvm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">unalias</span><span style="color:#24292E;"> [别名] ：删除已定义的别名</span></span>
<span class="line"><span style="color:#6F42C1;">nvm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">alias</span><span style="color:#24292E;"> </span><span style="color:#032F62;">default</span><span style="color:#24292E;"> [node版本号] ：设置默认版本</span></span></code></pre></div><p><img src="`+e+'" alt="image-20231211204329769"></p><h2 id="三、nodejs前提知识" tabindex="-1">三、NodeJS前提知识 <a class="header-anchor" href="#三、nodejs前提知识" aria-label="Permalink to &quot;三、NodeJS前提知识&quot;">​</a></h2><p>详见章节 <code>前端 - &gt; JS -&gt; 基础 和 进阶</code></p><h2 id="四、nodejs与浏览器之间的区别" tabindex="-1">四、NodeJS与浏览器之间的区别 <a class="header-anchor" href="#四、nodejs与浏览器之间的区别" aria-label="Permalink to &quot;四、NodeJS与浏览器之间的区别&quot;">​</a></h2><ul><li>在浏览器中，大部分时间你所做的是与 DOM 或其他 Web 平台 API（如 Cookie）进行交互。 当然，那些在 Node.js 中不存在。 你没有浏览器提供的 <code>document</code>、<code>window</code> 和所有其他对象。</li><li>有时在网络上你只能使用较旧的 JavaScript / ECMAScript 版本。 在将代码交付到浏览器之前，你可以使用 <code>Babel</code> 将代码转换为 ES5 兼容，但在 Node.js 中，你不需要这样做。</li><li>另一个区别是 Node.js 同时支持 CommonJS 和 ES 模块系统（自 Node.js v12 起），而在浏览器中我们开始看到正在实现的 ES 模块标准。实际上，这意味着你可以在 Node.js 中同时使用 <code>require()</code> 和 <code>import</code>，而在浏览器中只能使用 <code>import</code>。</li></ul><h2 id="五、v8-引擎" tabindex="-1">五、V8 引擎 <a class="header-anchor" href="#五、v8-引擎" aria-label="Permalink to &quot;五、V8 引擎&quot;">​</a></h2><h3 id="_5-1-概述" tabindex="-1">5.1 概述 <a class="header-anchor" href="#_5-1-概述" aria-label="Permalink to &quot;5.1 概述&quot;">​</a></h3><ul><li>V8 是为 Google Chrome 提供支持的 JavaScript 引擎的名称。 即它解析和执行 JavaScript 代码。</li><li>很酷的是 JavaScript 引擎独立于托管它的浏览器。 这个关键特性促成了 Node.js 的兴起。 早在 2009 年，V8 就被选为支持 Node.js 的引擎，随着 Node.js 的爆炸式增长，V8 成为现在支持大量用 JavaScript 编写的服务器端代码的引擎。</li><li>V8 是用 C++ 编写的，V8 一直在发展，就像周围的其他 JavaScript 引擎一样，以加速 Web 和 Node.js 生态系统。</li></ul><h2 id="六、npm包管理器" tabindex="-1">六、NPM包管理器 <a class="header-anchor" href="#六、npm包管理器" aria-label="Permalink to &quot;六、NPM包管理器&quot;">​</a></h2><h3 id="_6-1-npm简介" tabindex="-1">6.1 npm简介 <a class="header-anchor" href="#_6-1-npm简介" aria-label="Permalink to &quot;6.1 npm简介&quot;">​</a></h3><p>据报道，在 2022 年 9 月，npm 注册表中列出了超过 210 万个软件包，使其成为地球上最大的单一语言代码存储库，而且你可以确定（几乎）所有一切都有软件包。</p><p>它最初是作为一种下载和管理 Node.js 包依赖的方式，但后来成为前端 JavaScript 中也使用的工具。</p><h3 id="_6-1-包" tabindex="-1">6.1 包 <a class="header-anchor" href="#_6-1-包" aria-label="Permalink to &quot;6.1 包&quot;">​</a></h3><p><code>npm</code> 管理项目依赖的下载。</p><h4 id="_6-1-1-安装所有依赖" tabindex="-1">6.1.1 安装所有依赖 <a class="header-anchor" href="#_6-1-1-安装所有依赖" aria-label="Permalink to &quot;6.1.1 安装所有依赖&quot;">​</a></h4><p>如果一个项目有一个 <code>package.json</code> 文件，通过运行</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span></span></code></pre></div><p>它将在 <code>node_modules</code> 文件夹中安装项目所需的所有内容，如果它不存在则创建它。</p><h4 id="_6-1-2-安装单个包" tabindex="-1">6.1.2 安装单个包 <a class="header-anchor" href="#_6-1-2-安装单个包" aria-label="Permalink to &quot;6.1.2 安装单个包&quot;">​</a></h4><p>可以安装特定的包，通过运行</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#9ECBFF;">package-nam</span><span style="color:#E1E4E8;">e</span><span style="color:#F97583;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">package-nam</span><span style="color:#24292E;">e</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div>',31),c=[t];function r(i,d,E,y,F,h){return a(),n("div",null,c)}const v=s(p,[["render",r]]);export{u as __pageData,v as default};
