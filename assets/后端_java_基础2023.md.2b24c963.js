import{_ as a,o as s,c as l,Q as e}from"./chunks/framework.a7175731.js";const o="/assets/image-20221128200916617.9aabd464.png",n="/assets/image-20230226170229588.a6b045cb.png",p="/assets/image-20230305134003600.be621fdf.png",t="/assets/image-20230305134015567.f2ef733d.png",i="/assets/image-20230305135311600.cb50615a.png",r="/assets/image-20230305135350597.279e6d1a.png",q=JSON.parse('{"title":"2023Java基础 --笔记","description":"","frontmatter":{},"headers":[],"relativePath":"后端/java/基础2023.md","filePath":"后端/java/基础2023.md","lastUpdated":null}'),c={name:"后端/java/基础2023.md"},d=e('<h1 id="_2023java基础-笔记" tabindex="-1">2023Java基础 --笔记 <a class="header-anchor" href="#_2023java基础-笔记" aria-label="Permalink to &quot;2023Java基础 --笔记&quot;">​</a></h1><h2 id="一、概述" tabindex="-1">一、概述 <a class="header-anchor" href="#一、概述" aria-label="Permalink to &quot;一、概述&quot;">​</a></h2><p><strong>Java技术体系</strong></p><table><thead><tr><th>名称</th><th>介绍</th></tr></thead><tbody><tr><td>JavaSE （Java Standard Edition）标准版</td><td>支持面向桌面端应用的JAVA平台，旧版本叫做J2SE</td></tr><tr><td>JavaEE（Java Enterprise Edition）企业版</td><td>为开发企业环境下应用程序的一套及决方案，包含技术主要如Servlet、Jsp，主要针对Web应用程序开发，旧版本叫做J2EE</td></tr><tr><td>JavaME（Java Micro Editon）小型版</td><td>支持Java程序运行在移动终端上的平台，旧版本叫做J2ME</td></tr></tbody></table><blockquote><p>各类框架<code>Hadoop、Spark</code>等大数据开发平台也是Java编写成。</p></blockquote><blockquote><p>存储单位 1KB=1024B（byte）=1024 * 8bit</p></blockquote><blockquote><p>JDK = JRE + 开发工具；JRE = JVM + JAVA核心类库； 开发工具 = 编译工具javac.exe + 打包工具jar.exe</p><ul><li>JDK ：JAVA开发工具包</li><li>JRE： JAVA运行环境</li><li>JVM：JAVA虚拟机，通过JVM，实现同一个JAVA程序可在不同的操作系统执行</li></ul><p>使用JDK的开发工具完成JAVA程序，交给JRE运行</p></blockquote><p><img src="'+o+'" alt="image-20221128200916617"></p><h2 id="二、安装" tabindex="-1">二、安装 <a class="header-anchor" href="#二、安装" aria-label="Permalink to &quot;二、安装&quot;">​</a></h2><h3 id="_1-安装步骤" tabindex="-1">1.安装步骤 <a class="header-anchor" href="#_1-安装步骤" aria-label="Permalink to &quot;1.安装步骤&quot;">​</a></h3><p>略</p><h3 id="_2-目录介绍" tabindex="-1">2.目录介绍 <a class="header-anchor" href="#_2-目录介绍" aria-label="Permalink to &quot;2.目录介绍&quot;">​</a></h3><ul><li>bin : 存放开发工具 <ul><li>javac.exe 编译</li><li>java.exe 运行</li><li>javadoc.exe 生成网页文档</li></ul></li><li>include： java调用C</li><li>jre：运行时环境</li><li>lib：jar包</li><li>src：常见开源代码</li></ul><h3 id="_3-环境变量" tabindex="-1">3.环境变量 <a class="header-anchor" href="#_3-环境变量" aria-label="Permalink to &quot;3.环境变量&quot;">​</a></h3><p>path：Windows系统执行命令要搜寻的路径</p><p><code>按照需求更换环境变量中的JAVA_HOME值</code></p><h3 id="_4-开发三步骤" tabindex="-1">4.开发三步骤 <a class="header-anchor" href="#_4-开发三步骤" aria-label="Permalink to &quot;4.开发三步骤&quot;">​</a></h3><ul><li>将Java代码编写到扩展名.java源文件中</li><li>通过javac.exe命令对java文件编译，生成一个或多个字节码文件</li><li>通过java.exe命令对生成的字节码class文件运行</li></ul><p><img src="'+n+'" alt="image-20230226170229588"></p><p><img src="'+p+'" alt="image-20230305134003600"></p><p><img src="'+t+`" alt="image-20230305134015567"></p><h3 id="_5-hello-world" tabindex="-1">5.Hello World <a class="header-anchor" href="#_5-hello-world" aria-label="Permalink to &quot;5.Hello World&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Main</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//main方法是程序的入口</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">/* 这里是多行注释*/</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Hello world!&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Main</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//main方法是程序的入口</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">/* 这里是多行注释*/</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Hello world!&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="_6-注意事项" tabindex="-1">6.注意事项 <a class="header-anchor" href="#_6-注意事项" aria-label="Permalink to &quot;6.注意事项&quot;">​</a></h3><ul><li>每行语句执行完毕 “；”结尾</li></ul><h3 id="_7-文档注释" tabindex="-1">7.文档注释 <a class="header-anchor" href="#_7-文档注释" aria-label="Permalink to &quot;7.文档注释&quot;">​</a></h3><p><img src="`+i+'" alt="image-20230305135311600"></p><p><img src="'+r+'" alt="image-20230305135350597"></p><h2 id="三、常用运算符" tabindex="-1">三、常用运算符 <a class="header-anchor" href="#三、常用运算符" aria-label="Permalink to &quot;三、常用运算符&quot;">​</a></h2><blockquote><p>逻辑运算符针对的都是boolean类型的变量</p><p>逻辑运算符运算的结果也是boolen类型</p><p>逻辑运算符 常用在条件判断 和 循环结构中</p></blockquote><h3 id="_1" tabindex="-1">1.&amp; &amp;&amp; | || ^ ! <a class="header-anchor" href="#_1" aria-label="Permalink to &quot;1.&amp; &amp;&amp; | || ^ !&quot;">​</a></h3><ul><li><p>​ &amp; 和 &amp;&amp; 相同点 及 区别</p><ul><li><p>相同点</p><ul><li>两个符号表达的都是“且”的关系，当符号左右两边的类型值均为True，结果为True</li></ul></li><li><p>区别</p><ul><li><p>如果符号左边是True，则&amp; 和 &amp;&amp; 都会执行符号右边的操作</p></li><li><p>如果符号左边是false，则 &amp; 会继续执行符号右边的操作；&amp;&amp;符号不会执行右侧符号</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&amp;&amp; </span><span style="color:#B392F0;">：</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">如果第一个条件都不满足，没有必要再看后续</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&amp;&amp; </span><span style="color:#6F42C1;">：</span><span style="color:#24292E;"> </span><span style="color:#032F62;">如果第一个条件都不满足，没有必要再看后续</span></span></code></pre></div></li></ul></li></ul></li><li><p>|| 符号 与 | 相同</p></li></ul><h2 id="四、导包" tabindex="-1">四、导包 <a class="header-anchor" href="#四、导包" aria-label="Permalink to &quot;四、导包&quot;">​</a></h2><blockquote><p>除lang包下面的类，其他包的方法都要导入</p></blockquote><ul><li>用户输入：Scanner</li><li>随机数：math.random <ul><li>获取指定范围内的随机数：(int)(Math.random() * (b - a + 1)) + a</li></ul></li><li><code>switch只能判断常量，不能判断范围，如判断某一变量是否大于小于某值是不可以的</code><ul><li>defalut可选的，同时位置随意</li></ul></li></ul><h2 id="五、基本类型-整型的范围" tabindex="-1">五、基本类型-整型的范围 <a class="header-anchor" href="#五、基本类型-整型的范围" aria-label="Permalink to &quot;五、基本类型-整型的范围&quot;">​</a></h2><ul><li>byte的取值范围为-128~127，占用1个字节(-2的7次方到2的7次方-1)</li><li>short的取值范围为-32768~32767，占用2个字节(-2的15次方到2的15次方-1)</li><li>int的取值范围为(-2147483648~2147483647)，占用4个字节(-2的31次方到2的31次方-1)</li><li>long的取值范围为(-9223372036854774808~9223372036854774807)，占用8个字节(-2的63次方到2的63次方-1)</li></ul>',37),h=[d];function E(u,y,m,b,_,g){return s(),l("div",null,h)}const J=a(c,[["render",E]]);export{q as __pageData,J as default};
