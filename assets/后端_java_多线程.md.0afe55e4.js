import{_ as a,o as e,c as o,Q as t}from"./chunks/framework.a7175731.js";const i="/assets/image-20230927104218212.144bce07.png",c="/assets/image-20230927104336369.26ef0710.png",l="/assets/image-20230927104427601.767ed1c2.png",s="/assets/image-20230927104442929.d39b2600.png",p="/assets/image-20230927104458885.cf163d8b.png",r="/assets/image-20230930190005687.48c7befb.png",d="/assets/image-20230927105116494.edf3c349.png",n="/assets/image-20230927105121034.31ad5900.png",_="/assets/image-20230927105141376.cbb0086a.png",h="/assets/image-20230927105148188.c1ff49c7.png",v=JSON.parse('{"title":"多线程 --笔记","description":"","frontmatter":{},"headers":[],"relativePath":"后端/java/多线程.md","filePath":"后端/java/多线程.md","lastUpdated":null}'),m={name:"后端/java/多线程.md"},g=t('<h1 id="多线程-笔记" tabindex="-1">多线程 --笔记 <a class="header-anchor" href="#多线程-笔记" aria-label="Permalink to &quot;多线程 --笔记&quot;">​</a></h1><h2 id="一、-相关概念" tabindex="-1">一、 相关概念 <a class="header-anchor" href="#一、-相关概念" aria-label="Permalink to &quot;一、 相关概念&quot;">​</a></h2><h3 id="_1-1-程序、进程与线程" tabindex="-1">1.1 程序、进程与线程 <a class="header-anchor" href="#_1-1-程序、进程与线程" aria-label="Permalink to &quot;1.1 程序、进程与线程&quot;">​</a></h3><ul><li><p><strong>程序（program）</strong>：为完成特定任务，用某种语言编写的<code>一组指令的集合</code>。即指<code>一段静态的代码</code>，静态对象。</p></li><li><p><strong>进程（process）</strong>：程序的一次执行过程，或是正在内存中运行的应用程序。如：运行中的QQ，运行中的网易音乐播放器。</p><ul><li>每个进程都有一个独立的内存空间，系统运行一个程序即是一个进程从创建、运行到消亡的过程。（生命周期）</li><li>程序是静态的，进程是动态的</li><li>进程作为<code>操作系统调度和分配资源的最小单位</code>（亦是系统运行程序的基本单位），系统在运行时会为每个进程分配不同的内存区域。</li><li>现代的操作系统，大都是支持多进程的，支持同时运行多个程序。比如：现在我们上课一边使用编辑器，一边使用录屏软件，同时还开着画图板，dos窗口等软件。</li></ul></li><li><p><strong>线程（thread）</strong>：进程可进一步细化为线程，是程序内部的<code>一条执行路径</code>。一个进程中至少有一个线程。</p><ul><li><p>一个进程同一时间若<code>并行</code>执行多个线程，就是支持多线程的。</p><p><img src="'+i+'" alt="image-20230927104218212"></p></li><li><p>线程作为<code>CPU调度和执行的最小单位</code>。</p></li><li><p>一个进程中的多个线程共享相同的内存单元，它们从同一个堆中分配对象，可以访问相同的变量和对象。这就使得线程间通信更简便、高效。但多个线程操作共享的系统资源可能就会带来<code>安全的隐患</code>。</p></li><li><p>下图中，红框的蓝色区域为线程独享，黄色区域为线程共享。</p></li></ul></li></ul><p><img src="'+c+'" alt="image-20230927104336369"></p><blockquote><p>注意：</p><p>不同的进程之间是不共享内存的。</p><p>进程之间的数据交换和通信的成本很高。</p></blockquote><h3 id="_1-2-查看进程和线程" tabindex="-1">1.2 查看进程和线程 <a class="header-anchor" href="#_1-2-查看进程和线程" aria-label="Permalink to &quot;1.2 查看进程和线程&quot;">​</a></h3><p>我们可以在电脑底部任务栏，右键-----&gt;打开任务管理器，可以查看当前任务的进程：</p><p>1、每个应用程序的运行都是一个进程</p><p><img src="'+l+'" alt="image-20230927104427601"></p><p>2、一个应用程序的多次运行，就是多个进程</p><p><img src="'+s+'" alt="image-20230927104442929"></p><p>3、一个进程中包含多个线程</p><p><img src="'+p+'" alt="image-20230927104458885"></p><h3 id="_1-3-线程调度" tabindex="-1">1.3 线程调度 <a class="header-anchor" href="#_1-3-线程调度" aria-label="Permalink to &quot;1.3 线程调度&quot;">​</a></h3><ul><li><p><strong>分时调度</strong></p><p>所有线程<code>轮流使用</code> CPU 的使用权，并且平均分配每个线程占用 CPU 的时间。</p></li><li><p><strong>抢占式调度</strong></p><p>让<code>优先级高</code>的线程以<code>较大的概率</code>优先使用 CPU。如果线程的优先级相同，那么会随机选择一个(线程随机性)，Java使用的为抢占式调度。</p></li></ul><p><img src="'+r+'" alt="image-20230930190005687"></p><h3 id="_1-4-多线程程序的优点" tabindex="-1">1.4 多线程程序的优点 <a class="header-anchor" href="#_1-4-多线程程序的优点" aria-label="Permalink to &quot;1.4 多线程程序的优点&quot;">​</a></h3><p>**背景：**以单核CPU为例，只使用单个线程先后完成多个任务（调用多个方法），肯定比用多个线程来完成用的时间更短，为何仍需多线程呢？</p><p><strong>多线程程序的优点：</strong></p><ol><li><p>提高应用程序的响应。对图形化界面更有意义，可增强用户体验。</p></li><li><p>提高计算机系统CPU的利用率</p></li><li><p>改善程序结构。将既长又复杂的进程分为多个线程，独立运行，利于理解和修改</p></li></ol><h3 id="_1-5-补充概念" tabindex="-1">1.5 补充概念 <a class="header-anchor" href="#_1-5-补充概念" aria-label="Permalink to &quot;1.5 补充概念&quot;">​</a></h3><h4 id="_1-5-1-单核cpu和多核cpu" tabindex="-1">1.5.1 单核CPU和多核CPU <a class="header-anchor" href="#_1-5-1-单核cpu和多核cpu" aria-label="Permalink to &quot;1.5.1 单核CPU和多核CPU&quot;">​</a></h4><p>单核CPU，在一个时间单元内，只能执行一个线程的任务。例如，可以把CPU看成是医院的医生诊室，在一定时间内只能给一个病人诊断治疗。所以单核CPU就是，代码经过前面一系列的前导操作（类似于医院挂号，比如有10个窗口挂号），然后到cpu处执行时发现，就只有一个CPU（对应一个医生），大家排队执行。</p><p>这时候想要提升系统性能，只有两个办法，要么提升CPU性能（让医生看病快点），要么多加几个CPU（多整几个医生），即为多核的CPU。</p><p><code>问题：多核的效率是单核的倍数吗？</code>譬如4核A53的cpu，性能是单核A53的4倍吗？理论上是，但是实际不可能，至少有两方面的损耗。</p><ul><li><code>一个是多个核心的其他共用资源限制</code>。譬如，4核CPU对应的内存、cache、寄存器并没有同步扩充4倍。这就好像医院一样，1个医生换4个医生，但是做B超检查的还是一台机器，性能瓶颈就从医生转到B超检查了。</li><li><code>另一个是多核CPU之间的协调管理损耗</code>。譬如多个核心同时运行两个相关的任务，需要考虑任务同步，这也需要消耗额外性能。好比公司工作，一个人的时候至少不用开会浪费时间，自己跟自己商量就行了。两个人就要开会同步工作，协调分配，所以工作效率绝对不可能达到2倍。</li></ul><h4 id="_1-5-2-并行与并发" tabindex="-1">1.5.2 并行与并发 <a class="header-anchor" href="#_1-5-2-并行与并发" aria-label="Permalink to &quot;1.5.2 并行与并发&quot;">​</a></h4><ul><li><strong>并行（parallel）</strong>：指两个或多个事件在<code>同一时刻</code>发生（同时发生）。指在同一时刻，有<code>多条指令</code>在<code>多个CPU</code>上<code>同时</code>执行。比如：多个人同时做不同的事。</li></ul><p><img src="'+d+'" alt="image-20230927105116494"></p><p><img src="'+n+'" alt="image-20230927105121034"></p><ul><li><p><strong>并发（concurrency）</strong>：指两个或多个事件在<code>同一个时间段内</code>发生。即在一段时间内，有<code>多条指令</code>在<code>单个CPU</code>上<code>快速轮换、交替</code>执行，使得在宏观上具有多个进程同时执行的效果。</p><p><img src="'+_+'" alt="image-20230927105141376"></p><p><img src="'+h+'" alt="image-20230927105148188"></p></li></ul><p>在操作系统中，启动了多个程序，<code>并发</code>指的是在一段时间内宏观上有多个程序同时运行，这在单核 CPU 系统中，每一时刻只能有一个程序执行，即微观上这些程序是分时的交替运行，只不过是给人的感觉是同时运行，那是因为分时交替运行的时间是非常短的。</p><p>而在多核 CPU 系统中，则这些可以<code>并发</code>执行的程序便可以分配到多个CPU上，实现多任务并行执行，即利用每个处理器来处理一个可以并发执行的程序，这样多个程序便可以同时执行。目前电脑市场上说的多核 CPU，便是多核处理器，核越多，<code>并行</code>处理的程序越多，能大大的提高电脑运行的效率。</p><h2 id="二-创建和启动线程" tabindex="-1">二.创建和启动线程 <a class="header-anchor" href="#二-创建和启动线程" aria-label="Permalink to &quot;二.创建和启动线程&quot;">​</a></h2><h3 id="_2-1-概述" tabindex="-1">2.1 概述 <a class="header-anchor" href="#_2-1-概述" aria-label="Permalink to &quot;2.1 概述&quot;">​</a></h3>',36),u=[g];function P(b,C,U,f,q,k){return e(),o("div",null,u)}const T=a(m,[["render",P]]);export{v as __pageData,T as default};
