import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.a7175731.js";const p="/assets/image-20231023202118883.ffdb4e85.png",o="/assets/image-20231023202504420.a9bf7ff8.png",t="/assets/image-20231023202528750.85b5c6c1.png",e="/assets/image-20231023202707164.49d95972.png",c="/assets/image-20231023203232413.46437cad.png",r="/assets/image-20231023203508611.efc5544f.png",S=JSON.parse('{"title":"常用类和基础API --笔记","description":"","frontmatter":{},"headers":[],"relativePath":"后端/java/常用类和基础API.md","filePath":"后端/java/常用类和基础API.md","lastUpdated":null}'),E={name:"后端/java/常用类和基础API.md"},y=l('<h1 id="常用类和基础api-笔记" tabindex="-1">常用类和基础API --笔记 <a class="header-anchor" href="#常用类和基础api-笔记" aria-label="Permalink to &quot;常用类和基础API --笔记&quot;">​</a></h1><h2 id="一、字符串相关类之不可变字符序列-string" tabindex="-1">一、字符串相关类之不可变字符序列：String <a class="header-anchor" href="#一、字符串相关类之不可变字符序列-string" aria-label="Permalink to &quot;一、字符串相关类之不可变字符序列：String&quot;">​</a></h2><h3 id="_1-1-string的特性" tabindex="-1">1.1 String的特性 <a class="header-anchor" href="#_1-1-string的特性" aria-label="Permalink to &quot;1.1 String的特性&quot;">​</a></h3><ul><li><p><code>java.lang.String</code> 类代表字符串。Java程序中所有的字符串文字（例如<code>&quot;hello&quot;</code> ）都可以看作是实现此类的实例。</p></li><li><p>字符串是常量，用双引号引起来表示。它们的值在创建之后不能更改。</p></li><li><p>字符串String类型本身是final声明的，意味着我们不能继承String。</p></li><li><p>String对象的字符内容是存储在一个字符数组value[]中的。<code>&quot;abc&quot;</code> 等效于 <code>char[] data={&#39;h&#39;,&#39;e&#39;,&#39;l&#39;,&#39;l&#39;,&#39;o&#39;}</code>。</p></li></ul><p><img src="'+p+`" alt="image-20231023202118883"></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//jdk8中的String源码：</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> java.io.</span><span style="color:#B392F0;">Serializable</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">Comparable</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt;, </span><span style="color:#B392F0;">CharSequence</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    /** The value is used for character storage. */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> value[]; </span><span style="color:#6A737D;">//String对象的字符内容是存储在此数组中</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#6A737D;">    /** Cache the hash code for the string */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> hash; </span><span style="color:#6A737D;">// Default to 0</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//jdk8中的String源码：</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> java.io.</span><span style="color:#6F42C1;">Serializable</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">Comparable</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt;, </span><span style="color:#6F42C1;">CharSequence</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    /** The value is used for character storage. */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> value[]; </span><span style="color:#6A737D;">//String对象的字符内容是存储在此数组中</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#6A737D;">    /** Cache the hash code for the string */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> hash; </span><span style="color:#6A737D;">// Default to 0</span></span></code></pre></div><ul><li><p>private意味着外面无法直接获取字符数组，而且String没有提供value的get和set方法。</p></li><li><p>final意味着字符数组的引用不可改变，而且String也没有提供方法来修改value数组某个元素值</p></li><li><p>因此字符串的字符数组内容也不可变的，即String代表着不可变的字符序列。即，一旦对字符串进行修改，就会产生新对象。</p></li><li><p>JDK9只有，底层使用byte[]数组。</p></li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> java.io.</span><span style="color:#B392F0;">Serializable</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">Comparable</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt;, </span><span style="color:#B392F0;">CharSequence</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Stable</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">[] value;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//官方说明：... that most String objects contain only Latin-1 characters. Such characters require only one byte of storage, hence half of the space in the internal char arrays of such String objects is going unused.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//细节：... The new String class will store characters encoded either as ISO-8859-1/Latin-1 (one byte per character), or as UTF-16 (two bytes per character), based upon the contents of the string. The encoding flag will indicate which encoding is used.</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> java.io.</span><span style="color:#6F42C1;">Serializable</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">Comparable</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt;, </span><span style="color:#6F42C1;">CharSequence</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Stable</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[] value;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//官方说明：... that most String objects contain only Latin-1 characters. Such characters require only one byte of storage, hence half of the space in the internal char arrays of such String objects is going unused.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//细节：... The new String class will store characters encoded either as ISO-8859-1/Latin-1 (one byte per character), or as UTF-16 (two bytes per character), based upon the contents of the string. The encoding flag will indicate which encoding is used.</span></span></code></pre></div><h3 id="_1-2-string的内存结构" tabindex="-1">1.2 String的内存结构 <a class="header-anchor" href="#_1-2-string的内存结构" aria-label="Permalink to &quot;1.2 String的内存结构&quot;">​</a></h3><h4 id="_1-2-1-概述" tabindex="-1">1.2.1 概述 <a class="header-anchor" href="#_1-2-1-概述" aria-label="Permalink to &quot;1.2.1 概述&quot;">​</a></h4><p>因为字符串对象设计为不可变，那么所以字符串有常量池来保存很多常量对象。</p><p><code>JDK6中，字符串常量池在方法区；JDK7开始，就移到堆空间，直到目前JDK17版本</code>。</p><h4 id="_1-2-2-练习1" tabindex="-1">1.2.2 练习1 <a class="header-anchor" href="#_1-2-2-练习1" aria-label="Permalink to &quot;1.2.2 练习1&quot;">​</a></h4><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">String s1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hello&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String s2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hello&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(s1 </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> s2);</span></span>
<span class="line"><span style="color:#6A737D;">// 内存中只有一个&quot;hello&quot;对象被创建，同时被s1和s2共享。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">String s1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String s2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(s1 </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> s2);</span></span>
<span class="line"><span style="color:#6A737D;">// 内存中只有一个&quot;hello&quot;对象被创建，同时被s1和s2共享。</span></span></code></pre></div><p>对应内存结构为：（以下内存结构以<code>JDK6为例</code>绘制）：</p><p><img src="`+o+'" alt="image-20231023202504420"></p><p>字符串内容更改 -&gt; 创建新的对象</p><p><img src="'+t+`" alt="image-20231023202528750"></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> string</span><span style="color:#FDAEB7;font-style:italic;">C</span><span style="color:#E1E4E8;">lass;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@author</span><span style="color:#6A737D;"> smallTiger</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">stringClass</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Person p1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Person</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        p1.name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Tom&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        Person p2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Person</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        p2.name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Tom&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(p1.name.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">( p2.name)); </span><span style="color:#6A737D;">//true</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(p1.name </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> p2.name); </span><span style="color:#6A737D;">//true</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(p1.name </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Tom&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">//true</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Person</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String name;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Person</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> string</span><span style="color:#B31D28;font-style:italic;">C</span><span style="color:#24292E;">lass;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@author</span><span style="color:#6A737D;"> smallTiger</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">stringClass</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        Person p1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        p1.name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Tom&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        Person p2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        p2.name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Tom&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(p1.name.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">( p2.name)); </span><span style="color:#6A737D;">//true</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(p1.name </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> p2.name); </span><span style="color:#6A737D;">//true</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(p1.name </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Tom&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">//true</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String name;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><img src="`+e+'" alt="image-20231023202707164"></p><h4 id="_1-2-2-练习2" tabindex="-1">1.2.2 练习2 <a class="header-anchor" href="#_1-2-2-练习2" aria-label="Permalink to &quot;1.2.2 练习2&quot;">​</a></h4><blockquote><p>❓ String str1 = “abc”; 与 String str2 = new String(“abc”);的区别？</p></blockquote><p>str2 首先指向堆中的一个字符串对象，然后堆中字符串的value数组指向常量池中常量对象的value数组。</p><p><img src="'+c+`" alt="image-20231023203232413"></p><p>💡 字符串常量存储在字符串常量池，目的是共享。</p><p>💡 字符串非常量对象存储在堆中。</p><p>练习：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">String s1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;javaEE&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String s2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;javaEE&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String s3 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;javaEE&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">String s4 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;javaEE&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(s1 </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> s2);</span><span style="color:#6A737D;">//true</span></span>
<span class="line"><span style="color:#E1E4E8;">System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(s1 </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> s3);</span><span style="color:#6A737D;">//false</span></span>
<span class="line"><span style="color:#E1E4E8;">System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(s1 </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> s4);</span><span style="color:#6A737D;">//false</span></span>
<span class="line"><span style="color:#E1E4E8;">System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(s3 </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> s4);</span><span style="color:#6A737D;">//false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">String s1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;javaEE&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String s2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;javaEE&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String s3 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;javaEE&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">String s4 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;javaEE&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(s1 </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> s2);</span><span style="color:#6A737D;">//true</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(s1 </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> s3);</span><span style="color:#6A737D;">//false</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(s1 </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> s4);</span><span style="color:#6A737D;">//false</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(s3 </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> s4);</span><span style="color:#6A737D;">//false</span></span></code></pre></div><p><img src="`+r+`" alt="image-20231023203508611"></p><p>练习：String str2 = new String(&quot;hello&quot;); 在内存中创建了几个对象？</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">两个</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">两个</span></span></code></pre></div><h4 id="_1-2-2-练习3" tabindex="-1">1.2.2 练习3 <a class="header-anchor" href="#_1-2-2-练习3" aria-label="Permalink to &quot;1.2.2 练习3&quot;">​</a></h4><ul><li><strong>String s1 = &quot;a&quot;;</strong></li></ul><p>说明：在字符串常量池中创建了一个字面量为&quot;a&quot;的字符串。</p><ul><li><strong>s1 = s1 + &quot;b&quot;;</strong></li></ul><p>说明：<code>实际上原来的“a”字符串对象已经丢弃了，现在在堆空间中产生了一个字符串s1+&quot;b&quot;（也就是&quot;ab&quot;)</code>。如果多次执行这些改变串内容的操作，会导致大量副本字符串对象存留在内存中，降低效率。如果这样的操作放到循环中，会极大影响程序的性能。</p><ul><li><strong>String s2 = &quot;ab&quot;;</strong></li></ul><p>说明：直接在字符串常量池中创建一个字面量为&quot;ab&quot;的字符串。</p><ul><li><strong>String s3 = &quot;a&quot; + &quot;b&quot;;</strong></li></ul><p>说明：s3指向字符串常量池中已经创建的&quot;ab&quot;的字符串。</p><ul><li><strong>String s4 = s1.intern();</strong></li></ul><p>说明：堆空间的s1对象在调用intern()之后，会将常量池中已经存在的&quot;ab&quot;字符串赋值给s4。</p><p>练习：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">String s1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hello&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String s2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;world&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String s3 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hello&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;world&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String s4 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> s1 </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;world&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">String s5 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> s1 </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> s2;</span></span>
<span class="line"><span style="color:#E1E4E8;">String s6 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (s1 </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> s2).</span><span style="color:#B392F0;">intern</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(s3 </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> s4);</span><span style="color:#6A737D;">//false</span></span>
<span class="line"><span style="color:#E1E4E8;">System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(s3 </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> s5);</span><span style="color:#6A737D;">//false</span></span>
<span class="line"><span style="color:#E1E4E8;">System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(s4 </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> s5);</span><span style="color:#6A737D;">//false</span></span>
<span class="line"><span style="color:#E1E4E8;">System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(s3 </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> s6);</span><span style="color:#6A737D;">//true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">String s1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String s2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;world&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String s3 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;world&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String s4 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> s1 </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;world&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String s5 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> s1 </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> s2;</span></span>
<span class="line"><span style="color:#24292E;">String s6 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (s1 </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> s2).</span><span style="color:#6F42C1;">intern</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(s3 </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> s4);</span><span style="color:#6A737D;">//false</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(s3 </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> s5);</span><span style="color:#6A737D;">//false</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(s4 </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> s5);</span><span style="color:#6A737D;">//false</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(s3 </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> s6);</span><span style="color:#6A737D;">//true</span></span></code></pre></div><blockquote><p><strong>结论：</strong></p><p>（1）常量+常量：结果是常量池。且常量池中不会存在相同内容的常量。</p><p>（2）常量与变量 或 变量与变量：结果在堆中</p><p>（3）拼接后调用intern方法：返回值在常量池中</p></blockquote><p>练习：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test01</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">	String s1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hello&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	String s2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;world&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	String s3 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;helloworld&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span></span>
<span class="line"><span style="color:#E1E4E8;">	String s4 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> s1 </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;world&quot;</span><span style="color:#E1E4E8;">;</span><span style="color:#6A737D;">//s4字符串内容也helloworld，s1是变量，&quot;world&quot;常量，变量 + 常量的结果在堆中</span></span>
<span class="line"><span style="color:#E1E4E8;">	String s5 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> s1 </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> s2;</span><span style="color:#6A737D;">//s5字符串内容也helloworld，s1和s2都是变量，变量 + 变量的结果在堆中</span></span>
<span class="line"><span style="color:#E1E4E8;">	String s6 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hello&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;world&quot;</span><span style="color:#E1E4E8;">;</span><span style="color:#6A737D;">//常量+ 常量 结果在常量池中，因为编译期间就可以确定结果</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span></span>
<span class="line"><span style="color:#E1E4E8;">	System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(s3 </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> s4);</span><span style="color:#6A737D;">//false</span></span>
<span class="line"><span style="color:#E1E4E8;">	System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(s3 </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> s5);</span><span style="color:#6A737D;">//false</span></span>
<span class="line"><span style="color:#E1E4E8;">	System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(s3 </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> s6);</span><span style="color:#6A737D;">//true</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test02</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String s1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hello&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> String s2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;world&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	String s3 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;helloworld&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">	String s4 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> s1 </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;world&quot;</span><span style="color:#E1E4E8;">;</span><span style="color:#6A737D;">//s4字符串内容也helloworld，s1是常量，&quot;world&quot;常量，常量+常量结果在常量池中</span></span>
<span class="line"><span style="color:#E1E4E8;">	String s5 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> s1 </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> s2;</span><span style="color:#6A737D;">//s5字符串内容也helloworld，s1和s2都是常量，常量+ 常量 结果在常量池中</span></span>
<span class="line"><span style="color:#E1E4E8;">	String s6 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hello&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;world&quot;</span><span style="color:#E1E4E8;">;</span><span style="color:#6A737D;">//常量+ 常量 结果在常量池中，因为编译期间就可以确定结果</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span></span>
<span class="line"><span style="color:#E1E4E8;">	System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(s3 </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> s4);</span><span style="color:#6A737D;">//true</span></span>
<span class="line"><span style="color:#E1E4E8;">	System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(s3 </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> s5);</span><span style="color:#6A737D;">//true</span></span>
<span class="line"><span style="color:#E1E4E8;">	System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(s3 </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> s6);</span><span style="color:#6A737D;">//true</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test01</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">	String s1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hello&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	String s2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;world&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	String s3 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;helloworld&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span></span>
<span class="line"><span style="color:#E1E4E8;">	String s4 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (s1 </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;world&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">intern</span><span style="color:#E1E4E8;">();</span><span style="color:#6A737D;">//把拼接的结果放到常量池中</span></span>
<span class="line"><span style="color:#E1E4E8;">	String s5 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (s1 </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> s2).</span><span style="color:#B392F0;">intern</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span></span>
<span class="line"><span style="color:#E1E4E8;">	System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(s3 </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> s4);</span><span style="color:#6A737D;">//true</span></span>
<span class="line"><span style="color:#E1E4E8;">	System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(s3 </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> s5);</span><span style="color:#6A737D;">//true</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test01</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">	String s1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	String s2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;world&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	String s3 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;helloworld&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">		</span></span>
<span class="line"><span style="color:#24292E;">	String s4 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> s1 </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;world&quot;</span><span style="color:#24292E;">;</span><span style="color:#6A737D;">//s4字符串内容也helloworld，s1是变量，&quot;world&quot;常量，变量 + 常量的结果在堆中</span></span>
<span class="line"><span style="color:#24292E;">	String s5 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> s1 </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> s2;</span><span style="color:#6A737D;">//s5字符串内容也helloworld，s1和s2都是变量，变量 + 变量的结果在堆中</span></span>
<span class="line"><span style="color:#24292E;">	String s6 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;world&quot;</span><span style="color:#24292E;">;</span><span style="color:#6A737D;">//常量+ 常量 结果在常量池中，因为编译期间就可以确定结果</span></span>
<span class="line"><span style="color:#24292E;">		</span></span>
<span class="line"><span style="color:#24292E;">	System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(s3 </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> s4);</span><span style="color:#6A737D;">//false</span></span>
<span class="line"><span style="color:#24292E;">	System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(s3 </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> s5);</span><span style="color:#6A737D;">//false</span></span>
<span class="line"><span style="color:#24292E;">	System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(s3 </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> s6);</span><span style="color:#6A737D;">//true</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test02</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String s1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String s2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;world&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	String s3 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;helloworld&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	String s4 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> s1 </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;world&quot;</span><span style="color:#24292E;">;</span><span style="color:#6A737D;">//s4字符串内容也helloworld，s1是常量，&quot;world&quot;常量，常量+常量结果在常量池中</span></span>
<span class="line"><span style="color:#24292E;">	String s5 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> s1 </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> s2;</span><span style="color:#6A737D;">//s5字符串内容也helloworld，s1和s2都是常量，常量+ 常量 结果在常量池中</span></span>
<span class="line"><span style="color:#24292E;">	String s6 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;world&quot;</span><span style="color:#24292E;">;</span><span style="color:#6A737D;">//常量+ 常量 结果在常量池中，因为编译期间就可以确定结果</span></span>
<span class="line"><span style="color:#24292E;">		</span></span>
<span class="line"><span style="color:#24292E;">	System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(s3 </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> s4);</span><span style="color:#6A737D;">//true</span></span>
<span class="line"><span style="color:#24292E;">	System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(s3 </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> s5);</span><span style="color:#6A737D;">//true</span></span>
<span class="line"><span style="color:#24292E;">	System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(s3 </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> s6);</span><span style="color:#6A737D;">//true</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test01</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">	String s1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	String s2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;world&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	String s3 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;helloworld&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">		</span></span>
<span class="line"><span style="color:#24292E;">	String s4 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (s1 </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;world&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">intern</span><span style="color:#24292E;">();</span><span style="color:#6A737D;">//把拼接的结果放到常量池中</span></span>
<span class="line"><span style="color:#24292E;">	String s5 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (s1 </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> s2).</span><span style="color:#6F42C1;">intern</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">		</span></span>
<span class="line"><span style="color:#24292E;">	System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(s3 </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> s4);</span><span style="color:#6A737D;">//true</span></span>
<span class="line"><span style="color:#24292E;">	System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(s3 </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> s5);</span><span style="color:#6A737D;">//true</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>练习：下列程序运行的结果：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestString</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">		String str </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hello&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">		String str2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;world&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">		String str3 </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;helloworld&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span></span>
<span class="line"><span style="color:#E1E4E8;">		String str4 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hello&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">concat</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;world&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">		String str5 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hello&quot;</span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;">&quot;world&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span></span>
<span class="line"><span style="color:#E1E4E8;">		System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(str3 </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> str4);</span><span style="color:#6A737D;">//false</span></span>
<span class="line"><span style="color:#E1E4E8;">		System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(str3 </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> str5);</span><span style="color:#6A737D;">//true</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestString</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">		String str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">		String str2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;world&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">		String str3 </span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;helloworld&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">		</span></span>
<span class="line"><span style="color:#24292E;">		String str4 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">concat</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;world&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">		String str5 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">&quot;world&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">		</span></span>
<span class="line"><span style="color:#24292E;">		System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(str3 </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> str4);</span><span style="color:#6A737D;">//false</span></span>
<span class="line"><span style="color:#24292E;">		System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(str3 </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> str5);</span><span style="color:#6A737D;">//true</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>concat方法拼接，哪怕是两个常量对象拼接，结果也是在堆。</p></blockquote><p>练习：下列程序运行的结果：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StringTest</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    String str </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;good&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;">[] ch </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { </span><span style="color:#9ECBFF;">&#39;t&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;e&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;s&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;t&#39;</span><span style="color:#E1E4E8;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">change</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">str</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">ch</span><span style="color:#E1E4E8;">[]) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        str </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;test ok&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        ch[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;b&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        StringTest ex </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StringTest</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        ex.</span><span style="color:#B392F0;">change</span><span style="color:#E1E4E8;">(ex.str, ex.ch);</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(ex.str </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; and &quot;</span><span style="color:#E1E4E8;">);</span><span style="color:#6A737D;">//</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(ex.ch);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StringTest</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    String str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;good&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">char</span><span style="color:#24292E;">[] ch </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { </span><span style="color:#032F62;">&#39;t&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;e&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;s&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;t&#39;</span><span style="color:#24292E;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">change</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">str</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#E36209;">ch</span><span style="color:#24292E;">[]) {</span></span>
<span class="line"><span style="color:#24292E;">        str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;test ok&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        ch[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;b&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        StringTest ex </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StringTest</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        ex.</span><span style="color:#6F42C1;">change</span><span style="color:#24292E;">(ex.str, ex.ch);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(ex.str </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; and &quot;</span><span style="color:#24292E;">);</span><span style="color:#6A737D;">//</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(ex.ch);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ol><li><p>首先，在<code>main</code>方法中创建了一个<code>StringTest</code>对象 <code>ex</code>。</p></li><li><p>在<code>StringTest</code>类的构造方法中，创建了一个字符串对象 <code>str</code>，并将其初始化为 <code>&quot;good&quot;</code>。同时，创建了一个字符数组 <code>ch</code>，并初始化为 <code>[&#39;t&#39;, &#39;e&#39;, &#39;s&#39;, &#39;t&#39;]</code></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">ex.str -&gt; &quot;good&quot;</span></span>
<span class="line"><span style="color:#e1e4e8;">ex.ch  -&gt; [&#39;t&#39;, &#39;e&#39;, &#39;s&#39;, &#39;t&#39;]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">ex.str -&gt; &quot;good&quot;</span></span>
<span class="line"><span style="color:#24292e;">ex.ch  -&gt; [&#39;t&#39;, &#39;e&#39;, &#39;s&#39;, &#39;t&#39;]</span></span></code></pre></div></li><li><p>调用<code>change</code>方法，并传入 <code>ex.str</code> 和 <code>ex.ch</code> 作为参数。</p><ul><li><p>在<code>change</code>方法中，接收到 <code>str</code> 和 <code>ch</code> 的引用。</p></li><li><blockquote><p>⭐ 此时虽然 str 和 ex.str都指向 字面量常量池中的一片区域，应该说str更改对应区域的地址值后，外部ex.str同样指向该片区域，值也应该同时变化。但是因为String类型的字面量的不可变性，此片区域字面量值不变（因为字符串对象设计为不可变，那么字符串有常量池来保存很多常量对象），<strong>所以结果是外部ex.str的指针仍然指向该片区域，值不变为good；而str指向另一片字面量区域</strong>。</p></blockquote></li><li><blockquote><p>同上面的ex.str 和 str类似，ex.ch 和 ch的指针同样指向堆中的一片区域，<strong>但是这是堆中对象的内部值，可以改变，所以当 <code>ch[0]</code> 被修改为 <code>&#39;b&#39;</code>，外部的ex.ch[0]同样指向该区域，所以最终的结果改为了best</strong></p></blockquote></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">ex.str -&gt; &quot;good&quot;</span></span>
<span class="line"><span style="color:#e1e4e8;">ex.ch  -&gt; [&#39;b&#39;, &#39;e&#39;, &#39;s&#39;, &#39;t&#39;]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">ex.str -&gt; &quot;good&quot;</span></span>
<span class="line"><span style="color:#24292e;">ex.ch  -&gt; [&#39;b&#39;, &#39;e&#39;, &#39;s&#39;, &#39;t&#39;]</span></span></code></pre></div></li><li><p>返回到<code>main</code>方法，输出 <code>ex.str + &quot; and &quot;</code>。这里的<code>ex.str</code>仍然是之前构造方法中的值 <code>&quot;good&quot;</code>，因为<code>change</code>方法内的<code>str</code>重新分配了一个新的字符串，但不会影响类的成员变量 <code>str</code>。</p></li><li><p>输出 <code>ex.ch</code>。由于<code>ch</code> 是字符数组，它在<code>change</code>方法中被修改为 <code>[&#39;b&#39;, &#39;e&#39;, &#39;s&#39;, &#39;t&#39;]</code>。</p></li></ol><p>最终的输出为 <code>&quot;good and best&quot;</code></p><h3 id="_1-3-string的常用api-1" tabindex="-1">1.3 String的常用API-1 <a class="header-anchor" href="#_1-3-string的常用api-1" aria-label="Permalink to &quot;1.3 String的常用API-1&quot;">​</a></h3><h4 id="_1-3-1-构造器" tabindex="-1">1.3.1 构造器 <a class="header-anchor" href="#_1-3-1-构造器" aria-label="Permalink to &quot;1.3.1 构造器&quot;">​</a></h4><blockquote><p>💡 补充：包装类 和 基本数据类型的区别</p><ol><li><strong>类型</strong>： <ul><li>基本数据类型是Java语言内置的数据类型，如int、char、double、boolean等。它们是语言的基本构建块，存储简单的数据值。</li><li>包装类是用来包装基本数据类型的对象，如Integer、Character、Double、Boolean等。它们提供了一种将基本数据类型转换为对象的方式，以便在需要时可以进行对象操作。</li></ul></li><li><strong>存储方式</strong>： <ul><li>基本数据类型在内存中以值的形式存储，不具有对象的属性和方法。</li><li>包装类是对象，它们在内存中具有对象的特征，包括方法和属性。</li></ul></li><li><strong>空值（null）</strong>： <ul><li>基本数据类型不能存储空值，例如，int不能为null。</li><li>包装类可以存储空值，即可以将其设置为null。</li></ul></li></ol></blockquote>`,57),i=[y];function u(F,d,g,h,q,A){return n(),a("div",null,i)}const b=s(E,[["render",u]]);export{S as __pageData,b as default};
