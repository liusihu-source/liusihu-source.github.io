import{_ as e,o as a,c as s,Q as t}from"./chunks/framework.a7175731.js";const o="/assets/image-20240625212631572.d8a333b5.png",i="/assets/image-20240625212726444.61dfd367.png",x=JSON.parse('{"title":"word2Vec --笔记","description":"","frontmatter":{},"headers":[],"relativePath":"算法/词向量/word2Vec.md","filePath":"算法/词向量/word2Vec.md","lastUpdated":null}'),p={name:"算法/词向量/word2Vec.md"},c=t('<h1 id="word2vec-笔记" tabindex="-1">word2Vec --笔记 <a class="header-anchor" href="#word2vec-笔记" aria-label="Permalink to &quot;word2Vec --笔记&quot;">​</a></h1><blockquote><p>用特征向量表示单词的技术，且每两个词向量可计算余弦相似度表示他们之间的关系。</p><p>实现方法</p><ul><li>Skip-Gram（跳元模型） -- 中心词预测周围词</li><li>CBOW（Continues Bag of Words）-- 周围词预测中心词</li></ul><p>算法优化方法</p><ul><li>负例采样</li><li>层序Softmax（Hierarchical Softmax）</li></ul></blockquote><p>二维平面的两个向量余弦相似度</p><p>A(x1,y1)、B(x2,y2)，则相似度计算公式如下 cosine_similarity(A,B) =</p><p><img src="'+o+'" alt="image-20240625212631572"></p><p>n维空间的两个向量余弦相似度</p><p>A(x11,x12,...,x1n)，B(x21,x22,...,x2n)，则相似度计算公式如下 cosine_similarity(A,B) =</p><p><img src="'+i+'" alt="image-20240625212726444"></p><p>💡 余弦相似度的取值范围为 [−1,1]，余弦越大表示两个向量的夹角越小，余弦越小表示两向量的夹角越大。当两个向量的方向重合时余弦取最大值 1，当两个向量的方向完全相反余弦取最小值 -1</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;"></span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;"></span></span></code></pre></div>',10),l=[c];function r(n,d,_,m,u,h){return a(),s("div",null,l)}const f=e(p,[["render",r]]);export{x as __pageData,f as default};
