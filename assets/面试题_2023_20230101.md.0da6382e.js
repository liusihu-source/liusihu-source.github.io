import{_ as a,c as n,o as p,a as l,b as s}from"./app.8f8be3df.js";const h=JSON.parse('{"title":"前端面试题","description":"","frontmatter":{},"headers":[{"level":2,"title":"2023.01.01","slug":"_2023-01-01","link":"#_2023-01-01","children":[{"level":3,"title":"1.watch","slug":"_1-watch","link":"#_1-watch","children":[]},{"level":3,"title":"2.scoped","slug":"_2-scoped","link":"#_2-scoped","children":[]},{"level":3,"title":"3.v-model number","slug":"_3-v-model-number","link":"#_3-v-model-number","children":[]},{"level":3,"title":"4.循环","slug":"_4-循环","link":"#_4-循环","children":[]},{"level":3,"title":"5.RegExp（Regular Expression）","slug":"_5-regexp-regular-expression","link":"#_5-regexp-regular-expression","children":[]},{"level":3,"title":"6.变量及函数声明及赋值顺序","slug":"_6-变量及函数声明及赋值顺序","link":"#_6-变量及函数声明及赋值顺序","children":[]},{"level":3,"title":"7.空字符串false","slug":"_7-空字符串false","link":"#_7-空字符串false","children":[]}]},{"level":2,"title":"2023.01.02","slug":"_2023-01-02","link":"#_2023-01-02","children":[{"level":3,"title":"1.JS相等性判断","slug":"_1-js相等性判断","link":"#_1-js相等性判断","children":[]}]},{"level":2,"title":"2023.01.03","slug":"_2023-01-03","link":"#_2023-01-03","children":[{"level":3,"title":"1.this","slug":"_1-this","link":"#_1-this","children":[]},{"level":3,"title":"2.微任务 & 宏任务","slug":"_2-微任务-宏任务","link":"#_2-微任务-宏任务","children":[]}]},{"level":2,"title":"2023.01.04","slug":"_2023-01-04","link":"#_2023-01-04","children":[{"level":3,"title":"1.数组length","slug":"_1-数组length","link":"#_1-数组length","children":[]},{"level":3,"title":"2. let作用域","slug":"_2-let作用域","link":"#_2-let作用域","children":[]},{"level":3,"title":"3.indexOf() & includes()","slug":"_3-indexof-includes","link":"#_3-indexof-includes","children":[]},{"level":3,"title":"4.集合A -> 数组转化方式","slug":"_4-集合a-数组转化方式","link":"#_4-集合a-数组转化方式","children":[]}]},{"level":2,"title":"2023.01.05","slug":"_2023-01-05","link":"#_2023-01-05","children":[{"level":3,"title":"1.parentNode","slug":"_1-parentnode","link":"#_1-parentnode","children":[]}]},{"level":2,"title":"2023.01.06","slug":"_2023-01-06","link":"#_2023-01-06","children":[{"level":3,"title":"1.闭包","slug":"_1-闭包","link":"#_1-闭包","children":[]},{"level":3,"title":"2.共享原型链，堆地址相同","slug":"_2-共享原型链-堆地址相同","link":"#_2-共享原型链-堆地址相同","children":[]}]},{"level":2,"title":"2023.01.07","slug":"_2023-01-07","link":"#_2023-01-07","children":[{"level":3,"title":"1.","slug":"_1","link":"#_1","children":[]}]},{"level":2,"title":"2023.01.08","slug":"_2023-01-08","link":"#_2023-01-08","children":[{"level":3,"title":"1.对象类型","slug":"_1-对象类型","link":"#_1-对象类型","children":[]},{"level":3,"title":"2. ||  && 运算符","slug":"_2-运算符","link":"#_2-运算符","children":[]}]},{"level":2,"title":"2023.01.09","slug":"_2023-01-09","link":"#_2023-01-09","children":[{"level":3,"title":"1.appendChild() & removeChild()","slug":"_1-appendchild-removechild","link":"#_1-appendchild-removechild","children":[]}]},{"level":2,"title":"2023.01.10","slug":"_2023-01-10","link":"#_2023-01-10","children":[{"level":3,"title":"1.闭包、函数和变量提升练习题","slug":"_1-闭包、函数和变量提升练习题","link":"#_1-闭包、函数和变量提升练习题","children":[]}]},{"level":2,"title":"2023.01.11","slug":"_2023-01-11","link":"#_2023-01-11","children":[{"level":3,"title":"1.隐式转换","slug":"_1-隐式转换","link":"#_1-隐式转换","children":[]},{"level":3,"title":"2.变量、函数执行顺序","slug":"_2-变量、函数执行顺序","link":"#_2-变量、函数执行顺序","children":[]},{"level":3,"title":"3.变量回收机制","slug":"_3-变量回收机制","link":"#_3-变量回收机制","children":[]},{"level":3,"title":"4.页面跳转","slug":"_4-页面跳转","link":"#_4-页面跳转","children":[]}]},{"level":2,"title":"2023.01.12","slug":"_2023-01-12","link":"#_2023-01-12","children":[{"level":3,"title":"1.符号解释","slug":"_1-符号解释","link":"#_1-符号解释","children":[]},{"level":3,"title":"2.search","slug":"_2-search","link":"#_2-search","children":[]}]},{"level":2,"title":"2023.01.13","slug":"_2023-01-13","link":"#_2023-01-13","children":[{"level":3,"title":"1.noscript","slug":"_1-noscript","link":"#_1-noscript","children":[]}]},{"level":2,"title":"2023.01.14","slug":"_2023-01-14","link":"#_2023-01-14","children":[{"level":3,"title":"1.函数声明和函数表达式","slug":"_1-函数声明和函数表达式","link":"#_1-函数声明和函数表达式","children":[]},{"level":3,"title":"2.window小窗口","slug":"_2-window小窗口","link":"#_2-window小窗口","children":[]},{"level":3,"title":"3.hasOwnProperty","slug":"_3-hasownproperty","link":"#_3-hasownproperty","children":[]}]},{"level":2,"title":"2023.01.15","slug":"_2023-01-15","link":"#_2023-01-15","children":[{"level":3,"title":"1.parseFloat() & toFixed() & Math.round & toPrecision()","slug":"_1-parsefloat-tofixed-math-round-toprecision","link":"#_1-parsefloat-tofixed-math-round-toprecision","children":[]}]}],"relativePath":"面试题/2023/20230101.md","lastUpdated":1685614265000}'),o={name:"面试题/2023/20230101.md"},e=l(`<h1 id="前端面试题" tabindex="-1">前端面试题 <a class="header-anchor" href="#前端面试题" aria-hidden="true">#</a></h1><h2 id="_2023-01-01" tabindex="-1">2023.01.01 <a class="header-anchor" href="#_2023-01-01" aria-hidden="true">#</a></h2><h3 id="_1-watch" tabindex="-1">1.watch <a class="header-anchor" href="#_1-watch" aria-hidden="true">#</a></h3><ul><li>在不添加immediate：true时，默认不监听第一次赋值</li></ul><h3 id="_2-scoped" tabindex="-1">2.scoped <a class="header-anchor" href="#_2-scoped" aria-hidden="true">#</a></h3><ul><li>父组件样式不会渗透到子组件，但子组件会同时受到父 和 子组件的css影响</li><li>可通过 &gt;&gt;&gt; 或者 :deep 实现样式穿透</li><li>scoped原理是在标签上添加data-v属性，后使用属性选择器实现样式局部化</li></ul><h3 id="_3-v-model-number" tabindex="-1">3.v-model number <a class="header-anchor" href="#_3-v-model-number" aria-hidden="true">#</a></h3><ul><li>添加number修饰符后，赋值如果无法被parseFloat()解析，则返回原始的值</li></ul><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">input</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-model.number</span><span style="color:#89DDFF;"> = </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">age</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><h3 id="_4-循环" tabindex="-1">4.循环 <a class="header-anchor" href="#_4-循环" aria-hidden="true">#</a></h3><ul><li>for ... in 拿到迭代对象的下标</li><li>for ... of 拿到迭代对象的属性</li></ul><h3 id="_5-regexp-regular-expression" tabindex="-1">5.RegExp（Regular Expression） <a class="header-anchor" href="#_5-regexp-regular-expression" aria-hidden="true">#</a></h3><ul><li>正则表达式</li><li>有方法exec用于检索字符串中正则表达式的匹配</li></ul><h3 id="_6-变量及函数声明及赋值顺序" tabindex="-1">6.变量及函数声明及赋值顺序 <a class="header-anchor" href="#_6-变量及函数声明及赋值顺序" aria-hidden="true">#</a></h3><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> foo</span><span style="color:#89DDFF;">=</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">y</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">y</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">foo</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">y</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">y</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> num</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">foo</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>实际执行顺序如下</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> foo</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> num</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">foo</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">x</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">y</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#82AAFF;">foo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">x</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">y</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">num </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">foo</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><h3 id="_7-空字符串false" tabindex="-1">7.空字符串false <a class="header-anchor" href="#_7-空字符串false" aria-hidden="true">#</a></h3><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">LANGUAGE</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">JavaScript</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">	var a=&quot;undefined&quot;;</span></span>
<span class="line"><span style="color:#A6ACCD;">    var b=&quot;false&quot;;</span></span>
<span class="line"><span style="color:#A6ACCD;">    var c=&quot;&quot;;</span></span>
<span class="line"><span style="color:#A6ACCD;">    function assert(aVar)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">if</span><span style="color:#A6ACCD;">(aVar)      </span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#82AAFF;">alert</span><span style="color:#A6ACCD;">(</span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        else  </span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#82AAFF;">alert</span><span style="color:#A6ACCD;">(</span><span style="color:#FF9CAC;">false</span><span style="color:#A6ACCD;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    assert(a);</span></span>
<span class="line"><span style="color:#A6ACCD;">    assert(b);</span></span>
<span class="line"><span style="color:#A6ACCD;">    assert(c); </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>true, true, false</p><h2 id="_2023-01-02" tabindex="-1">2023.01.02 <a class="header-anchor" href="#_2023-01-02" aria-hidden="true">#</a></h2><h3 id="_1-js相等性判断" tabindex="-1">1.JS相等性判断 <a class="header-anchor" href="#_1-js相等性判断" aria-hidden="true">#</a></h3>`,22),t=s("table",null,[s("thead",null,[s("tr",null,[s("th",null,"x"),s("th",null,"y"),s("th",null,"=="),s("th",null,"===")])]),s("tbody",null,[s("tr",null,[s("td",null,"underfined"),s("td",null,"underfined"),s("td",null,"true"),s("td",null,"true")]),s("tr",null,[s("td",null,"null"),s("td",null,"null"),s("td",null,"true"),s("td",null,"true")]),s("tr",null,[s("td",null,"true"),s("td",null,"true"),s("td",null,"true"),s("td",null,"true")]),s("tr",null,[s("td",null,"false"),s("td",null,"false"),s("td",null,"true"),s("td",null,"true")]),s("tr",null,[s("td",null,'"foo"'),s("td",null,'"foo"'),s("td",null,"true"),s("td",null,"true")]),s("tr",null,[s("td",null,"0"),s("td",null,"0"),s("td",null,"true"),s("td",null,"true")]),s("tr",null,[s("td",null,"+0"),s("td",null,"-0"),s("td",null,"true"),s("td",null,"true")]),s("tr",null,[s("td",null,"0"),s("td",null,"false"),s("td",null,"true"),s("td",null,"false")]),s("tr",null,[s("td",null,'""'),s("td",null,"false"),s("td",null,"true"),s("td",null,"false")]),s("tr",null,[s("td",null,'""'),s("td",null,"0"),s("td",null,"true"),s("td",null,"false")]),s("tr",null,[s("td",null,'"0"'),s("td",null,"0"),s("td",null,"true"),s("td",null,"false")]),s("tr",null,[s("td",null,'"17"'),s("td",null,"17"),s("td",null,"true"),s("td",null,"false")]),s("tr",null,[s("td",null,"[1,2]"),s("td",null,'"1,2"'),s("td",null,"true"),s("td",null,"false")]),s("tr",null,[s("td",null,'new String("foo")'),s("td",null,'"foo"'),s("td",null,"true"),s("td",null,"false")]),s("tr",null,[s("td",null,"null"),s("td",null,"underfined"),s("td",null,"true"),s("td",null,"false")]),s("tr",null,[s("td",null,"null"),s("td",null,"false"),s("td",null,"false"),s("td",null,"false")]),s("tr",null,[s("td",null,"underfined"),s("td",null,"false"),s("td",null,"false"),s("td",null,"false")]),s("tr",null,[s("td",{"foo:":"",bar:""}),s("td",{"foo:":"",bar:""}),s("td",null,"false"),s("td",null,"false")]),s("tr",null,[s("td",null,'new String("foo")'),s("td",null,'new String("foo")'),s("td",null,"false"),s("td",null,"false")]),s("tr",null,[s("td",null,"0"),s("td",null,"null"),s("td",null,"false"),s("td",null,"false")]),s("tr",null,[s("td",null,"0"),s("td",null,"NaN"),s("td",null,"false"),s("td",null,"false")]),s("tr",null,[s("td",null,'"foo"'),s("td",null,"NaN"),s("td",null,"false"),s("td",null,"false")]),s("tr",null,[s("td",null,"NaN"),s("td",null,"NaN"),s("td",null,"false"),s("td",null,"false")])])],-1),r=l(`<h2 id="_2023-01-03" tabindex="-1">2023.01.03 <a class="header-anchor" href="#_2023-01-03" aria-hidden="true">#</a></h2><h3 id="_1-this" tabindex="-1">1.this <a class="header-anchor" href="#_1-this" aria-hidden="true">#</a></h3><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> color </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">green</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> test </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#F07178;">color</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">blue</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#82AAFF;">getColor</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">color</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">red</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#82AAFF;">alert</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">color</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> getColor </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> test</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getColor</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#82AAFF;">getColor</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">test</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getColor</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span></code></pre></div><p>green, blue</p><ul><li>因为alert()内部含有this，因此会找全局变量</li></ul><h3 id="_2-微任务-宏任务" tabindex="-1">2.微任务 &amp; 宏任务 <a class="header-anchor" href="#_2-微任务-宏任务" aria-hidden="true">#</a></h3><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">setTimeout</span><span style="color:#A6ACCD;">( </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">) )</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">resolve</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">b</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">b</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#82AAFF;">clearTimeout</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">5</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>1354</p><ul><li>先执行同步135，定时器为宏任务，Promise.then()为微任务，因此先执行微任务，微任务中清除了定时器，所以不会有2，其中宏任务和微任务均属于异步 <ul><li>宏任务：消息队列中等待被主线程执行的事件，宏任务执行会重新创建栈，宏任务执行结束后，栈也会随之销毁【】</li><li>微任务：需要被异步执行的函数。【】 总的执行顺序：宏任务中的同步任务 -&gt; 微任务当中的同步任务 -&gt;微任务中的异步任务 -&gt; 宏任务中的异步任务</li></ul></li></ul><h2 id="_2023-01-04" tabindex="-1">2023.01.04 <a class="header-anchor" href="#_2023-01-04" aria-hidden="true">#</a></h2><h3 id="_1-数组length" tabindex="-1">1.数组length <a class="header-anchor" href="#_1-数组length" aria-hidden="true">#</a></h3><ul><li>数组length属性总比数组最后一个元素的下标大1</li><li>对于后续更改length属性 <ul><li>如果新值 &lt; 当前值，数组将被截断</li><li>如果新值 &gt; 当前值，数组将被扩大，扩大的元素值为underfined</li></ul></li></ul><h3 id="_2-let作用域" tabindex="-1">2. let作用域 <a class="header-anchor" href="#_2-let作用域" aria-hidden="true">#</a></h3><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">setTimeout</span><span style="color:#F07178;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span><span style="color:#F78C6C;">100</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">setTimeout</span><span style="color:#F07178;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span><span style="color:#F78C6C;">100</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>0122</p><ul><li>let 有自己的作用域块，在for循环中满足每次i输出一次</li><li>var没有自己的作用域，又因为settimeout是异步的，所以当异步任务开始前，i已经是2了</li></ul><h3 id="_3-indexof-includes" tabindex="-1">3.indexOf() &amp; includes() <a class="header-anchor" href="#_3-indexof-includes" aria-hidden="true">#</a></h3><ul><li>indexOf 返回索引值，用于检查是否有该值，没有的话返回-1</li><li>includes 用于检查数组中是否有某个元素值</li></ul><h3 id="_4-集合a-数组转化方式" tabindex="-1">4.集合A -&gt; 数组转化方式 <a class="header-anchor" href="#_4-集合a-数组转化方式" aria-hidden="true">#</a></h3><ul><li>Array.from(A)</li><li>[].slice.apply(A) <ul><li>从已有的数组中返回选定的元素，该方法不会影响原数组</li><li>如果想删除数组中元素，需要使用splice，或者pop 或者shift等</li></ul></li><li>[...A] <ul><li>...展开运算符</li></ul></li><li>[].map.call(A, o =&gt; o)</li></ul><h2 id="_2023-01-05" tabindex="-1">2023.01.05 <a class="header-anchor" href="#_2023-01-05" aria-hidden="true">#</a></h2><h3 id="_1-parentnode" tabindex="-1">1.parentNode <a class="header-anchor" href="#_1-parentnode" aria-hidden="true">#</a></h3><ul><li>返回指定节点再DOM树中的父节点</li><li>一个元素节点的父节点可能是元素element节点，可能是文档Document节点，也可能是文档碎片DcoumentFragment节点</li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">//删除指定节点</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;">(node</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">parentNode) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#A6ACCD;">node</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">parentNode</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">removeChild</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">node</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//如果该节点刚刚被建立，没有被插入到DOM树中，该节点的parentNode也返回null</span></span>
<span class="line"></span></code></pre></div><h2 id="_2023-01-06" tabindex="-1">2023.01.06 <a class="header-anchor" href="#_2023-01-06" aria-hidden="true">#</a></h2><h3 id="_1-闭包" tabindex="-1">1.闭包 <a class="header-anchor" href="#_1-闭包" aria-hidden="true">#</a></h3><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Foo</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#A6ACCD;">doucment</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">write</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> f1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Foo</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">f2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Foo</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#82AAFF;">f1</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">f1</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">f2</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span></code></pre></div><p>010 第二次调用f1()，因为return返回了1，所以形成了闭包，相应的作用域链也会保存在内存中。</p><h3 id="_2-共享原型链-堆地址相同" tabindex="-1">2.共享原型链，堆地址相同 <a class="header-anchor" href="#_2-共享原型链-堆地址相同" aria-hidden="true">#</a></h3><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Father</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">age</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">age</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">age</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Son</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">age</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">Father</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#FFCB6B;">Son</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Father</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#FFCB6B;">Father</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getAge</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){</span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">40</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;}</span></span>
<span class="line"><span style="color:#FFCB6B;">Son</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getAge</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){</span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">18</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;}</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> father </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Father</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">40</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> son </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Son</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">18</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">son</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getAge</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">father</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getAge</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>18 18 因为有两个原型链的地址相同，所以以最终赋值结果输出。</p><h2 id="_2023-01-07" tabindex="-1">2023.01.07 <a class="header-anchor" href="#_2023-01-07" aria-hidden="true">#</a></h2><h3 id="_1" tabindex="-1">1. <a class="header-anchor" href="#_1" aria-hidden="true">#</a></h3><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">//A</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> res </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> arr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">filter</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">val1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">val2</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">val1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(res)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//B</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> res </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> arr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">filter</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">val1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">val2</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">val1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(res)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//C</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> res </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> arr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">filter</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">val1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">val2</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">val1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(res)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//D</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> res </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> arr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">map</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">val1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">val2</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">val1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(res)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><ul><li>filter用于筛选满足要求的数组元素，并返回新的数组，所以结果[20,12]</li><li>some用于监测是否有满足条件的元素，存在则返回true，所以返回一个true</li><li>every用于监测所有元素是否都符合条件，都符合才是true，所以结果false</li><li>map用于对元素单独判断，返回新的数组，所以结果[false,true,false,true,false]</li></ul><h2 id="_2023-01-08" tabindex="-1">2023.01.08 <a class="header-anchor" href="#_2023-01-08" aria-hidden="true">#</a></h2><h3 id="_1-对象类型" tabindex="-1">1.对象类型 <a class="header-anchor" href="#_1-对象类型" aria-hidden="true">#</a></h3><ul><li>typeof <ul><li>返回一个字符串，表示未经计算的操作数的类型，下面是typeof可能返回值</li></ul></li></ul><table><thead><tr><th>类型</th><th>结果</th></tr></thead><tbody><tr><td>undefined</td><td>&quot;underfined&quot;</td></tr><tr><td>Null</td><td>&quot;object&quot;</td></tr><tr><td>Boolean</td><td>&quot;boolean&quot;</td></tr><tr><td>Number</td><td>&quot;number&quot;</td></tr><tr><td>String</td><td>&quot;string&quot;</td></tr><tr><td>Bigint</td><td>&quot;bigint&quot;</td></tr><tr><td>Symbol</td><td>&quot;symbol&quot;</td></tr><tr><td>Function</td><td>&quot;function&quot;</td></tr><tr><td>其他任何对象</td><td>&quot;object&quot;</td></tr></tbody></table><ul><li>instance of <ul><li>用于检测构造函数的prototype是否出现在某个实例对象的原型链上</li><li>如 object1 instanceof constructor 或者 [] instanceof Array</li></ul></li></ul><h3 id="_2-运算符" tabindex="-1">2. || &amp;&amp; 运算符 <a class="header-anchor" href="#_2-运算符" aria-hidden="true">#</a></h3><ul><li>|| <ul><li>如果第一个结果是true，则返回该操作数的值；如果false则一直迭代，直到存在结果为真，否则返回最后一个元素</li><li>如 let flag1 = null || underfined，因为都是false，所以返回最后的undefined</li></ul></li><li>&amp;&amp; <ul><li>如果有一个值为false，则返回该值；当所有值都为true，则返回最后一个操作数</li><li>如let flag2 = null &amp;&amp; undefined，因为第一个就是false，所以返回第一个null</li></ul></li></ul><h2 id="_2023-01-09" tabindex="-1">2023.01.09 <a class="header-anchor" href="#_2023-01-09" aria-hidden="true">#</a></h2><h3 id="_1-appendchild-removechild" tabindex="-1">1.appendChild() &amp; removeChild() <a class="header-anchor" href="#_1-appendchild-removechild" aria-hidden="true">#</a></h3><ul><li>appendChild() <ul><li>在该元素的最后添加一个子节点</li></ul></li></ul><h2 id="_2023-01-10" tabindex="-1">2023.01.10 <a class="header-anchor" href="#_2023-01-10" aria-hidden="true">#</a></h2><h3 id="_1-闭包、函数和变量提升练习题" tabindex="-1">1.闭包、函数和变量提升练习题 <a class="header-anchor" href="#_1-闭包、函数和变量提升练习题" aria-hidden="true">#</a></h3><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">a</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">20</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)()</span></span>
<span class="line"></span></code></pre></div><p>会输出函数a的内容</p><ul><li>首先是变量提升，a = undefined</li><li>之后由于函数提升优先级高于变量赋值，所以先a被赋值函数</li><li>闭包函数，所以内部即刻输出 <ul><li>其中 a = 20，意思是将整个函数赋值为20，并不是新的变量a</li></ul></li><li>输出a的函数体后，最后才是全局a再次赋值为10</li></ul><h2 id="_2023-01-11" tabindex="-1">2023.01.11 <a class="header-anchor" href="#_2023-01-11" aria-hidden="true">#</a></h2><h3 id="_1-隐式转换" tabindex="-1">1.隐式转换 <a class="header-anchor" href="#_1-隐式转换" aria-hidden="true">#</a></h3><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> foo </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">10</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(foo) </span><span style="color:#676E95;font-style:italic;">//102</span></span>
<span class="line"></span></code></pre></div><ul><li>&#39;+&#39; <ul><li>第一种含义是字符串拼接，第二种是加减法</li><li>上述代码块，如果一个是字符串，默认会转成字符串</li></ul></li><li>&#39;-&#39; <ul><li>只有一个加减法的含义，因此是不是字符串了</li></ul></li><li>补充underfined会被转为NAN，null会转为0，此外0也可以作为除数</li></ul><h3 id="_2-变量、函数执行顺序" tabindex="-1">2.变量、函数执行顺序 <a class="header-anchor" href="#_2-变量、函数执行顺序" aria-hidden="true">#</a></h3><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fn</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#82AAFF;">b</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">b</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#82AAFF;">fn</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span></code></pre></div><p>undefined</p><ul><li>虽然return可以终止函数，但如果后面有变量 和 函数声明，仍然存在变量提升和函数提升</li><li>当调用函数b时，需要查找a的值。根据作用域链查找规则，要在函数内部查找已经声明的局部变量a。但虽然a变量声明提高了，但是值却没有赋值，所以是underfined</li></ul><h3 id="_3-变量回收机制" tabindex="-1">3.变量回收机制 <a class="header-anchor" href="#_3-变量回收机制" aria-hidden="true">#</a></h3><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> add </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">++;</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">add</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>上述代码执行后，有 3 个变量没有被回收</p><ul><li>首先全局变量 i 没有回收，其中第二行的var 没有作用，只是做了更新赋值</li><li>第二个函数add变量</li><li>add函数内部变量i，因为该闭包中的局部变量倍 return的结果作用域引用，所以没有被回收</li></ul><h3 id="_4-页面跳转" tabindex="-1">4.页面跳转 <a class="header-anchor" href="#_4-页面跳转" aria-hidden="true">#</a></h3><ul><li>window.history.forward() //下一个页面</li><li>window.history.back() //上一个页面</li><li>window.history.go() //相对当前页面到指定页面 <ul><li>go(1) //相当于forward</li><li>go(-1) //相当于back</li></ul></li></ul><h2 id="_2023-01-12" tabindex="-1">2023.01.12 <a class="header-anchor" href="#_2023-01-12" aria-hidden="true">#</a></h2><h3 id="_1-符号解释" tabindex="-1">1.符号解释 <a class="header-anchor" href="#_1-符号解释" aria-hidden="true">#</a></h3><ul><li>&#39;*&#39; 表示出现零到多次</li><li>&#39;+&#39;表示出现1到多次</li><li>&#39;？&#39;表示出现0词次或者1次</li><li>&#39;.&#39;表示除了\\n意外的任意字符</li><li>{n}表示出现n次</li><li>{n,}表示出现n到多次</li><li>{n,m}表示出现n到m次</li></ul><h3 id="_2-search" tabindex="-1">2.search <a class="header-anchor" href="#_2-search" aria-hidden="true">#</a></h3><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> str </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">what is this</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> x </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> str</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">search</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">is</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(x) </span><span style="color:#676E95;font-style:italic;">//5</span></span>
<span class="line"></span></code></pre></div><p>search从左边第一个字符开始查找，此时下标为0. is中的i在第六个字符位置，下标是5，所以输出 5</p><h2 id="_2023-01-13" tabindex="-1">2023.01.13 <a class="header-anchor" href="#_2023-01-13" aria-hidden="true">#</a></h2><h3 id="_1-noscript" tabindex="-1">1.noscript <a class="header-anchor" href="#_1-noscript" aria-hidden="true">#</a></h3><p>noscript标签用来定义在脚本未被执行时候的替代内容</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#A6ACCD;">...</span></span>
<span class="line"><span style="color:#A6ACCD;">  ...</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">text/javascript</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> &lt;!--</span></span>
<span class="line"><span style="color:#A6ACCD;"> document.write(&quot;Hello World!&quot;)</span></span>
<span class="line"><span style="color:#A6ACCD;"> //--&gt; </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;&lt;</span><span style="color:#F07178;">noscript</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Your browser does not support JavaScript!</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">noscript</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">...</span></span>
<span class="line"><span style="color:#A6ACCD;">  ...</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><h2 id="_2023-01-14" tabindex="-1">2023.01.14 <a class="header-anchor" href="#_2023-01-14" aria-hidden="true">#</a></h2><h3 id="_1-函数声明和函数表达式" tabindex="-1">1.函数声明和函数表达式 <a class="header-anchor" href="#_1-函数声明和函数表达式" aria-hidden="true">#</a></h3><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sum</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">b</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">b</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//函数声明</span></span>
<span class="line"></span></code></pre></div><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> sum </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">b</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">b</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//函数表达式</span></span>
<span class="line"></span></code></pre></div><h3 id="_2-window小窗口" tabindex="-1">2.window小窗口 <a class="header-anchor" href="#_2-window小窗口" aria-hidden="true">#</a></h3><ul><li>window.confirm() 确认框</li><li>window.alert() 警示框</li><li>window.prompt() 对话框</li><li>window.open() 打开新的窗口</li></ul><h3 id="_3-hasownproperty" tabindex="-1">3.hasOwnProperty <a class="header-anchor" href="#_3-hasownproperty" aria-hidden="true">#</a></h3><ul><li>该方法用来检测指定的属性是否在当前对象的实例中</li></ul><h2 id="_2023-01-15" tabindex="-1">2023.01.15 <a class="header-anchor" href="#_2023-01-15" aria-hidden="true">#</a></h2><h3 id="_1-parsefloat-tofixed-math-round-toprecision" tabindex="-1">1.parseFloat() &amp; toFixed() &amp; Math.round &amp; toPrecision() <a class="header-anchor" href="#_1-parsefloat-tofixed-math-round-toprecision" aria-hidden="true">#</a></h3><ul><li>parseFloat() 返回一个浮点数 <ul><li>parseFloat(0.2 + 0.4) <a href="/0.600000000001">//0.600000000001</a></li></ul></li><li>toFixed() 把数字转换为字符串，结果的小数点后有指定位数的数字 <ul><li>parseFloat((0.2 + 0.4).toFixed(1)) //&#39;0.6&#39;</li></ul></li><li>Math.round 返回四舍五入的整数 <ul><li>Math.round(0.2 + 0.4) //1</li></ul></li><li>toPrecision 把数字格式化为指定的长度 <ul><li>parseFloat((0.2 + 0.6).toPrecision(1)) <a href="/0.8">//0.8</a></li></ul></li></ul>`,85),c=[e,t,r];function i(y,F,D,A,C,d){return p(),n("div",null,c)}const f=a(o,[["render",i]]);export{h as __pageData,f as default};
