import{_ as s,o as a,c as l,Q as n}from"./chunks/framework.a7175731.js";const h=JSON.parse('{"title":"JavaScript面试题 --笔记","description":"","frontmatter":{},"headers":[],"relativePath":"面试题/2023/202310JavaScript.md","filePath":"面试题/2023/202310JavaScript.md","lastUpdated":null}'),p={name:"面试题/2023/202310JavaScript.md"},o=n(`<h1 id="javascript面试题-笔记" tabindex="-1">JavaScript面试题 --笔记 <a class="header-anchor" href="#javascript面试题-笔记" aria-label="Permalink to &quot;JavaScript面试题 --笔记&quot;">​</a></h1><h2 id="_202310" tabindex="-1">202310 <a class="header-anchor" href="#_202310" aria-label="Permalink to &quot;202310&quot;">​</a></h2><h5 id="_1、javascript-有哪些垃圾回收机制" tabindex="-1">1、JavaScript 有哪些垃圾回收机制 <a class="header-anchor" href="#_1、javascript-有哪些垃圾回收机制" aria-label="Permalink to &quot;1、JavaScript 有哪些垃圾回收机制&quot;">​</a></h5><ol><li><strong>标记-清除（Mark and Sweep）</strong>：这是JavaScript最常见的垃圾回收算法。它通过标记不再使用的对象，然后清除（删除）它们来工作。算法有两个阶段：标记阶段，其中标记不再需要的对象，以及清除阶段，在此阶段清除已标记的对象。这是JavaScript中最常用的垃圾回收机制。</li><li><strong>引用计数（Reference Counting）</strong>⚠️ ：虽然不常见，但某些JavaScript引擎仍然使用引用计数。该算法会跟踪对象的引用次数，一旦引用次数为零，对象就被认为是不再需要的，并被回收。但这种方法有缺点，无法正确处理循环引用，因此在现代JavaScript引擎中并不常见。</li></ol><h5 id="_2、列举几种常见类型的dom节点" tabindex="-1">2、列举几种常见类型的DOM节点 <a class="header-anchor" href="#_2、列举几种常见类型的dom节点" aria-label="Permalink to &quot;2、列举几种常见类型的DOM节点&quot;">​</a></h5><ul><li>文档节点：整个文档是一个文档节点</li><li>元素节点：每个html标签是一个元素节点</li><li>属性节点：每个html元素中的属性是一个属性节点</li><li>文本节点：每个html元素中的文本时文本节点</li></ul><h5 id="_3、script-标签中的defer-和-async区别" tabindex="-1">3、script 标签中的defer 和 async区别 <a class="header-anchor" href="#_3、script-标签中的defer-和-async区别" aria-label="Permalink to &quot;3、script 标签中的defer 和 async区别&quot;">​</a></h5><ol><li><strong><code>defer</code> 属性</strong>： <ul><li><code>defer</code> 属性表示脚本将被推迟执行，直到文档完全解析为止，但在 <code>DOMContentLoaded</code> 事件之前执行。这意味着脚本不会阻塞文档的解析，允许文档的内容在加载脚本的同时继续渲染。</li><li>多个带有 <code>defer</code> 属性的脚本将按它们在文档中出现的顺序依次执行。</li><li>适合用于需要在文档加载完成前不立即执行的脚本，例如初始化应用程序的代码。</li></ul></li></ol><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">script src</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;your-script.js&quot;</span><span style="color:#E1E4E8;"> defer</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">&lt;/</span><span style="color:#B392F0;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">script src</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;your-script.js&quot;</span><span style="color:#24292E;"> defer</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">&lt;/</span><span style="color:#6F42C1;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><ol><li><strong><code>async</code> 属性</strong>： <ul><li><code>async</code> 属性表示脚本是异步加载的，不会阻塞文档的解析。脚本会在下载完毕后尽快执行，而不考虑文档的解析状态。</li><li>多个带有 <code>async</code> 属性的脚本无法保证执行顺序，它们将在下载完成后立即执行。</li><li>适合用于无需等待其他脚本或文档解析的脚本，例如跟踪分析代码。</li></ul></li></ol><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">script src</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;your-script.js&quot;</span><span style="color:#E1E4E8;"> async</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">&lt;/</span><span style="color:#B392F0;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">script src</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;your-script.js&quot;</span><span style="color:#24292E;"> async</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">&lt;/</span><span style="color:#6F42C1;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h5 id="_4、介绍javascript-中的-call-和-apply-方法" tabindex="-1">4、介绍javascript 中的 call（） 和 apply()方法 <a class="header-anchor" href="#_4、介绍javascript-中的-call-和-apply-方法" aria-label="Permalink to &quot;4、介绍javascript 中的 call（） 和 apply()方法&quot;">​</a></h5><p><code>call()</code> 和 <code>apply()</code> 是 JavaScript 中用于调用函数的方法，它们允许你显式设置函数的 <code>this</code> 值，并传递参数。它们的主要区别在于参数的传递方式。</p><ul><li>call案例</li></ul><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">person</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  firstName: </span><span style="color:#9ECBFF;">&#39;John&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  lastName: </span><span style="color:#9ECBFF;">&#39;Doe&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">greet</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">greeting</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`\${</span><span style="color:#E1E4E8;">greeting</span><span style="color:#9ECBFF;">}, \${</span><span style="color:#79B8FF;">this</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">firstName</span><span style="color:#9ECBFF;">} \${</span><span style="color:#79B8FF;">this</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">lastName</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">greet.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(person, </span><span style="color:#9ECBFF;">&#39;Hello&#39;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 输出: Hello, John Doe</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">person</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  firstName: </span><span style="color:#032F62;">&#39;John&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  lastName: </span><span style="color:#032F62;">&#39;Doe&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">greet</span><span style="color:#24292E;">(</span><span style="color:#E36209;">greeting</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`\${</span><span style="color:#24292E;">greeting</span><span style="color:#032F62;">}, \${</span><span style="color:#005CC5;">this</span><span style="color:#032F62;">.</span><span style="color:#24292E;">firstName</span><span style="color:#032F62;">} \${</span><span style="color:#005CC5;">this</span><span style="color:#032F62;">.</span><span style="color:#24292E;">lastName</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">greet.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(person, </span><span style="color:#032F62;">&#39;Hello&#39;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 输出: Hello, John Doe</span></span></code></pre></div><ul><li>apply案例</li></ul><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> b;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">args</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">result</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> add.</span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, args); </span><span style="color:#6A737D;">// 传递参数数组</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(result); </span><span style="color:#6A737D;">// 输出: 5</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#E36209;">a</span><span style="color:#24292E;">, </span><span style="color:#E36209;">b</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> b;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">args</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">result</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> add.</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, args); </span><span style="color:#6A737D;">// 传递参数数组</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(result); </span><span style="color:#6A737D;">// 输出: 5</span></span></code></pre></div>`,17),e=[o];function t(c,r,y,i,E,d){return a(),l("div",null,e)}const u=s(p,[["render",t]]);export{h as __pageData,u as default};
