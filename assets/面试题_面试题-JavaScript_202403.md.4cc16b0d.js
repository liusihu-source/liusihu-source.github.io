import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.a7175731.js";const o="/assets/image-20240312211630615.a643bfbb.png",h=JSON.parse('{"title":"面试题--JS","description":"","frontmatter":{},"headers":[],"relativePath":"面试题/面试题-JavaScript/202403.md","filePath":"面试题/面试题-JavaScript/202403.md","lastUpdated":null}'),p={name:"面试题/面试题-JavaScript/202403.md"},e=l(`<h1 id="面试题-js" tabindex="-1">面试题--JS <a class="header-anchor" href="#面试题-js" aria-label="Permalink to &quot;面试题--JS&quot;">​</a></h1><h3 id="_1、exec" tabindex="-1">1、exec <a class="header-anchor" href="#_1、exec" aria-label="Permalink to &quot;1、exec&quot;">​</a></h3><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec" target="_blank" rel="noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec</a></p></blockquote><p><strong><code>exec()</code></strong> 方法在一个指定字符串中执行一个搜索匹配。返回一个结果数组或 null</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">regex1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RegExp</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;foo*&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;g&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">str1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;table football, foosball&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> array1;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> ((array1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> regex1.</span><span style="color:#B392F0;">exec</span><span style="color:#E1E4E8;">(str1)) </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`Found \${</span><span style="color:#E1E4E8;">array1</span><span style="color:#9ECBFF;">[</span><span style="color:#79B8FF;">0</span><span style="color:#9ECBFF;">]</span><span style="color:#9ECBFF;">}. Next starts at \${</span><span style="color:#E1E4E8;">regex1</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">lastIndex</span><span style="color:#9ECBFF;">}.\`</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(array1.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// Expected output: &quot;Found foo. Next starts at 9.&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// Expected output: &quot;Found foo. Next starts at 19.&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">regex1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RegExp</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;foo*&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;g&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;table football, foosball&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> array1;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">while</span><span style="color:#24292E;"> ((array1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> regex1.</span><span style="color:#6F42C1;">exec</span><span style="color:#24292E;">(str1)) </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`Found \${</span><span style="color:#24292E;">array1</span><span style="color:#032F62;">[</span><span style="color:#005CC5;">0</span><span style="color:#032F62;">]</span><span style="color:#032F62;">}. Next starts at \${</span><span style="color:#24292E;">regex1</span><span style="color:#032F62;">.</span><span style="color:#24292E;">lastIndex</span><span style="color:#032F62;">}.\`</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(array1.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Expected output: &quot;Found foo. Next starts at 9.&quot;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Expected output: &quot;Found foo. Next starts at 19.&quot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="_2、math-round" tabindex="-1">2、Math.round() <a class="header-anchor" href="#_2、math-round" aria-label="Permalink to &quot;2、Math.round()&quot;">​</a></h3><p><strong><code>Math.round()</code></strong> 函数返回一个数字四舍五入后最接近的整数</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">x </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">round</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">20.49</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">//20</span></span>
<span class="line"><span style="color:#E1E4E8;">x </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">round</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">20.5</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">//21</span></span>
<span class="line"><span style="color:#E1E4E8;">x </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">round</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">20.5</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">//-20</span></span>
<span class="line"><span style="color:#E1E4E8;">x </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">round</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">20.51</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">//-21</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">round</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">20.49</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">//20</span></span>
<span class="line"><span style="color:#24292E;">x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">round</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">20.5</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">//21</span></span>
<span class="line"><span style="color:#24292E;">x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">round</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">20.5</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">//-20</span></span>
<span class="line"><span style="color:#24292E;">x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">round</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">20.51</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">//-21</span></span></code></pre></div><h3 id="_3、原型函数及原型链案例题" tabindex="-1">3、原型函数及原型链案例题 <a class="header-anchor" href="#_3、原型函数及原型链案例题" aria-label="Permalink to &quot;3、原型函数及原型链案例题&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">A</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {n:</span><span style="color:#79B8FF;">4399</span><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">B</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(){</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.n </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">9999</span><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">C</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(){</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> n </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">8888</span><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#79B8FF;">B</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">A</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#79B8FF;">C</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">A</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">B</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> c </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">C</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#79B8FF;">A</span><span style="color:#E1E4E8;">.n</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(b.n);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(c.n);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">A</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {n:</span><span style="color:#005CC5;">4399</span><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">B</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(){</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.n </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">9999</span><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">C</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(){</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> n </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">8888</span><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#005CC5;">B</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">A</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#005CC5;">C</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">A</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">B</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">C</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#005CC5;">A</span><span style="color:#24292E;">.n</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(b.n);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(c.n);</span></span></code></pre></div><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//9999 4000</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//9999 4000</span></span></code></pre></div><p><strong>解释如下：</strong></p><p>这段 JavaScript 代码主要涉及对象、构造函数、原型链等概念。下面逐行解释代码的作用：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">A</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {n:</span><span style="color:#79B8FF;">4399</span><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">A</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {n:</span><span style="color:#005CC5;">4399</span><span style="color:#24292E;">};</span></span></code></pre></div><ul><li>创建一个名为 <code>A</code> 的对象，其中有一个属性 <code>n</code>，其值为 <code>4399</code>。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">B</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(){</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.n </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">9999</span><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">B</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(){</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.n </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">9999</span><span style="color:#24292E;">};</span></span></code></pre></div><ul><li>创建一个构造函数 <code>B</code>，该构造函数在实例化时会将其属性 <code>n</code> 的值设置为 <code>9999</code>。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">C</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(){</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> n </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">8888</span><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">C</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(){</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> n </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">8888</span><span style="color:#24292E;">};</span></span></code></pre></div><ul><li>创建一个构造函数 <code>C</code>，但该构造函数内部没有为实例设置属性 <code>n</code>。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">B</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">A</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#79B8FF;">C</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">A</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">B</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">A</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#005CC5;">C</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">A</span><span style="color:#24292E;">;</span></span></code></pre></div><ul><li>将构造函数 <code>B</code> 和构造函数 <code>C</code> 的原型（prototype）都设置为对象 <code>A</code>。这样，它们的原型链上都有对象 <code>A</code>，可以继承 <code>A</code> 的属性。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">B</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">B</span><span style="color:#24292E;">();</span></span></code></pre></div><ul><li>通过构造函数 <code>B</code> 创建一个实例 <code>b</code>。由于 <code>B</code> 的构造函数将属性 <code>n</code> 设置为 <code>9999</code>，所以 <code>b.n</code> 的值为 <code>9999</code>。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> c </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">C</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">C</span><span style="color:#24292E;">();</span></span></code></pre></div><ul><li>通过构造函数 <code>C</code> 创建一个实例 <code>c</code>。由于 <code>C</code> 的构造函数内部没有设置属性 <code>n</code>，所以 <code>c.n</code> 的值为 <code>undefined</code>。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">A</span><span style="color:#E1E4E8;">.n</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">A</span><span style="color:#24292E;">.n</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span></code></pre></div><ul><li>将对象 <code>A</code> 的属性 <code>n</code> 的值增加 1，现在 <code>A.n</code> 的值为 <code>4400</code>。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(b.n);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(b.n);</span></span></code></pre></div><ul><li>输出实例 <code>b</code> 的属性 <code>n</code>，即 <code>9999</code>。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(c.n);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(c.n);</span></span></code></pre></div><ul><li>输出实例 <code>c</code> 的属性 <code>n</code>，即 <code>4400</code>。由于 <code>C.prototype</code> 被设置为 <code>A</code>，实例 <code>c</code> 的原型链上有 <code>A</code>，所以它继承了 <code>A.n</code> 的变化。</li></ul><h3 id="_4、浮点数相关方法" tabindex="-1">4、浮点数相关方法 <a class="header-anchor" href="#_4、浮点数相关方法" aria-label="Permalink to &quot;4、浮点数相关方法&quot;">​</a></h3><p><img src="`+o+`" alt="image-20240312211630615"></p><ul><li>parseFloat 解析字符串，并返回一个浮点数</li><li>toFixed 把数字转换为字符串，可指定小数点后位置</li><li>math.round 返回一个最接近的整数</li><li>toPrecision 把数字格式化为指定的长度</li></ul><h3 id="_5、undefined-加法" tabindex="-1">5、undefined 加法 <a class="header-anchor" href="#_5、undefined-加法" aria-label="Permalink to &quot;5、undefined 加法&quot;">​</a></h3><p>undefined + 1 结果是NaN</p><h3 id="_6、冒泡行为" tabindex="-1">6、冒泡行为 <a class="header-anchor" href="#_6、冒泡行为" aria-label="Permalink to &quot;6、冒泡行为&quot;">​</a></h3><h3 id="_7、sort方法" tabindex="-1">7、sort方法 <a class="header-anchor" href="#_7、sort方法" aria-label="Permalink to &quot;7、sort方法&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">arr</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">69</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">arr.</span><span style="color:#B392F0;">sort</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;">a</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">b) </span><span style="color:#6A737D;">//升序排列</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(arr)</span></span>
<span class="line"><span style="color:#6A737D;">//[1,4,6,8,10,69] </span></span>
<span class="line"><span style="color:#E1E4E8;">arr.</span><span style="color:#B392F0;">sort</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;">b</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">a) </span><span style="color:#6A737D;">//降序排列</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(arr)</span></span>
<span class="line"><span style="color:#6A737D;">//[69,10,8,6,4,1]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">arr</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">69</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">6</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">8</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">arr.</span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">((</span><span style="color:#E36209;">a</span><span style="color:#24292E;">,</span><span style="color:#E36209;">b</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">a</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">b) </span><span style="color:#6A737D;">//升序排列</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(arr)</span></span>
<span class="line"><span style="color:#6A737D;">//[1,4,6,8,10,69] </span></span>
<span class="line"><span style="color:#24292E;">arr.</span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">((</span><span style="color:#E36209;">a</span><span style="color:#24292E;">,</span><span style="color:#E36209;">b</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">b</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">a) </span><span style="color:#6A737D;">//降序排列</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(arr)</span></span>
<span class="line"><span style="color:#6A737D;">//[69,10,8,6,4,1]</span></span></code></pre></div><h3 id="_8、包装类及constructor" tabindex="-1">8、包装类及constructor <a class="header-anchor" href="#_8、包装类及constructor" aria-label="Permalink to &quot;8、包装类及constructor&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Object</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1.0</span><span style="color:#E1E4E8;">).</span><span style="color:#79B8FF;">constructor</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">Number[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">123</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Object</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1.0</span><span style="color:#E1E4E8;">).</span><span style="color:#79B8FF;">constructor</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Object</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1.0</span><span style="color:#24292E;">).</span><span style="color:#005CC5;">constructor</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">Number[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">123</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Object</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1.0</span><span style="color:#24292E;">).</span><span style="color:#005CC5;">constructor</span><span style="color:#24292E;">;</span></span></code></pre></div><ul><li><code>Object(1.0).constructor</code><ul><li><code>Object(1.0)</code>会将数字<code>1.0</code>转换为一个Number对象。</li><li><code>.constructor</code>属性引用了创建此对象实例的原始构造函数，对于<code>Number</code>对象来说，这就是<code>Number</code>构造函数本身。</li><li><code>1 in Object(1.0).constructor;</code>这段代码检查<code>Number</code>构造函数是否有名为<code>1</code>的属性。<code>in</code>操作符用于检查对象是否具有给定的属性。</li></ul></li><li><code>Number[1] = 123;</code><ul><li>这行代码为<code>Number</code>构造函数添加了一个名为<code>1</code>的属性，并将其值设置为<code>123</code>。</li></ul></li><li><code>1 in Object(1.0).constructor;</code><ul><li>经过第二行代码的操作之后，<code>Number</code>构造函数现在确实拥有一个名为<code>1</code>的属性。因此，当再次执行<code>1 in Object(1.0).constructor;</code>时，这将会检查<code>Number</code>构造函数是否有名为<code>1</code>的属性，考虑到刚刚添加了这个属性，这个表达式的结果将是<code>true</code>。</li></ul></li></ul><p>所以最初返回false，后边添加后返回true</p><h3 id="_9、变量提升及函数赋值" tabindex="-1">9、变量提升及函数赋值 <a class="header-anchor" href="#_9、变量提升及函数赋值" aria-label="Permalink to &quot;9、变量提升及函数赋值&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> x</span><span style="color:#F97583;">=</span><span style="color:#B392F0;">foo</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">foo</span><span style="color:#F97583;">=function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">foo</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;foobar&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> x;</span></span>
<span class="line"><span style="color:#E1E4E8;">})();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> x</span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;">foo</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">foo</span><span style="color:#D73A49;">=function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">foo</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;foobar&quot;</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> x;</span></span>
<span class="line"><span style="color:#24292E;">})();</span></span></code></pre></div><p>上述代码中，相当于如下的执行顺序</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> foo;</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> x </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">foo</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#B392F0;">foo</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">foo</span><span style="color:#E1E4E8;">(){}</span></span>
<span class="line"><span style="color:#6A737D;">//在给x赋值foo返回值时候，因为foo还没有被定义，所以 //foo is not a functino</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> foo;</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">foo</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#6F42C1;">foo</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">foo</span><span style="color:#24292E;">(){}</span></span>
<span class="line"><span style="color:#6A737D;">//在给x赋值foo返回值时候，因为foo还没有被定义，所以 //foo is not a functino</span></span></code></pre></div><h3 id="_10、对象属性描述符" tabindex="-1">10、对象属性描述符 <a class="header-anchor" href="#_10、对象属性描述符" aria-label="Permalink to &quot;10、对象属性描述符&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> obj </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {brand:</span><span style="color:#9ECBFF;">&#39;华为&#39;</span><span style="color:#E1E4E8;">,price:</span><span style="color:#79B8FF;">1999</span><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#E1E4E8;">Object.</span><span style="color:#B392F0;">defineProperty</span><span style="color:#E1E4E8;">(obj,</span><span style="color:#9ECBFF;">&#39;id&#39;</span><span style="color:#E1E4E8;">,{value:</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#6A737D;">//给obj添加一个id属性，此时obj = { brand:&#39;华为&#39;,price:1999，id:1 }；</span></span>
<span class="line"><span style="color:#6A737D;">//此时id的其他属性都是false，不可被遍历，不可写，不可配置</span></span>
<span class="line"><span style="color:#E1E4E8;">Object.</span><span style="color:#B392F0;">defineProperty</span><span style="color:#E1E4E8;">(obj,</span><span style="color:#9ECBFF;">&#39;price&#39;</span><span style="color:#E1E4E8;">,{configurable:</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#6A737D;">//configurable:false表示price不可配置，也代表不可被delete删除</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(Object.</span><span style="color:#B392F0;">keys</span><span style="color:#E1E4E8;">(obj).</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#6A737D;">//因为id不可被遍历，故值为[&#39;brand&#39;,&#39;price&#39;]，2</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> k </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> obj){</span></span>
<span class="line"><span style="color:#E1E4E8;">     console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(obj[k]);</span><span style="color:#6A737D;">//因为id不可被遍历，故值为 华为 1999</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">obj.price </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">999</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">delete</span><span style="color:#E1E4E8;"> obj[</span><span style="color:#9ECBFF;">&#39;price&#39;</span><span style="color:#E1E4E8;">] </span><span style="color:#6A737D;">//失效，因为price设置了configurable:false</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(obj);</span><span style="color:#6A737D;">//obj = { brand:&#39;华为&#39;,price:1999，id:1 }；</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> obj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {brand:</span><span style="color:#032F62;">&#39;华为&#39;</span><span style="color:#24292E;">,price:</span><span style="color:#005CC5;">1999</span><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#24292E;">Object.</span><span style="color:#6F42C1;">defineProperty</span><span style="color:#24292E;">(obj,</span><span style="color:#032F62;">&#39;id&#39;</span><span style="color:#24292E;">,{value:</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#6A737D;">//给obj添加一个id属性，此时obj = { brand:&#39;华为&#39;,price:1999，id:1 }；</span></span>
<span class="line"><span style="color:#6A737D;">//此时id的其他属性都是false，不可被遍历，不可写，不可配置</span></span>
<span class="line"><span style="color:#24292E;">Object.</span><span style="color:#6F42C1;">defineProperty</span><span style="color:#24292E;">(obj,</span><span style="color:#032F62;">&#39;price&#39;</span><span style="color:#24292E;">,{configurable:</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#6A737D;">//configurable:false表示price不可配置，也代表不可被delete删除</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(Object.</span><span style="color:#6F42C1;">keys</span><span style="color:#24292E;">(obj).</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#6A737D;">//因为id不可被遍历，故值为[&#39;brand&#39;,&#39;price&#39;]，2</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> k </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> obj){</span></span>
<span class="line"><span style="color:#24292E;">     console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(obj[k]);</span><span style="color:#6A737D;">//因为id不可被遍历，故值为 华为 1999</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">obj.price </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">999</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">delete</span><span style="color:#24292E;"> obj[</span><span style="color:#032F62;">&#39;price&#39;</span><span style="color:#24292E;">] </span><span style="color:#6A737D;">//失效，因为price设置了configurable:false</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(obj);</span><span style="color:#6A737D;">//obj = { brand:&#39;华为&#39;,price:1999，id:1 }；</span></span></code></pre></div><p>💡 补充</p><p>1）属性描述对象： JavaScript 提供了一个内部数据结构，用来描述对象的属性，控制它的行为，比如该属性是否可写、可遍历等等。 这个内部数据结构称为“属性描述对象”（attributes object）</p><p>2）属性描述对象的6个元属性： value：设置该属性的属性值，默认值为undefined writable：表示能否修改属性的值，也就是说该属性是可写的还是只读的，默认为true（可写） enumerable：表示改属性是否可遍历，默认为true（可遍历） configurable：表示能否通过 delete 删除属性、能否修改属性的特性，或者将属性修改为访问器属性，默认为true（可配置） get：get是一个函数，表示该属性的取值函数（getter），默认为undefined set：get是一个函数，表示该属性的存值函数（setter），默认为undefined configurable 如果设为false，将阻止某些操作改写该属性，比如无法删除该属性，也不得改变该属性的属性描述对象（value属性除外</p><h3 id="_11、ajax-与-flash-的优缺点-过时" tabindex="-1">11、ajax 与 Flash 的优缺点 ⚠️(过时) <a class="header-anchor" href="#_11、ajax-与-flash-的优缺点-过时" aria-label="Permalink to &quot;11、ajax 与 Flash 的优缺点 :warning:(过时)&quot;">​</a></h3><p>1.Ajax的优势：1.可搜索性 2.开放性 3.费用 4.易用性 5.易于开发。</p><p>2.Flash的优势：1.多媒体处理 2.兼容性 3.矢量图形 4.客户端资源调度</p><p>3.Ajax的劣势：1.它可能破坏浏览器的后退功能 2.使用动态页面更新使得用户难于将某个特定的状态保存到收藏夹中，不过这些都有相关方法解决。</p><p>4.Flash的劣势：1.二进制格式 2.格式私有 3.flash 文件经常会很大，用户第一次使用的时候需要忍耐较长的等待时间 4.性能问题</p>`,57),c=[e];function t(r,y,E,i,d,F){return a(),n("div",null,c)}const C=s(p,[["render",t]]);export{h as __pageData,C as default};
