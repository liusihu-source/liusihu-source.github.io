import{_ as n,o as a,c as l,Q as s,k as p}from"./chunks/framework.a7175731.js";const C=JSON.parse('{"title":"JavaScript面试题 --笔记","description":"","frontmatter":{},"headers":[],"relativePath":"面试题/面试题-JavaScript/202404.md","filePath":"面试题/面试题-JavaScript/202404.md","lastUpdated":null}'),o={name:"面试题/面试题-JavaScript/202404.md"},e=s(`<h1 id="javascript面试题-笔记" tabindex="-1">JavaScript面试题 --笔记 <a class="header-anchor" href="#javascript面试题-笔记" aria-label="Permalink to &quot;JavaScript面试题 --笔记&quot;">​</a></h1><h2 id="_202404" tabindex="-1">202404 <a class="header-anchor" href="#_202404" aria-label="Permalink to &quot;202404&quot;">​</a></h2><p>（1）以下哪个表达式为true</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&#39;1&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">//false</span></span>
<span class="line"><span style="color:#B392F0;">isNaN</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">//false</span></span>
<span class="line"><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">] </span><span style="color:#6A737D;">//false</span></span>
<span class="line"><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">//true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&#39;1&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">//false</span></span>
<span class="line"><span style="color:#6F42C1;">isNaN</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">//false</span></span>
<span class="line"><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#6A737D;">//false</span></span>
<span class="line"><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">//true</span></span></code></pre></div><ul><li>1&#39;是字符串string，1是数字number。类型不一样，===下比较返回false。</li><li>任何数值除以0都会导致错误而终止程序执行。但是在 JavaScript 中，会返回出特殊的值，因此不会影响程序的执行。 <ul><li>比0大的数除以0，则会得到无穷大，所以 js 用 Infinity 来显示出来。也就是1/0得到的是Infinity。isNaN(1/0)返回的是false。</li><li>但是isNaN(0/0)返回的就是true</li></ul></li><li>1 in [1]并不是表示数字1在不在数组里。而是表示数组中含不含有1这个索引index值。 数组长度为1，所以只含有的index值为0，这个表达式返回fasle。</li><li>1 &amp;&amp; 2 &gt; 1，先判断右边的表达式，2&gt;1返回true。1 &amp;&amp; true返回的结果也是true。</li></ul><p>（2）页面的性能指标概念</p><p>白屏时间（<code>first Paint Time</code>）——用户从打开页面开始到页面开始有东西呈现为止</p><p>首屏时间——用户浏览器首屏内所有内容都呈现出来所花费的时间</p><p>用户可操作时间(<code>dom Interactive</code>)——用户可以进行正常的点击、输入等操作，默认可以统计domready时间，因为通常会在这时候绑定事件操作</p><p>总下载时间——页面所有资源都加载完成并呈现出来所花的时间，即页面 onload 的时间</p><p>（3）A.prototype.a &amp; a.prototype = {}</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">A</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">() {}</span></span>
<span class="line"><span style="color:#79B8FF;">A</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">B</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">A</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#79B8FF;">A</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  b: </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  c: </span><span style="color:#79B8FF;">3</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">C</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">A</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#79B8FF;">A</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.d </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">B</span><span style="color:#E1E4E8;">.a); </span><span style="color:#6A737D;">//1</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">B</span><span style="color:#E1E4E8;">.b); </span><span style="color:#79B8FF;">undefined</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">C</span><span style="color:#E1E4E8;">.c); </span><span style="color:#6A737D;">//3</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">C</span><span style="color:#E1E4E8;">.d); </span><span style="color:#6A737D;">//4</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">A</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">() {}</span></span>
<span class="line"><span style="color:#005CC5;">A</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">B</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">A</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#005CC5;">A</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  b: </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  c: </span><span style="color:#005CC5;">3</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">C</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">A</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#005CC5;">A</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.d </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">B</span><span style="color:#24292E;">.a); </span><span style="color:#6A737D;">//1</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">B</span><span style="color:#24292E;">.b); </span><span style="color:#005CC5;">undefined</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">C</span><span style="color:#24292E;">.c); </span><span style="color:#6A737D;">//3</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">C</span><span style="color:#24292E;">.d); </span><span style="color:#6A737D;">//4</span></span></code></pre></div><ol><li>定义函数 <code>A</code>，并将函数 <code>A</code> 的原型对象中的属性 <code>a</code> 设置为 <code>1</code>。</li><li>创建一个新的对象 <code>B</code>，该对象的原型链指向函数 <code>A</code> 的原型对象。这样，对象 <code>B</code> 继承了函数 <code>A</code> 的原型对象中的属性 <code>a</code>。</li><li>修改函数 <code>A</code> 的原型对象，将其重新赋值为一个新对象，该新对象包含属性 <code>b</code> 和 <code>c</code>，并且不再包含属性 <code>a</code>。这样，修改后的函数 <code>A</code> 的原型对象中的 <code>a</code> 属性被删除，同时新增了 <code>b</code> 和 <code>c</code> 属性。</li><li>创建一个新的对象 <code>C</code>，同样继承了修改后的函数 <code>A</code> 的原型对象中的属性 <code>b</code> 和 <code>c</code>。</li><li>向函数 <code>A</code> 的原型对象中添加属性 <code>d</code>，属性值为 <code>4</code>。</li><li>打印对象 <code>B</code> 的属性 <code>a</code>。因为对象 <code>B</code> 在创建时就已经继承了函数 <code>A</code> 的原型对象中的属性 <code>a</code>，所以打印结果为 <code>1</code>。</li><li>打印对象 <code>B</code> 的属性 <code>b</code>。对象 <code>B</code> 的原型链中并没有属性 <code>b</code>，所以打印结果为 <code>undefined</code>。</li><li>打印对象 <code>C</code> 的属性 <code>c</code>。对象 <code>C</code> 继承了修改后的函数 <code>A</code> 的原型对象中的属性 <code>c</code>，所以打印结果为 <code>3</code>。</li><li>打印对象 <code>C</code> 的属性 <code>d</code>。对象 <code>C</code> 在创建时已经继承了函数 <code>A</code> 的原型对象中的属性 <code>d</code>，所以打印结果为 <code>4</code>。</li></ol><p>（4）</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(a);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">();  </span><span style="color:#6A737D;">//undefined</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(a);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">test</span><span style="color:#24292E;">();  </span><span style="color:#6A737D;">//undefined</span></span></code></pre></div><p>即使不运行不到也会提前声明</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> a ；</span></span>
<span class="line"><span style="color:#E1E4E8;">a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">() { </span><span style="color:#6A737D;">//函数会先去找自己内部的变量，内部有就不会往外面找，内部没有才去外面找</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> a; </span><span style="color:#6A737D;">//变量提升</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(a);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">//因为false没有满足if的条件，所以不能进入if语句里进行赋值</span></span>
<span class="line"><span style="color:#E1E4E8;">        a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">;    </span><span style="color:#6A737D;">//if语句的条件把false改成true，就可以进入if语句赋值</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> a ；</span></span>
<span class="line"><span style="color:#24292E;">a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">() { </span><span style="color:#6A737D;">//函数会先去找自己内部的变量，内部有就不会往外面找，内部没有才去外面找</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> a; </span><span style="color:#6A737D;">//变量提升</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(a);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">//因为false没有满足if的条件，所以不能进入if语句里进行赋值</span></span>
<span class="line"><span style="color:#24292E;">        a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;    </span><span style="color:#6A737D;">//if语句的条件把false改成true，就可以进入if语句赋值</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">test</span><span style="color:#24292E;">();</span></span></code></pre></div><p>（5）new Boolean 和 Boolean</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> x </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Boolean</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (x) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">alert</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;hi&#39;</span><span style="color:#E1E4E8;">);   </span><span style="color:#6A737D;">//会执行</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> y </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Boolean</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (y) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">alert</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;hello&#39;</span><span style="color:#E1E4E8;">);  </span><span style="color:#6A737D;">//不会执行</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Boolean</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (x) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">alert</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;hi&#39;</span><span style="color:#24292E;">);   </span><span style="color:#6A737D;">//会执行</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> y </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Boolean</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (y) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">alert</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;hello&#39;</span><span style="color:#24292E;">);  </span><span style="color:#6A737D;">//不会执行</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>（6）冒泡事件概念</p><p>冒泡事件（Bubbling Event）是指在 DOM 结构中，当一个事件被触发后，它会沿着父元素链逐级向上传播，直到到达根节点（通常是 <code>&lt;html&gt;</code> 或 <code>&lt;document&gt;</code>）。这意味着如果一个子元素触发了某个事件，而该事件是一个冒泡事件，那么该事件也会在父元素、祖先元素中被触发。</p><p>下面是一些支持冒泡事件的案例：</p><ol><li><strong>列表项点击事件：</strong> 在一个列表中，如果希望点击列表项时触发某个事件，可以将事件处理程序绑定到列表的父元素上，利用事件冒泡机制来处理列表项的点击事件。</li><li><strong>表单验证：</strong> 在一个表单中，如果需要对输入框的变化进行实时验证，可以将事件处理程序绑定到表单元素的父元素上，利用事件冒泡机制来处理输入框的变化事件。</li><li><strong>动态加载的图片点击事件：</strong> 当页面上存在动态加载的图片时，可以将点击图片时的事件处理程序绑定到它们的父元素上，利用事件冒泡机制来处理图片的点击事件。</li></ol><h2 id="_0403" tabindex="-1">0403 <a class="header-anchor" href="#_0403" aria-label="Permalink to &quot;0403&quot;">​</a></h2><p>（1）块级作用域let</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> x </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">foo</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(x);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> x </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    x</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#B392F0;">foo</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">foo</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(x);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    x</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">foo</span><span style="color:#24292E;">();</span></span></code></pre></div><p>使用let声明的变量，不会发生变量提升。此外该变量在声明前不可用，否则抛出ReferenceError异常</p><p>（2）IIFE</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> test </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> num </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> num</span><span style="color:#F97583;">++</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}())</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">());</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> test </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> num </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> num</span><span style="color:#D73A49;">++</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}())</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">());</span></span></code></pre></div><p>test函数的作用就是让num值自增（这里涉及到闭包），只不过因为是num++所以最终返回的值是还没有完成本次自增的num值即20，而num本身已经完成自增是为21。</p><p>（3）get &amp; set 同时设置</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Phone</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">constructor</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">price</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.price </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> price;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">get</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">price</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">999</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> p </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Phone</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">888</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(p.price);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Phone</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">constructor</span><span style="color:#24292E;">(</span><span style="color:#E36209;">price</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.price </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> price;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">get</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">price</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">999</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Phone</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">888</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(p.price);</span></span></code></pre></div><p>当类中一个属性只有get()方法而无set()方法时，该属性是无法进行赋值的，连构造方法中的初始化都不行，因此，当对象的price属性在构造方法中进行初始化，会抛出异常。</p><p>（4）存在变量var a =10.42, 取出a的整数部分，有哪些办法</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//方法一</span></span>
<span class="line"><span style="color:#B392F0;">parseInt</span><span style="color:#E1E4E8;">(a); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//方法二， 整数的向下取整</span></span>
<span class="line"><span style="color:#E1E4E8;">Math.</span><span style="color:#B392F0;">floor</span><span style="color:#E1E4E8;">(a);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//方法一</span></span>
<span class="line"><span style="color:#6F42C1;">parseInt</span><span style="color:#24292E;">(a); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//方法二， 整数的向下取整</span></span>
<span class="line"><span style="color:#24292E;">Math.</span><span style="color:#6F42C1;">floor</span><span style="color:#24292E;">(a);</span></span></code></pre></div><p>💡 方法的向上取整</p><p>Math.ceil(a)</p><h2 id="_0404" tabindex="-1">0404 <a class="header-anchor" href="#_0404" aria-label="Permalink to &quot;0404&quot;">​</a></h2><p>（1）let变量 &amp; window</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//检查以下代码的输出结果</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;w&#39;</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> obj </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  a: </span><span style="color:#9ECBFF;">&#39;o&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.a);</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> p </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> obj.print;</span></span>
<span class="line"><span style="color:#E1E4E8;">obj.</span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#B392F0;">p</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//检查以下代码的输出结果</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;w&#39;</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> obj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  a: </span><span style="color:#032F62;">&#39;o&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.a);</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> obj.print;</span></span>
<span class="line"><span style="color:#24292E;">obj.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6F42C1;">p</span><span style="color:#24292E;">();</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">o、undefined</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">o、undefined</span></span></code></pre></div><p>首先明确this指向无法传递，所以函数p的this指向是window。又因为let声明的变量不会挂载到window，所以window的a变量是undefined；至于obj.print方法this指向是obj，所以内部a的值为 o</p><p>（2）JSX 概念及应用 🌟 🌟</p><p>JSX（JavaScript XML）是一种 JavaScript 的语法扩展，它允许开发者在 JavaScript 代码中直接编写类似于 XML 的结构。JSX通常与React一起使用，用于构建用户界面。</p><p>JSX 的基本概念包括：</p><ol><li><strong>类似于 XML 的语法：</strong> JSX 允许开发者在 JavaScript 中嵌入 HTML 标签和组件，使得代码更加直观和易读。</li><li><strong>JavaScript 表达式：</strong> 在 JSX 中可以使用 JavaScript 表达式，可以在大括号 <code>{}</code> 中编写任意 JavaScript 代码，例如变量、函数调用等。</li><li><strong>转换过程：</strong> JSX 代码最终会被转换为普通的 JavaScript 代码，通过 Babel 等工具将 JSX 转换为 React.createElement() 函数的调用。</li></ol><p>常见的 JSX 应用案例包括：</p><ol><li><p>构建 React 组件：</p><p>JSX 是 React 构建用户界面的核心，开发者可以使用 JSX 语法编写 React 组件的 UI 部分。</p><div class="language-react vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">react</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">jsxCopy codeimport React from &#39;react&#39;;</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">const MyComponent = () =&gt; {</span></span>
<span class="line"><span style="color:#e1e4e8;">  return (</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;div&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">      &lt;h1&gt;Hello, World!&lt;/h1&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">      &lt;p&gt;This is a JSX component.&lt;/p&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;/div&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">  );</span></span>
<span class="line"><span style="color:#e1e4e8;">};</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">export default MyComponent;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">jsxCopy codeimport React from &#39;react&#39;;</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">const MyComponent = () =&gt; {</span></span>
<span class="line"><span style="color:#24292e;">  return (</span></span>
<span class="line"><span style="color:#24292e;">    &lt;div&gt;</span></span>
<span class="line"><span style="color:#24292e;">      &lt;h1&gt;Hello, World!&lt;/h1&gt;</span></span>
<span class="line"><span style="color:#24292e;">      &lt;p&gt;This is a JSX component.&lt;/p&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;/div&gt;</span></span>
<span class="line"><span style="color:#24292e;">  );</span></span>
<span class="line"><span style="color:#24292e;">};</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">export default MyComponent;</span></span></code></pre></div></li><li><p>在 React 中渲染动态内容：</p><p>JSX 中可以嵌入 JavaScript 表达式，可以根据应用的状态或其他数据动态地渲染内容。</p><div class="language-react vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">react</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">jsxCopy codeimport React, { useState } from &#39;react&#39;;</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">const MyComponent = () =&gt; {</span></span>
<span class="line"><span style="color:#e1e4e8;">  const [name, setName] = useState(&#39;World&#39;);</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">  return (</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;div&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">      &lt;h1&gt;Hello, {name}!&lt;/h1&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">      &lt;button onClick={() =&gt; setName(&#39;React&#39;)}&gt;Change Name&lt;/button&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    &lt;/div&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">  );</span></span>
<span class="line"><span style="color:#e1e4e8;">};</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">export default MyComponent;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">jsxCopy codeimport React, { useState } from &#39;react&#39;;</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">const MyComponent = () =&gt; {</span></span>
<span class="line"><span style="color:#24292e;">  const [name, setName] = useState(&#39;World&#39;);</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">  return (</span></span>
<span class="line"><span style="color:#24292e;">    &lt;div&gt;</span></span>
<span class="line"><span style="color:#24292e;">      &lt;h1&gt;Hello, {name}!&lt;/h1&gt;</span></span>
<span class="line"><span style="color:#24292e;">      &lt;button onClick={() =&gt; setName(&#39;React&#39;)}&gt;Change Name&lt;/button&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;/div&gt;</span></span>
<span class="line"><span style="color:#24292e;">  );</span></span>
<span class="line"><span style="color:#24292e;">};</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">export default MyComponent;</span></span></code></pre></div></li><li><p>与 JSX 表达式一起使用：</p><p>JSX 表达式可以用来计算和显示数据。</p><div class="language-react vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">react</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">jsxCopy codeimport React from &#39;react&#39;;</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">const MyComponent = () =&gt; {</span></span>
<span class="line"><span style="color:#e1e4e8;">  const value = 10;</span></span>
<span class="line"><span style="color:#e1e4e8;">  return &lt;p&gt;The value is: {value * 2}&lt;/p&gt;;</span></span>
<span class="line"><span style="color:#e1e4e8;">};</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">export default MyComponent;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">jsxCopy codeimport React from &#39;react&#39;;</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">const MyComponent = () =&gt; {</span></span>
<span class="line"><span style="color:#24292e;">  const value = 10;</span></span>
<span class="line"><span style="color:#24292e;">  return &lt;p&gt;The value is: {value * 2}&lt;/p&gt;;</span></span>
<span class="line"><span style="color:#24292e;">};</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">export default MyComponent;</span></span></code></pre></div></li></ol><p>总的来说，JSX 是 React 开发中不可或缺的一部分，它简化了开发人员构建用户界面的过程，并提供了更好的可读性和灵活性。</p><h2 id="_0405" tabindex="-1">0405 <a class="header-anchor" href="#_0405" aria-label="Permalink to &quot;0405&quot;">​</a></h2><p>（1）CMD 和 AMD</p><p>CMD（Common Module Definition ）: 是一种延迟加载模块的方式，即在使用模块时才会加载模块</p><p>如sea.js</p><p>AMD（asynchronous module definition 异步模块定义）:是一种异步加载模块的方式，即在定义模块时就会加载模块。适合浏览器端的开发。</p><p>如require.js</p><h2 id="_0415" tabindex="-1">0415 <a class="header-anchor" href="#_0415" aria-label="Permalink to &quot;0415&quot;">​</a></h2><p>（1）cb.call()</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 在JavaScript的函数中，this始终指向调用者的上下文环境</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> len </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">117</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 5. 全局作用域中使用 var 定义的变量默认会成为 window 的属性，及 window.len</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> func </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  len: </span><span style="color:#79B8FF;">935</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">showLen</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.len) </span><span style="color:#6A737D;">// 4. this 此时指向的是 window，所以相当于打印 window.len</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">show</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">    (</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">cb</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">cb</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// 3. cb 相当于 cb.call() 默认没有传入上下文环境时 this 指向全局的 window 对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    })(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.showLen) </span><span style="color:#6A737D;">// 2. this 是 func 所以传入的是上面定义的 showLen 函数</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">func.</span><span style="color:#B392F0;">show</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// 1. 相当于 func.show.call(func)，此时 this 是 func</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 在JavaScript的函数中，this始终指向调用者的上下文环境</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> len </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">117</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 5. 全局作用域中使用 var 定义的变量默认会成为 window 的属性，及 window.len</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> func </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  len: </span><span style="color:#005CC5;">935</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">showLen</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.len) </span><span style="color:#6A737D;">// 4. this 此时指向的是 window，所以相当于打印 window.len</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">show</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">    (</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">cb</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">cb</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// 3. cb 相当于 cb.call() 默认没有传入上下文环境时 this 指向全局的 window 对象</span></span>
<span class="line"><span style="color:#24292E;">    })(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.showLen) </span><span style="color:#6A737D;">// 2. this 是 func 所以传入的是上面定义的 showLen 函数</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">func.</span><span style="color:#6F42C1;">show</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// 1. 相当于 func.show.call(func)，此时 this 是 func</span></span></code></pre></div>`,58),c=p("p",{return:"","String(foo)":""},"（2）'foo' == new function()",-1),t=s(`<p>在 JavaScript 中，使用 <code>new function(){ ... }</code> 的形式可以创建一个匿名构造函数，并立即实例化一个对象。在这个特定的例子中，<code>new function(){ return String(&#39;foo&#39;) }</code> 代码创建了一个匿名构造函数，并尝试在其中返回一个字符串 <code>&#39;foo&#39;</code>。</p><p>不过，需要注意的是，当通过 <code>new</code> 关键字调用一个构造函数时，如果构造函数内部没有返回一个对象，那么 JavaScript 将忽略该返回值，并返回新创建的对象本身（即这个匿名构造函数的一个实例）。因此，即使构造函数中使用了 <code>return String(&#39;foo&#39;)</code>，这个返回值也会被忽略，因为 <code>String(&#39;foo&#39;)</code> 返回的是一个原始类型（字符串），不是一个对象。</p><p>因此，<code>new function(){ return String(&#39;foo&#39;) }</code> 本质上返回的是这个匿名函数的一个新实例，而不是字符串 <code>&#39;foo&#39;</code>。</p><p>比较操作 <code>&#39;foo&#39; == new function(){ return String(&#39;foo&#39;) }</code> 中，左边是一个字符串 <code>&#39;foo&#39;</code>，而右边是上述匿名函数的一个实例。JavaScript 在比较操作时会尝试转换类型，但是在这种情况下，无法将对象转换成字符串以匹配 <code>&#39;foo&#39;</code>。因此，这个比较的结果将是 <code>false</code>。</p><p>（3）[] == 0 &amp;&amp; ![]</p><p>[] == 0</p><ol><li><strong>数组到原始类型的转换</strong>：当数组 <code>[]</code> 与数字 <code>0</code> 进行比较时，首先，数组需要被转换成一个原始类型。对于空数组 <code>[]</code>，其 <code>toString()</code> 方法将被调用，返回的是空字符串 <code>&quot;&quot;</code>。</li><li><strong>字符串与数字的比较</strong>：接下来，JavaScript 将尝试将空字符串 <code>&quot;&quot;</code> 转换为数字，以进行比较。根据 JavaScript 的类型转换规则，空字符串 <code>&quot;&quot;</code> 转换为数字后的结果是 <code>0</code>。</li><li><strong>比较结果</strong>：最终，这个比较变成了 <code>0 == 0</code>，结果是 <code>true</code>。</li></ol><p>![]</p><p>对于任何 JavaScript 表达式或值，逻辑非运算符首先会将该值转换为布尔类型，然后取反。下面是这个表达式的解析：</p><ol><li><strong>转换为布尔值</strong>：在 JavaScript 中，对象（包括数组）在布尔上下文中被认为是真值 (<code>true</code>)。因此，空数组 <code>[]</code> 作为一个对象，其布尔值是 <code>true</code>。</li><li><strong>应用逻辑非运算符</strong>：当对真值 <code>true</code> 应用逻辑非运算符 <code>!</code> 时，结果是 <code>false</code>。</li></ol><h2 id="_0416" tabindex="-1">0416 <a class="header-anchor" href="#_0416" aria-label="Permalink to &quot;0416&quot;">​</a></h2><p>（1）let &amp; class都有暂时性死区</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">原来的代码</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//console.log(a) 位置A</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">a</span><span style="color:#E1E4E8;"> {}</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// console.log(a) 位置B</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">实际上提升后的</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(a) 位置A </span><span style="color:#6A737D;">//在test()作用域内找得到a</span></span>
<span class="line"><span style="color:#6A737D;">//是一个class但是存在TDZ暂时性死区，访问报错</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">a</span><span style="color:#E1E4E8;"> {}</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(a) 位置B </span><span style="color:#6A737D;">//a已经声明创建出来了</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">原来的代码</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//console.log(a) 位置A</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">a</span><span style="color:#24292E;"> {}</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// console.log(a) 位置B</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">test</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">实际上提升后的</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(a) 位置A </span><span style="color:#6A737D;">//在test()作用域内找得到a</span></span>
<span class="line"><span style="color:#6A737D;">//是一个class但是存在TDZ暂时性死区，访问报错</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">a</span><span style="color:#24292E;"> {}</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(a) 位置B </span><span style="color:#6A737D;">//a已经声明创建出来了</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">test</span><span style="color:#24292E;">()</span></span></code></pre></div><h2 id="_0418" tabindex="-1">0418 <a class="header-anchor" href="#_0418" aria-label="Permalink to &quot;0418&quot;">​</a></h2><p>（1）内置对象、宿主对象和自定义对象</p><p>JS中，可以将对象分为“内部对象”、“宿主对象”和“自定义对象”三种。 1、内部对象</p><ul><li>js中的内部对象包括Array、Boolean、Date、Function、Global、Math、Number、Object、RegExp、String以及各种错误类对象，包括Error、EvalError、RangeError、ReferenceError、SyntaxError和TypeError。</li><li>其中Global和Math这两个对象又被称为“内置对象”，这两个对象在脚本程序初始化时被创建，不必实例化这两个对象。</li></ul><p>2、宿主对象</p><ul><li>宿主对象就是执行JS脚本的环境提供的对象。对于嵌入到网页中的JS来说，其宿主对象就是浏览器提供的对象，所以又称为浏览器对象，如IE、Firefox等浏览器提供的对象。不同的浏览器提供的宿主对象可能不同，即使提供的对象相同，其实现方式也大相径庭！这会带来浏览器兼容问题，增加开发难度。</li><li>浏览器对象有很多，如Window和Documen，Element，form，image，等等。</li></ul><p>3.自定义对象</p><ul><li>开发人员自己定义的对象。JS允许使用自定义对象，使JS应用及功能得到扩充</li></ul><p>（2）冒泡事件</p><table><thead><tr><th>Event Type</th><th>Bubbling phase</th><th></th><th></th></tr></thead><tbody><tr><td>abort</td><td>✗</td><td>wheel</td><td>✔</td></tr><tr><td>beforeinput</td><td>✔</td><td>unload</td><td>✗</td></tr><tr><td>blur</td><td>✗</td><td>select</td><td>✔</td></tr><tr><td>click</td><td>✔</td><td>scroll</td><td>✔</td></tr><tr><td>compositionstart</td><td>✔</td><td>resize</td><td>✗</td></tr><tr><td>compositionupdate</td><td>✔</td><td>mouseup</td><td>✔</td></tr><tr><td>compositionend</td><td>✔</td><td>mouseover</td><td>✔</td></tr><tr><td>dblclick</td><td>✔</td><td>mouseout</td><td>✔</td></tr><tr><td>error</td><td>✗</td><td>mousemove</td><td>✔</td></tr><tr><td>focus</td><td>✗</td><td>mouseleave</td><td>✗</td></tr><tr><td>focusin</td><td>✔</td><td>mouseenter</td><td>✗</td></tr><tr><td>focusout</td><td>✔</td><td>mousedown</td><td>✔</td></tr><tr><td>input</td><td>✔</td><td>load</td><td>✗</td></tr><tr><td>keydown</td><td>✔</td><td>keyup</td><td>✔</td></tr></tbody></table>`,23),r=[e,c,t];function y(E,i,d,F,u,h){return a(),l("div",null,r)}const A=n(o,[["render",y]]);export{C as __pageData,A as default};
