import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.a7175731.js";const p="/assets/image-20241027145827096.f669e55b.png",o="/assets/image-20241027150329250.99c98655.png",h=JSON.parse('{"title":"JavaScript面试题 --笔记","description":"","frontmatter":{},"headers":[],"relativePath":"面试题/面试题-JavaScript/202410.md","filePath":"面试题/面试题-JavaScript/202410.md","lastUpdated":null}'),e={name:"面试题/面试题-JavaScript/202410.md"},c=l(`<h1 id="javascript面试题-笔记" tabindex="-1">JavaScript面试题 --笔记 <a class="header-anchor" href="#javascript面试题-笔记" aria-label="Permalink to &quot;JavaScript面试题 --笔记&quot;">​</a></h1><h3 id="_1011" tabindex="-1">1011 <a class="header-anchor" href="#_1011" aria-label="Permalink to &quot;1011&quot;">​</a></h3><h4 id="_1、tcp通信协议的三次握手四次挥手" tabindex="-1">1、TCP通信协议的三次握手四次挥手 <a class="header-anchor" href="#_1、tcp通信协议的三次握手四次挥手" aria-label="Permalink to &quot;1、TCP通信协议的三次握手四次挥手&quot;">​</a></h4><p><code>三次握手</code></p><p>第一次握手：客户端发送 SYN</p><p>客户端（Client）向服务器（Server）发送一个 <code>SYN</code>（synchronize sequence number，同步序列号）报文，表示请求建立连接。该报文包含了客户端生成的一个初始序列号 <code>Seq = x</code>，用于后续数据传输时的序列控制。</p><p>客户端进入 <strong>SYN_SENT</strong> 状态，等待服务器响应。</p><p>第二次握手：服务器发送 SYN-ACK</p><p>服务器收到客户端的 <code>SYN</code> 请求后，回复一个 <code>SYN-ACK</code> 报文，表示同意建立连接。该报文中包含：</p><ul><li>服务器生成的一个初始序列号 <code>Seq = y</code>，表示服务器的序列控制。</li><li>对客户端 <code>SYN</code> 请求的确认号 <code>Ack = x+1</code>，表示服务器收到了客户端的 <code>SYN</code> 请求并确认序列号。</li></ul><p>服务器进入 <strong>SYN_RCVD</strong> 状态，等待客户端确认。</p><p>第三次握手：客户端发送 ACK</p><p>客户端收到服务器的 <code>SYN-ACK</code> 报文后，向服务器发送一个 <code>ACK</code>（Acknowledgment，确认）报文。这个报文中包含：</p><ul><li>确认服务器的序列号 <code>Ack = y+1</code>，表示客户端确认服务器的 <code>SYN</code>。</li><li>客户端进入 <strong>ESTABLISHED</strong> 状态，表示连接建立完成。</li></ul><p>服务器收到该 <code>ACK</code> 报文后，也进入 <strong>ESTABLISHED</strong> 状态，连接正式建立，双方可以开始数据传输。</p><p><code>四次挥手</code></p><p>第一次挥手：客户端发送 FIN</p><p>当客户端决定不再发送数据时，它会发送一个 <code>FIN</code>（Finish，结束）报文给服务器，表示关闭客户端到服务器的数据传输通道。</p><p>客户端进入 <strong>FIN_WAIT_1</strong> 状态，等待服务器的确认。</p><p>第二次挥手：服务器发送 ACK</p><p>服务器收到客户端的 <code>FIN</code> 报文后，发送一个 <code>ACK</code> 报文，确认已经收到客户端的 <code>FIN</code>，并且表示服务器还可能继续发送数据。</p><p>服务器发送的 <code>ACK</code> 报文中包含对 <code>FIN</code> 的确认号 <code>Ack = x+1</code>。</p><p>客户端收到该确认后，进入 <strong>FIN_WAIT_2</strong> 状态，等待服务器的 <code>FIN</code> 报文。</p><p>第三次挥手：服务器发送 FIN</p><p>当服务器完成数据传输后，它也会向客户端发送一个 <code>FIN</code> 报文，表示关闭服务器到客户端的数据传输通道。</p><p>服务器进入 <strong>LAST_ACK</strong> 状态，等待客户端的 <code>ACK</code> 确认。</p><p>第四次挥手：客户端发送 ACK</p><p>客户端收到服务器的 <code>FIN</code> 报文后，向服务器发送一个 <code>ACK</code> 报文，确认已经收到服务器的 <code>FIN</code>。发送 <code>ACK</code> 后，客户端进入 <strong>TIME_WAIT</strong> 状态。</p><p>在 <code>TIME_WAIT</code> 状态下，客户端会等待一段时间（通常为 2 倍的最大报文段寿命，MSL），确保服务器收到了最后的 <code>ACK</code>，以防止服务器认为客户端没有收到其 <code>FIN</code> 而重传 <code>FIN</code> 报文。</p><p>服务器收到该 <code>ACK</code> 报文后，进入 <strong>CLOSED</strong> 状态，连接完全关闭。</p><p>💡 OSI参考模型：应用层、表示层、会话层、<code>传输层</code>、网络层、数据链路层、物理层</p><h4 id="_2、原型题目" tabindex="-1">2、原型题目 <a class="header-anchor" href="#_2、原型题目" aria-label="Permalink to &quot;2、原型题目&quot;">​</a></h4><p><code>__proto__</code> 将实例对象和对象组成原型链</p><p>一切函数对象的<code>__proto__</code>都最终指向Function原型对象</p><p>一切原型对象都最终指向Object.prototype</p><p><code>Object.prototype.__proto__</code>指向null</p><h4 id="_3、项目工程化" tabindex="-1">3、项目工程化 <a class="header-anchor" href="#_3、项目工程化" aria-label="Permalink to &quot;3、项目工程化&quot;">​</a></h4><p>一个完整的开发构建理念，用于提高开发效率，包括构建打包、模块化开发、自动化测试。</p><p>项目构建--脚手架快速构建ViteJS</p><p>模块化开发，组件页面开发（插槽） 和 功能模块（解耦）开发</p><p>自动化测试，mockJS</p><h4 id="_4、cesium的主要类" tabindex="-1">4、Cesium的主要类 <a class="header-anchor" href="#_4、cesium的主要类" aria-label="Permalink to &quot;4、Cesium的主要类&quot;">​</a></h4><p>（1）最外层widgets--小控件</p><p>（2）scene--天空盒、太阳、月亮、大气圈等</p><p>（3）地形terrainProvider 和 影像imageryProvider</p><p>（4）展示可视化物质--DataSourceCollection、EntitiesCollection</p><p>（5）交互--Camera / Event</p><p>（6）Graphics--更适于方便交互、设置材质 和 大小； Geometry--适于更复杂几何体的可视化</p><h4 id="_5、双指针反转字符串" tabindex="-1">5、双指针反转字符串 <a class="header-anchor" href="#_5、双指针反转字符串" aria-label="Permalink to &quot;5、双指针反转字符串&quot;">​</a></h4><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">reverseArray</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">arr</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 定义左指针和右指针</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> left </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> right </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> arr.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (left </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> right) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> temp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> arr[left];</span></span>
<span class="line"><span style="color:#E1E4E8;">        arr[left] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> arr[right];</span></span>
<span class="line"><span style="color:#E1E4E8;">        arr[right] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> temp;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 左指针右移，右指针左移</span></span>
<span class="line"><span style="color:#E1E4E8;">        left</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        right</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> arr;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 示例</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> arr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">reverseArray</span><span style="color:#E1E4E8;">(arr));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">reverseArray</span><span style="color:#24292E;">(</span><span style="color:#E36209;">arr</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 定义左指针和右指针</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> left </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> right </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (left </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> right) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> temp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr[left];</span></span>
<span class="line"><span style="color:#24292E;">        arr[left] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr[right];</span></span>
<span class="line"><span style="color:#24292E;">        arr[right] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> temp;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 左指针右移，右指针左移</span></span>
<span class="line"><span style="color:#24292E;">        left</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        right</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> arr;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 示例</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> arr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">reverseArray</span><span style="color:#24292E;">(arr));</span></span></code></pre></div><h4 id="_6、常见状态码" tabindex="-1">6、常见状态码 <a class="header-anchor" href="#_6、常见状态码" aria-label="Permalink to &quot;6、常见状态码&quot;">​</a></h4><blockquote><p>HTTP状态码--HTTP Status Code, 表示响应状态的三位数</p></blockquote><ul><li>1表示消息 <ul><li>100（客户端继续发送请求，这是临时响应）：这个临时响应是用来通知客户端它的部分请求已经被服务器接收，且仍未被拒绝。客户端应当继续发送请求的剩余部分，或者如果请求已经完成，忽略这个响应。服务器必须在请求完成后向客户端发送一个最终响应</li><li>101：服务器根据客户端的请求切换协议，主要用于websocket或http2升级</li></ul></li><li>2表示成功 <ul><li>200（成功）：请求已成功，请求所希望的响应头或数据体将随此响应返回</li><li>201（已创建）：请求成功并且服务器创建了新的资源</li><li>202（已创建）：服务器已经接收请求，但尚未处理</li><li>203（非授权信息）：服务器已成功处理请求，但返回的信息可能来自另一来源</li><li>204（无内容）：服务器成功处理请求，但没有返回任何内容</li><li>205（重置内容）：服务器成功处理请求，但没有返回任何内容</li><li>206（部分内容）：服务器成功处理了部分请求</li></ul></li><li>3表示重定向 <ul><li>300（多种选择）：针对请求，服务器可执行多种操作。 服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择</li><li>301（永久移动）：请求的网页已永久移动到新位置。 服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置</li><li>302（临时移动）： 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求</li><li>303（查看其他位置）：请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码</li><li>305 （使用代理）： 请求者只能使用代理访问请求的网页。 如果服务器返回此响应，还表示请求者应使用代理</li><li>307 （临时重定向）： 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求</li></ul></li><li>4表示请求错误 <ul><li>400（错误请求）： 服务器不理解请求的语法</li><li>401（未授权）： 请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。</li><li>403（禁止）： 服务器拒绝请求</li><li>404（未找到）： 服务器找不到请求的网页</li><li>405（方法禁用）： 禁用请求中指定的方法</li><li>406（不接受）： 无法使用请求的内容特性响应请求的网页</li><li>407（需要代理授权）： 此状态代码与 401（未授权）类似，但指定请求者应当授权使用代理</li><li>408（请求超时）： 服务器等候请求时发生超时</li></ul></li><li>5表示服务器错误 <ul><li>500（服务器内部错误）：服务器遇到错误，无法完成请求</li><li>501（尚未实施）：服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码</li><li>502（错误网关）： 服务器作为网关或代理，从上游服务器收到无效响应</li><li>503（服务不可用）： 服务器目前无法使用（由于超载或停机维护）</li><li>504（网关超时）： 服务器作为网关或代理，但是没有及时从上游服务器收到请求</li><li>505（HTTP 版本不受支持）： 服务器不支持请求中所用的 HTTP 协议版本</li></ul></li></ul><p>💡 301 新域名替换旧域名，旧的域名不再使用时，用户访问旧域名时用301就重定向到新的域名</p><p>💡 302 临时重定向不会缓存，常用 于未登陆的用户访问用户中心重定向到登录页面。比如Vue中挂载router路由对象时，可在router中设置导航守卫，添加判断条件，如检查LocalStorage是否有tokenID等。</p><h4 id="_7、nodejs印象" tabindex="-1">7、NodeJS印象 <a class="header-anchor" href="#_7、nodejs印象" aria-label="Permalink to &quot;7、NodeJS印象&quot;">​</a></h4><p>概念：开源和跨平台的 JavaScript 运行时环境，主要用于后端服务搭建</p><p>特点：非阻塞异步IO流</p><ul><li>相较浏览器端，增加了IO流，可以读取文件</li><li>执行诸如文件读写、网络请求等 I/O 操作时，能够在后台进行而不会阻塞代码的执行 <ul><li>方便处理高并发情景，<code>因为不需要为每个请求创建新的线程，而是把请求压入事件队列,循环遍历队列状态，为发生变化的事件执行对应的处理代码，一般是回调函数</code>。</li></ul></li></ul><p>优势：</p><p>前端开发者很多，不必再多学一门语言</p><h4 id="_8、经历" tabindex="-1">8、经历 <a class="header-anchor" href="#_8、经历" aria-label="Permalink to &quot;8、经历&quot;">​</a></h4><p>Node - Express框架、mysql 和 pg。</p><p>1、相关工具--navicat / postman</p><p>2、跨域处理 -- 后端设置Access-control 为 *，前端设置代理请求</p><p>3、前端请求的Vite代理服务器转发。原理类似Nginx的反向代理，接收到请求，转发内部服务器即后端服务器，反馈Nginx代理服务器，再转发客户端。</p><p>4、JWT工作机制。用户名秘密的加密处理。</p><h4 id="_9、nodejs有哪些全局对象" tabindex="-1">9、NodeJS有哪些全局对象 <a class="header-anchor" href="#_9、nodejs有哪些全局对象" aria-label="Permalink to &quot;9、NodeJS有哪些全局对象&quot;">​</a></h4><ul><li>process <ul><li>提供有关当前进程的信息和控制</li></ul></li><li>console <ul><li>常用的输出方式</li></ul></li><li>clearInterval、setInterval</li><li>clearTimeout、setTimeout <ul><li>定时器</li></ul></li><li>global <ul><li>任何全局变量、函数、对象都是该对象的一个属性值</li></ul></li></ul><h4 id="_10、buffer-和-stream" tabindex="-1">10、Buffer 和 Stream <a class="header-anchor" href="#_10、buffer-和-stream" aria-label="Permalink to &quot;10、Buffer 和 Stream&quot;">​</a></h4><p><code>Buffer</code> 是 Node.js 提供的一个类，有固定大小的字节数组</p><p><code>Stream</code> 是 Node.js 中处理流式数据的抽象接口</p><ul><li>可以将 <code>Buffer</code> 数据流转换为 <code>Stream</code>，也可以从 <code>Stream</code> 中读取数据到 <code>Buffer</code></li><li>在处理大量数据时，使用 <code>Stream</code> 可以提高性能，因为它允许逐块处理数据，而不是一次性加载到内存中</li></ul><h4 id="_11、常见的设计模式" tabindex="-1">11、常见的设计模式 <a class="header-anchor" href="#_11、常见的设计模式" aria-label="Permalink to &quot;11、常见的设计模式&quot;">​</a></h4><p>是对常见应用场景解决方案的一种概念化描述。</p><ul><li>单例模式</li><li>工厂模式</li><li>策略模式</li><li>代理模式</li><li>中介者模式</li></ul><p>工厂模式：定义一个创建对象的接口，但让子类决定实例化哪一个类。</p><p>💡 封装性：工厂模式隐藏了对象创建的细节，调用者只需要知道需要什么，而不需要知道如何创建。</p><p>💡 扩展性：新增产品类时，不需要修改工厂类的代码，只需要新增具体产品类和相应的具体工厂类即可。</p><h4 id="_12、发布-订阅者模式" tabindex="-1">12、发布--订阅者模式 <a class="header-anchor" href="#_12、发布-订阅者模式" aria-label="Permalink to &quot;12、发布--订阅者模式&quot;">​</a></h4><p>一种软件架构模式，有两种角色</p><ul><li>发布者 publish 发布事件消息</li><li>订阅者 subscriber 订阅发布者的事件，做出各自的响应</li></ul><h4 id="_13、http-https区别" tabindex="-1">13、http&amp;https区别 <a class="header-anchor" href="#_13、http-https区别" aria-label="Permalink to &quot;13、http&amp;https区别&quot;">​</a></h4><ul><li><p>端口：</p><ul><li><p><strong>HTTP</strong>：默认使用80端口。</p></li><li><p><strong>HTTPS</strong>：默认使用443端口。</p></li></ul></li><li><p>安全性：</p><ul><li><p>HTTP：由于没有加密，HTTP连接被认为是不安全的，容易受到中间人攻击和其他安全威胁。</p></li><li><p>HTTPS：更高的安全性，可以保护用户数据免受攻击，是现代网站推荐的协议。</p></li></ul></li><li><p>性能：</p><ul><li><p>HTTP：由于没有加密和解密的过程，通常比HTTPS更快。</p></li><li><p>HTTPS：由于加密和解密的过程，可能会有轻微的性能开销，但随着技术的进步，这种差异正在变得越来越小。</p></li></ul></li><li><p>搜索引擎优化（SEO）：</p><ul><li><p>HTTP：Google和其他主流搜索引擎可能会降低没有使用HTTPS的网站的搜索排名。</p></li><li><p>HTTPS：被认为是SEO的一个积极因素，有助于提高网站的搜索排名。</p></li></ul></li></ul><h4 id="_14、promise控制并发数量" tabindex="-1">14、promise控制并发数量 <a class="header-anchor" href="#_14、promise控制并发数量" aria-label="Permalink to &quot;14、promise控制并发数量&quot;">​</a></h4><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//初始化并发函数，promiseArr参数 和 最大并发数</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createSchedule</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">requestList</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">max</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> runningSize </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> finishSize </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//返回一个二维数组，长度为request.length，[[mock,0],[mock,1], 省略号]</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">queue</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Array.</span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;">({ length: requestList.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> }, (</span><span style="color:#FFAB70;">_</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">index</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">    requestList[index],</span></span>
<span class="line"><span style="color:#E1E4E8;">    index,</span></span>
<span class="line"><span style="color:#E1E4E8;">  ]);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">res</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Array</span><span style="color:#E1E4E8;">(requestList.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">resolve</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">reject</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">handle</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (finishSize </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> requestList.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(res);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">//初始化运行过程中超过最大并发数的handle不运行，比如10个请求，3个并发，初始后的剩余7个不处理</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (runningSize </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> max </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> queue.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">task</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">index</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> queue.</span><span style="color:#B392F0;">shift</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">task</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">          (</span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            res[index] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> value;</span></span>
<span class="line"><span style="color:#E1E4E8;">                  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;这是第&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> (index </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;个，状态为&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> value.status </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;,值为&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> value.value)</span></span>
<span class="line"><span style="color:#E1E4E8;">          },</span></span>
<span class="line"><span style="color:#E1E4E8;">          (</span><span style="color:#FFAB70;">reason</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            res[index] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> reason;</span></span>
<span class="line"><span style="color:#E1E4E8;">                  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;这是第&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> (index </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;个，状态为&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> reason.status </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;,值为&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> reason.value)</span></span>
<span class="line"><span style="color:#E1E4E8;">          }</span></span>
<span class="line"><span style="color:#E1E4E8;">        )</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">finally</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">          runningSize</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">          finishSize</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">//剩余7个逐步在前3个finally后运行</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">handle</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        });</span></span>
<span class="line"><span style="color:#E1E4E8;">      runningSize</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> requestList.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">handle</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">//每个handle内部有异步任务，把这些异步任务放到异步队列，后续逐个运行</span></span>
<span class="line"><span style="color:#E1E4E8;">      console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;循环了&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;次&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">start</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Date.</span><span style="color:#B392F0;">now</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">mock</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//模拟请求等待时长，这里等待后resolve不做处理，用random()随机判定请求状态并返回给上面task的then  </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">resolve</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setTimeout</span><span style="color:#E1E4E8;">(resolve, </span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (Math.</span><span style="color:#B392F0;">random</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.8</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      status: </span><span style="color:#9ECBFF;">&quot;error&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      value: Date.</span><span style="color:#B392F0;">now</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> start,</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      status: </span><span style="color:#9ECBFF;">&quot;success&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      value: Date.</span><span style="color:#B392F0;">now</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> start,</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">requestList</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Array</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">fill</span><span style="color:#E1E4E8;">(mock)</span></span>
<span class="line"><span style="color:#B392F0;">createSchedule</span><span style="color:#E1E4E8;">(requestList, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(res);</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//初始化并发函数，promiseArr参数 和 最大并发数</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createSchedule</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">requestList</span><span style="color:#24292E;">, </span><span style="color:#E36209;">max</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> runningSize </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> finishSize </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//返回一个二维数组，长度为request.length，[[mock,0],[mock,1], 省略号]</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">queue</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Array.</span><span style="color:#6F42C1;">from</span><span style="color:#24292E;">({ length: requestList.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> }, (</span><span style="color:#E36209;">_</span><span style="color:#24292E;">, </span><span style="color:#E36209;">index</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">    requestList[index],</span></span>
<span class="line"><span style="color:#24292E;">    index,</span></span>
<span class="line"><span style="color:#24292E;">  ]);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">res</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Array</span><span style="color:#24292E;">(requestList.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">((</span><span style="color:#E36209;">resolve</span><span style="color:#24292E;">, </span><span style="color:#E36209;">reject</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">handle</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (finishSize </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> requestList.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(res);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">//初始化运行过程中超过最大并发数的handle不运行，比如10个请求，3个并发，初始后的剩余7个不处理</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (runningSize </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> max </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> queue.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">task</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">index</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> queue.</span><span style="color:#6F42C1;">shift</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">task</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">          (</span><span style="color:#E36209;">value</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            res[index] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> value;</span></span>
<span class="line"><span style="color:#24292E;">                  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;这是第&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> (index </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;个，状态为&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> value.status </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;,值为&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> value.value)</span></span>
<span class="line"><span style="color:#24292E;">          },</span></span>
<span class="line"><span style="color:#24292E;">          (</span><span style="color:#E36209;">reason</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            res[index] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> reason;</span></span>
<span class="line"><span style="color:#24292E;">                  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;这是第&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> (index </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;个，状态为&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> reason.status </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;,值为&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> reason.value)</span></span>
<span class="line"><span style="color:#24292E;">          }</span></span>
<span class="line"><span style="color:#24292E;">        )</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">finally</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">          runningSize</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">          finishSize</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;">//剩余7个逐步在前3个finally后运行</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">handle</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">      runningSize</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> requestList.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">handle</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">//每个handle内部有异步任务，把这些异步任务放到异步队列，后续逐个运行</span></span>
<span class="line"><span style="color:#24292E;">      console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;循环了&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;次&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">start</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Date.</span><span style="color:#6F42C1;">now</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mock</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//模拟请求等待时长，这里等待后resolve不做处理，用random()随机判定请求状态并返回给上面task的then  </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">((</span><span style="color:#E36209;">resolve</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setTimeout</span><span style="color:#24292E;">(resolve, </span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (Math.</span><span style="color:#6F42C1;">random</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.8</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      status: </span><span style="color:#032F62;">&quot;error&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      value: Date.</span><span style="color:#6F42C1;">now</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> start,</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      status: </span><span style="color:#032F62;">&quot;success&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      value: Date.</span><span style="color:#6F42C1;">now</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> start,</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">requestList</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Array</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">fill</span><span style="color:#24292E;">(mock)</span></span>
<span class="line"><span style="color:#6F42C1;">createSchedule</span><span style="color:#24292E;">(requestList, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">((</span><span style="color:#E36209;">res</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(res);</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><h4 id="_15、常见排序方式" tabindex="-1">15、常见排序方式 <a class="header-anchor" href="#_15、常见排序方式" aria-label="Permalink to &quot;15、常见排序方式&quot;">​</a></h4><h5 id="_15-1-快排" tabindex="-1">15.1 快排 <a class="header-anchor" href="#_15-1-快排" aria-label="Permalink to &quot;15.1 快排&quot;">​</a></h5><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 快速排序函数</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">quickSort</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">arr</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">low</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">high</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> arr.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (low </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> high) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 找到分区索引</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">pi</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">partition</span><span style="color:#E1E4E8;">(arr, low, high);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 对分区左边的子数组进行快速排序</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">quickSort</span><span style="color:#E1E4E8;">(arr, low, pi </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 对分区右边的子数组进行快速排序</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">quickSort</span><span style="color:#E1E4E8;">(arr, pi </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, high);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> arr;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 分区函数</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">partition</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">arr</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">low</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">high</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 选择最后一个元素作为基准</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> pivot </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> arr[high];</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// i初始化为指向低索引的前一个位置</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> low </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 遍历数组，除了基准元素</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> j </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> low; j </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> high; j</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 如果当前元素小于或等于pivot</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (arr[j] </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> pivot) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 增加i，指向下一个元素</span></span>
<span class="line"><span style="color:#E1E4E8;">            i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 交换arr[i]和arr[j]</span></span>
<span class="line"><span style="color:#E1E4E8;">            [arr[i], arr[j]] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [arr[j], arr[i]];</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 将基准元素放置在正确的位置</span></span>
<span class="line"><span style="color:#E1E4E8;">    [arr[i </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">], arr[high]] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [arr[high], arr[i </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]];</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 返回基准元素的索引</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 测试快速排序</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">testArray</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">9</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Original array:&quot;</span><span style="color:#E1E4E8;">, testArray);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Sorted array:&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">quickSort</span><span style="color:#E1E4E8;">(testArray));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 快速排序函数</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">quickSort</span><span style="color:#24292E;">(</span><span style="color:#E36209;">arr</span><span style="color:#24292E;">, </span><span style="color:#E36209;">low</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#E36209;">high</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (low </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> high) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 找到分区索引</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">pi</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">partition</span><span style="color:#24292E;">(arr, low, high);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 对分区左边的子数组进行快速排序</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">quickSort</span><span style="color:#24292E;">(arr, low, pi </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 对分区右边的子数组进行快速排序</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">quickSort</span><span style="color:#24292E;">(arr, pi </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, high);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> arr;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 分区函数</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">partition</span><span style="color:#24292E;">(</span><span style="color:#E36209;">arr</span><span style="color:#24292E;">, </span><span style="color:#E36209;">low</span><span style="color:#24292E;">, </span><span style="color:#E36209;">high</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 选择最后一个元素作为基准</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> pivot </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr[high];</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// i初始化为指向低索引的前一个位置</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> low </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 遍历数组，除了基准元素</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> j </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> low; j </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> high; j</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 如果当前元素小于或等于pivot</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (arr[j] </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> pivot) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 增加i，指向下一个元素</span></span>
<span class="line"><span style="color:#24292E;">            i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 交换arr[i]和arr[j]</span></span>
<span class="line"><span style="color:#24292E;">            [arr[i], arr[j]] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [arr[j], arr[i]];</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 将基准元素放置在正确的位置</span></span>
<span class="line"><span style="color:#24292E;">    [arr[i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">], arr[high]] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [arr[high], arr[i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]];</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 返回基准元素的索引</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 测试快速排序</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">testArray</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">7</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">8</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">9</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Original array:&quot;</span><span style="color:#24292E;">, testArray);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Sorted array:&quot;</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">quickSort</span><span style="color:#24292E;">(testArray));</span></span></code></pre></div><h5 id="_15-2-堆排序" tabindex="-1">15.2 堆排序 <a class="header-anchor" href="#_15-2-堆排序" aria-label="Permalink to &quot;15.2 堆排序&quot;">​</a></h5><blockquote><p>💡 堆是一个近似完全二叉树的结构，并同时满足堆的性质：即子结点的键值或索引总是小于（或者大于）它的父节点</p><p>有大根堆 和 小根堆两种排序方式</p><p>将堆顶元素为最大值的叫做“大根堆”（Max Heap），堆顶为最小值的叫做“小根堆”。</p></blockquote><p><img src="`+p+'" alt="image-20241027145827096"></p><p>💡 对于一个<strong>完全二叉树</strong>，在填满的情况下（非叶子节点都有两个子节点），每一层的元素个数是上一层的二倍，根节点数量是1，所以最后一层的节点数量，一定是之前所有层节点总数+1，所以，我们能找到最后一层的第一个节点的索引，即节点总数/2（根节点索引为0）;第最后一个非叶子节点的索引就是 arr.len / 2 -1</p><p><code>创建大根堆的思想如下</code></p><p><img src="'+o+`" alt="image-20241027150329250"></p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">heapSort</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">arr</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">n</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> arr.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 构建最大堆</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">floor</span><span style="color:#E1E4E8;">(n </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">heapify</span><span style="color:#E1E4E8;">(arr, n, i);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 一步步将最大的元素放到末尾，缩小堆的范围</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> n </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 交换堆顶元素（最大）和当前范围的最后一个元素</span></span>
<span class="line"><span style="color:#E1E4E8;">        [arr[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">], arr[i]] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [arr[i], arr[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]];</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 调整堆以维护最大堆性质</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">heapify</span><span style="color:#E1E4E8;">(arr, i, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> arr;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 调整堆，维护最大堆性质</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">heapify</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">arr</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">heapSize</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">rootIndex</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> largest </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> rootIndex; </span><span style="color:#6A737D;">// 根节点</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">leftChild</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> rootIndex </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 左子节点</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">rightChild</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> rootIndex </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 右子节点</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 检查左子节点是否存在且大于根节点</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (leftChild </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> heapSize </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> arr[leftChild] </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> arr[largest]) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        largest </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> leftChild;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 检查右子节点是否存在且大于目前最大的节点</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (rightChild </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> heapSize </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> arr[rightChild] </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> arr[largest]) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        largest </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> rightChild;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 如果根节点不是最大节点，则交换它们，并继续调整交换后的子树</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (largest </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> rootIndex) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        [arr[rootIndex], arr[largest]] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [arr[largest], arr[rootIndex]];</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">heapify</span><span style="color:#E1E4E8;">(arr, heapSize, largest); </span><span style="color:#6A737D;">// 递归调整子树</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 示例使用</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">arr</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">12</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">11</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">13</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;排序前:&quot;</span><span style="color:#E1E4E8;">, arr);</span></span>
<span class="line"><span style="color:#B392F0;">heapSort</span><span style="color:#E1E4E8;">(arr);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;排序后:&quot;</span><span style="color:#E1E4E8;">, arr);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">heapSort</span><span style="color:#24292E;">(</span><span style="color:#E36209;">arr</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">n</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 构建最大堆</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">floor</span><span style="color:#24292E;">(n </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">heapify</span><span style="color:#24292E;">(arr, n, i);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 一步步将最大的元素放到末尾，缩小堆的范围</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> n </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 交换堆顶元素（最大）和当前范围的最后一个元素</span></span>
<span class="line"><span style="color:#24292E;">        [arr[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">], arr[i]] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [arr[i], arr[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]];</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 调整堆以维护最大堆性质</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">heapify</span><span style="color:#24292E;">(arr, i, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> arr;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 调整堆，维护最大堆性质</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">heapify</span><span style="color:#24292E;">(</span><span style="color:#E36209;">arr</span><span style="color:#24292E;">, </span><span style="color:#E36209;">heapSize</span><span style="color:#24292E;">, </span><span style="color:#E36209;">rootIndex</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> largest </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> rootIndex; </span><span style="color:#6A737D;">// 根节点</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">leftChild</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> rootIndex </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 左子节点</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">rightChild</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> rootIndex </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 右子节点</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 检查左子节点是否存在且大于根节点</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (leftChild </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> heapSize </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> arr[leftChild] </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> arr[largest]) {</span></span>
<span class="line"><span style="color:#24292E;">        largest </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> leftChild;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 检查右子节点是否存在且大于目前最大的节点</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (rightChild </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> heapSize </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> arr[rightChild] </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> arr[largest]) {</span></span>
<span class="line"><span style="color:#24292E;">        largest </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> rightChild;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 如果根节点不是最大节点，则交换它们，并继续调整交换后的子树</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (largest </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> rootIndex) {</span></span>
<span class="line"><span style="color:#24292E;">        [arr[rootIndex], arr[largest]] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [arr[largest], arr[rootIndex]];</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">heapify</span><span style="color:#24292E;">(arr, heapSize, largest); </span><span style="color:#6A737D;">// 递归调整子树</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 示例使用</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">arr</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">12</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">11</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">13</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">7</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;排序前:&quot;</span><span style="color:#24292E;">, arr);</span></span>
<span class="line"><span style="color:#6F42C1;">heapSort</span><span style="color:#24292E;">(arr);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;排序后:&quot;</span><span style="color:#24292E;">, arr);</span></span></code></pre></div><h4 id="_16、常见for循环对比" tabindex="-1">16、常见for循环对比 <a class="header-anchor" href="#_16、常见for循环对比" aria-label="Permalink to &quot;16、常见for循环对比&quot;">​</a></h4><table><thead><tr><th>遍历方式</th><th>适用对象</th><th>获取内容</th><th>场景</th></tr></thead><tbody><tr><td><code>for...of</code></td><td>可迭代对象（数组、字符串、<code>Set</code>、<code>Map</code> 等）</td><td>元素值</td><td>遍历数组和其他可迭代对象的<strong>值</strong></td></tr><tr><td><code>for...in</code></td><td>对象（也能用于数组，但不推荐）</td><td>属性/索引</td><td>遍历对象属性，<strong>不推荐用于数组</strong></td></tr><tr><td><code>for</code>（传统）</td><td>数组、类数组对象</td><td>数字索引</td><td>需要<strong>索引控制</strong>的复杂场景（跳过、倒序遍历等）</td></tr></tbody></table><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">myObjct10</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    name: </span><span style="color:#9ECBFF;">&#39;dfsafds&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    age: </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    condition: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">selfFunction</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    time: </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Date</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> myObjct10){</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(i)</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(myObjct10[i])</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">//-----------------</span></span>
<span class="line"><span style="color:#E1E4E8;">name</span></span>
<span class="line"><span style="color:#B392F0;">VM1310</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">12</span><span style="color:#E1E4E8;"> dfsafds</span></span>
<span class="line"><span style="color:#B392F0;">VM1310</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">11</span><span style="color:#E1E4E8;"> age</span></span>
<span class="line"><span style="color:#B392F0;">VM1310</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">12</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span></span>
<span class="line"><span style="color:#B392F0;">VM1310</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">11</span><span style="color:#E1E4E8;"> condition</span></span>
<span class="line"><span style="color:#B392F0;">VM1310</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">12</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#B392F0;">VM1310</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">11</span><span style="color:#E1E4E8;"> selfFunction</span></span>
<span class="line"><span style="color:#B392F0;">VM1310</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">12</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ƒ</span><span style="color:#E1E4E8;"> (){</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#B392F0;">VM1310</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">11</span><span style="color:#E1E4E8;"> time</span></span>
<span class="line"><span style="color:#B392F0;">VM1310</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">12</span><span style="color:#E1E4E8;"> Sun Oct </span><span style="color:#79B8FF;">27</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2024</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">34</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">GMT</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">0800</span><span style="color:#E1E4E8;"> (中国标准时间)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">myObjct10</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    name: </span><span style="color:#032F62;">&#39;dfsafds&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    age: </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    condition: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">selfFunction</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    time: </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Date</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> myObjct10){</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(i)</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(myObjct10[i])</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">//-----------------</span></span>
<span class="line"><span style="color:#24292E;">name</span></span>
<span class="line"><span style="color:#6F42C1;">VM1310</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">12</span><span style="color:#24292E;"> dfsafds</span></span>
<span class="line"><span style="color:#6F42C1;">VM1310</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">11</span><span style="color:#24292E;"> age</span></span>
<span class="line"><span style="color:#6F42C1;">VM1310</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">12</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span></span>
<span class="line"><span style="color:#6F42C1;">VM1310</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">11</span><span style="color:#24292E;"> condition</span></span>
<span class="line"><span style="color:#6F42C1;">VM1310</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">12</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#6F42C1;">VM1310</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">11</span><span style="color:#24292E;"> selfFunction</span></span>
<span class="line"><span style="color:#6F42C1;">VM1310</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">12</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ƒ</span><span style="color:#24292E;"> (){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#6F42C1;">VM1310</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">11</span><span style="color:#24292E;"> time</span></span>
<span class="line"><span style="color:#6F42C1;">VM1310</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">12</span><span style="color:#24292E;"> Sun Oct </span><span style="color:#005CC5;">27</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2024</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">34</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">10</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">GMT</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">0800</span><span style="color:#24292E;"> (中国标准时间)</span></span></code></pre></div><h4 id="_17、js数据类型" tabindex="-1">17、js数据类型 <a class="header-anchor" href="#_17、js数据类型" aria-label="Permalink to &quot;17、js数据类型&quot;">​</a></h4><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">1.</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">基本数据类型（Primitive</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Types）</span></span>
<span class="line"><span style="color:#B392F0;">基本数据类型是不可变的，即它们的值一旦被创建就不能更改。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">Number：表示整数和浮点数。例如，42、3.14。</span></span>
<span class="line"><span style="color:#B392F0;">BigInt：用于表示大整数，超过</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Number</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">的安全范围（2^53-1）。通过在数字后添加</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">n（如</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">12345678901234567890</span><span style="color:#9ECBFF;">n）来创建。</span></span>
<span class="line"><span style="color:#B392F0;">String：表示文本数据。例如，</span><span style="color:#B392F0;">&quot;Hello&quot;</span><span style="color:#B392F0;">、</span><span style="color:#B392F0;">&#39;World&#39;</span><span style="color:#B392F0;">。</span></span>
<span class="line"><span style="color:#B392F0;">Boolean：只有两个值，true</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">和</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#9ECBFF;">。</span></span>
<span class="line"><span style="color:#B392F0;">Undefined：表示一个变量已经声明但未初始化时的值。let</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">x</span><span style="color:#E1E4E8;">; </span><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">x</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">的值为</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">undefined。</span></span>
<span class="line"><span style="color:#B392F0;">Null：表示“空”或“不存在”的值，通常用来表示一个空对象的引用。</span></span>
<span class="line"><span style="color:#B392F0;">Symbol：表示唯一标识符，常用于对象属性的唯一键。通过</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Symbol</span><span style="color:#E1E4E8;">() </span><span style="color:#9ECBFF;">函数创建。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">2.</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">引用数据类型（Reference</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Types）</span></span>
<span class="line"><span style="color:#B392F0;">引用数据类型保存的是指向实际对象的引用，操作的是地址而不是数据本身。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">Object：是</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">JavaScript</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">中最复杂的数据类型，用于存储键值对。可以包含任意类型的数据。</span></span>
<span class="line"><span style="color:#B392F0;">Array：特殊类型的对象，用于按顺序存储数据的集合。</span></span>
<span class="line"><span style="color:#B392F0;">Function：也是对象的一种，可以被调用。</span></span>
<span class="line"><span style="color:#B392F0;">Date：表示特定的时间点。</span></span>
<span class="line"><span style="color:#B392F0;">RegExp：表示正则表达式，用于匹配字符串的模式。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">3.</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">特殊类型</span></span>
<span class="line"><span style="color:#B392F0;">NaN：Number</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">类型中的一种特殊值，表示“不是一个数字”（Not-a-Number），通常是无效数学操作的结果（例如，0</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#9ECBFF;">）。</span></span>
<span class="line"><span style="color:#B392F0;">Infinity</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">和</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-Infinity：Number</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">类型中的特殊值，表示正无穷和负无穷。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">1.</span><span style="color:#24292E;"> </span><span style="color:#032F62;">基本数据类型（Primitive</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Types）</span></span>
<span class="line"><span style="color:#6F42C1;">基本数据类型是不可变的，即它们的值一旦被创建就不能更改。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">Number：表示整数和浮点数。例如，42、3.14。</span></span>
<span class="line"><span style="color:#6F42C1;">BigInt：用于表示大整数，超过</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Number</span><span style="color:#24292E;"> </span><span style="color:#032F62;">的安全范围（2^53-1）。通过在数字后添加</span><span style="color:#24292E;"> </span><span style="color:#032F62;">n（如</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">12345678901234567890</span><span style="color:#032F62;">n）来创建。</span></span>
<span class="line"><span style="color:#6F42C1;">String：表示文本数据。例如，</span><span style="color:#6F42C1;">&quot;Hello&quot;</span><span style="color:#6F42C1;">、</span><span style="color:#6F42C1;">&#39;World&#39;</span><span style="color:#6F42C1;">。</span></span>
<span class="line"><span style="color:#6F42C1;">Boolean：只有两个值，true</span><span style="color:#24292E;"> </span><span style="color:#032F62;">和</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#032F62;">。</span></span>
<span class="line"><span style="color:#6F42C1;">Undefined：表示一个变量已经声明但未初始化时的值。let</span><span style="color:#24292E;"> </span><span style="color:#032F62;">x</span><span style="color:#24292E;">; </span><span style="color:#6F42C1;">//</span><span style="color:#24292E;"> </span><span style="color:#032F62;">x</span><span style="color:#24292E;"> </span><span style="color:#032F62;">的值为</span><span style="color:#24292E;"> </span><span style="color:#032F62;">undefined。</span></span>
<span class="line"><span style="color:#6F42C1;">Null：表示“空”或“不存在”的值，通常用来表示一个空对象的引用。</span></span>
<span class="line"><span style="color:#6F42C1;">Symbol：表示唯一标识符，常用于对象属性的唯一键。通过</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Symbol</span><span style="color:#24292E;">() </span><span style="color:#032F62;">函数创建。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">2.</span><span style="color:#24292E;"> </span><span style="color:#032F62;">引用数据类型（Reference</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Types）</span></span>
<span class="line"><span style="color:#6F42C1;">引用数据类型保存的是指向实际对象的引用，操作的是地址而不是数据本身。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">Object：是</span><span style="color:#24292E;"> </span><span style="color:#032F62;">JavaScript</span><span style="color:#24292E;"> </span><span style="color:#032F62;">中最复杂的数据类型，用于存储键值对。可以包含任意类型的数据。</span></span>
<span class="line"><span style="color:#6F42C1;">Array：特殊类型的对象，用于按顺序存储数据的集合。</span></span>
<span class="line"><span style="color:#6F42C1;">Function：也是对象的一种，可以被调用。</span></span>
<span class="line"><span style="color:#6F42C1;">Date：表示特定的时间点。</span></span>
<span class="line"><span style="color:#6F42C1;">RegExp：表示正则表达式，用于匹配字符串的模式。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">3.</span><span style="color:#24292E;"> </span><span style="color:#032F62;">特殊类型</span></span>
<span class="line"><span style="color:#6F42C1;">NaN：Number</span><span style="color:#24292E;"> </span><span style="color:#032F62;">类型中的一种特殊值，表示“不是一个数字”（Not-a-Number），通常是无效数学操作的结果（例如，0</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#032F62;">）。</span></span>
<span class="line"><span style="color:#6F42C1;">Infinity</span><span style="color:#24292E;"> </span><span style="color:#032F62;">和</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-Infinity：Number</span><span style="color:#24292E;"> </span><span style="color:#032F62;">类型中的特殊值，表示正无穷和负无穷。</span></span></code></pre></div><h4 id="_18、reduce" tabindex="-1">18、reduce <a class="header-anchor" href="#_18、reduce" aria-label="Permalink to &quot;18、reduce&quot;">​</a></h4><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">reduce</span><span style="color:#E1E4E8;">(callbackFn)</span></span>
<span class="line"><span style="color:#B392F0;">reduce</span><span style="color:#E1E4E8;">(callbackFn, initialValue)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">reduce</span><span style="color:#24292E;">(callbackFn)</span></span>
<span class="line"><span style="color:#6F42C1;">reduce</span><span style="color:#24292E;">(callbackFn, initialValue)</span></span></code></pre></div><p>为数组中每个元素执行的函数。其返回值将作为下一次调用 <code>callbackFn</code> 时的 <code>accumulator</code> 参数。对于最后一次调用，返回值将作为 <code>reduce()</code> 的返回值。该函数被调用时将传入以下参数：</p><ul><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#accumulator" target="_blank" rel="noreferrer"><code>accumulator</code></a></p><p>上一次调用 <code>callbackFn</code> 的结果。在第一次调用时，如果指定了 <code>initialValue</code> 则为指定的值，否则为 <code>array[0]</code> 的值。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#currentvalue" target="_blank" rel="noreferrer"><code>currentValue</code></a></p><p>当前元素的值。在第一次调用时，如果指定了 <code>initialValue</code>，则为 <code>array[0]</code> 的值，否则为 <code>array[1]</code>。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#currentindex" target="_blank" rel="noreferrer"><code>currentIndex</code></a></p><p><code>currentValue</code> 在数组中的索引位置。在第一次调用时，如果指定了 <code>initialValue</code> 则为 <code>0</code>，否则为 <code>1</code>。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#array" target="_blank" rel="noreferrer"><code>array</code></a></p><p>调用了 <code>reduce()</code> 的数组本身。</p></li></ul><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#initialvalue" target="_blank" rel="noreferrer"><code>initialValue</code></a> 可选</p><p>第一次调用回调时初始化 <code>accumulator</code> 的值。如果指定了 <code>initialValue</code>，则 <code>callbackFn</code> 从数组中的第一个值作为 <code>currentValue</code> 开始执行。如果没有指定 <code>initialValue</code>，则 <code>accumulator</code> 初始化为数组中的第一个值，并且 <code>callbackFn</code> 从数组中的第二个值作为 <code>currentValue</code> 开始执行。在这种情况下，如果数组为空（没有第一个值可以作为 <code>accumulator</code> 返回），则会抛出错误。</p><p>案例1 -- 迭加</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">array1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 0 + 1 + 2 + 3 + 4</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">initialValue</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">sumWithInitial</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> array1.</span><span style="color:#B392F0;">reduce</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  (</span><span style="color:#FFAB70;">accumulator</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">currentValue</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> accumulator </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> currentValue,</span></span>
<span class="line"><span style="color:#E1E4E8;">  initialValue,</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(sumWithInitial); </span><span style="color:#6A737D;">//10</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">array1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 0 + 1 + 2 + 3 + 4</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">initialValue</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">sumWithInitial</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> array1.</span><span style="color:#6F42C1;">reduce</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  (</span><span style="color:#E36209;">accumulator</span><span style="color:#24292E;">, </span><span style="color:#E36209;">currentValue</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> accumulator </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> currentValue,</span></span>
<span class="line"><span style="color:#24292E;">  initialValue,</span></span>
<span class="line"><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(sumWithInitial); </span><span style="color:#6A737D;">//10</span></span></code></pre></div><p>案例2 --迭减</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">array1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 0 + 1 + 2 + 3 + 4</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">initialValue</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">sumWithInitial</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> array1.</span><span style="color:#B392F0;">reduce</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  (</span><span style="color:#FFAB70;">accumulator</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">currentValue</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> accumulator </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> currentValue,</span></span>
<span class="line"><span style="color:#E1E4E8;">  initialValue,</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(sumWithInitial);  </span><span style="color:#6A737D;">//0</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">array1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 0 + 1 + 2 + 3 + 4</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">initialValue</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">sumWithInitial</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> array1.</span><span style="color:#6F42C1;">reduce</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  (</span><span style="color:#E36209;">accumulator</span><span style="color:#24292E;">, </span><span style="color:#E36209;">currentValue</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> accumulator </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> currentValue,</span></span>
<span class="line"><span style="color:#24292E;">  initialValue,</span></span>
<span class="line"><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(sumWithInitial);  </span><span style="color:#6A737D;">//0</span></span></code></pre></div><h4 id="_19、instanceof" tabindex="-1">19、instanceof <a class="header-anchor" href="#_19、instanceof" aria-label="Permalink to &quot;19、instanceof&quot;">​</a></h4><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;aaa&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Number</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;aaa&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Number</span><span style="color:#24292E;">)</span></span></code></pre></div><p><code>console.log(ts instanceof String)</code></p><ul><li><code>ts</code> 是一个字符串的<strong>原始值</strong>，它的类型是 <code>&quot;string&quot;</code>，而不是 <code>String</code> 对象。</li><li><code>instanceof</code> 操作符用于检查一个对象是否是某个构造函数的实例，但在这里，<code>ts</code> 是一个原始数据类型，而不是 <code>String</code> 对象。</li><li>因此，<code>ts instanceof String</code> 的结果为 <strong><code>false</code></strong>。</li></ul><p>如果我们将 <code>ts</code> 设为 <code>new String(&#39;aaa&#39;)</code>，那么它将是一个 <code>String</code> 对象，<code>ts instanceof String</code> 的结果才会是 <code>true</code>。</p><p><code>console.log(5 instanceof Number)</code></p><ul><li><code>5</code> 是一个数字的<strong>原始值</strong>，其类型是 <code>&quot;number&quot;</code>，而不是 <code>Number</code> 对象。</li><li>同样地，<code>instanceof</code> 用于检查一个对象是否是某个构造函数的实例，但这里 <code>5</code> 只是一个原始数据类型，而不是 <code>Number</code> 对象。</li><li>因此，<code>5 instanceof Number</code> 的结果为 <strong><code>false</code></strong>。</li></ul><p>如果我们将 <code>5</code> 替换为 <code>new Number(5)</code>，结果才会是 <code>true</code>，因为 <code>new Number(5)</code> 创建了一个 <code>Number</code> 对象。</p><ul><li>对于原始类型（如字符串、数字等），使用 <code>instanceof</code> 检查是否为其对象包装类型（如 <code>String</code>、<code>Number</code>）会返回 <code>false</code>。</li><li>原始值不会通过 <code>instanceof</code> 检查为相应的包装对象。</li></ul>`,120),t=[c];function r(E,y,i,F,d,u){return n(),a("div",null,t)}const A=s(e,[["render",r]]);export{h as __pageData,A as default};
