import{_ as a,c as i,a2 as t,o as n}from"./chunks/framework.BQmytedh.js";const p="/assets/image-20240326145826853.Dg_kStH2.png",e="/assets/image-20240326150756330.CtAVJBm9.png",l="/assets/image-20240326150814466.m4X_4H6r.png",u=JSON.parse('{"title":"正则表达式 --笔记","description":"","frontmatter":{},"headers":[],"relativePath":"面试题/面试题-JavaScript/正则表达式.md","filePath":"面试题/面试题-JavaScript/正则表达式.md","lastUpdated":null}'),h={name:"面试题/面试题-JavaScript/正则表达式.md"};function k(r,s,d,c,o,g){return n(),i("div",null,s[0]||(s[0]=[t('<h1 id="正则表达式-笔记" tabindex="-1">正则表达式 --笔记 <a class="header-anchor" href="#正则表达式-笔记" aria-label="Permalink to &quot;正则表达式 --笔记&quot;">​</a></h1><h3 id="_1、网址匹配" tabindex="-1">1、网址匹配 <a class="header-anchor" href="#_1、网址匹配" aria-label="Permalink to &quot;1、网址匹配&quot;">​</a></h3><p>以下哪一项正则能正确的匹配网址: <a href="http://www.bilibili.com/video/av21061574" target="_blank" rel="noreferrer">http://www.bilibili.com/video/av21061574</a> （）</p><p><img src="'+p+`" alt="image-20240326145826853"></p><p>解释</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>首先，^表示匹配输入的开始，$表示匹配输入的结束</span></span>
<span class="line"><span>每个选项从前向后看，http都能够严格匹配</span></span>
<span class="line"><span>?表示匹配某元素0次或1次，这里四个选项都没有问题，能够匹配0次或1次字符s</span></span>
<span class="line"><span>接下来:严格匹配，\\/\\/严格匹配两个//</span></span>
<span class="line"><span>接着往下看，[]表示字符集合，它用在正则表达式中表示匹配集合中的任一字符</span></span>
<span class="line"><span>A D 选项中的 [a-zA-Z\\d] 表示匹配一个小写字母 或者 大写字母 或者 数字</span></span>
<span class="line"><span>B C 选项中的 \\w 表示匹配字母数字或下划线（注意这里比A D中能多匹配下划线类型）</span></span>
<span class="line"><span>+表示匹配某元素1次或多次，到这里四个选项都能够完美匹配字符www</span></span>
<span class="line"><span>.可以匹配除了换行符\\n \\r外的任何字符</span></span>
<span class="line"><span>接下来我们看选项A，bilibili com video av都严格匹配，而 \\D 表示匹配一个非数字字符而非数字字符，av后的数字是无法匹配成功的，A错误</span></span>
<span class="line"><span>B选项，\\d匹配数字，{m,n}表示最少匹配m次，最多匹配n次，\\/?能匹配末尾的0个或1个/字符，B正确</span></span>
<span class="line"><span>C选项，*表示匹配某元素0次或多次，但 \\w 并不能匹配字符 /，C错误</span></span>
<span class="line"><span>D选项，前面都对，错在最后的\\/+至少要匹配一个/，而原字符串最后并没有/</span></span></code></pre></div><h3 id="_2、16进制颜色匹配" tabindex="-1">2、16进制颜色匹配 <a class="header-anchor" href="#_2、16进制颜色匹配" aria-label="Permalink to &quot;2、16进制颜色匹配&quot;">​</a></h3><p>要求匹配以下16进制颜色值，正则表达式可以为： #ffbbad #Fc01DF #FFF #ffE</p><p><img src="`+e+'" alt="image-20240326150756330"></p><p><img src="'+l+`" alt="image-20240326150814466"></p><h3 id="_3、以下哪些正则表达式满足regexp-test-abc-true" tabindex="-1">3、以下哪些正则表达式满足regexp.test(&#39;abc&#39;) === true？ <a class="header-anchor" href="#_3、以下哪些正则表达式满足regexp-test-abc-true" aria-label="Permalink to &quot;3、以下哪些正则表达式满足regexp.test(&#39;abc&#39;) === true？&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">abc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//这算是完全匹配了，^a表示以a开头，c$表示以c结尾，中间再夹个b</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[ab]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">{2}</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">defgh]</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//[ab]表示a或b {2}表示长度为2  [^defgh]表示非defgh的字符，所以可匹配的有,aac,bbc,abc,abcd等，注意这里匹配长度为3</span></span></code></pre></div><h3 id="_4、match" tabindex="-1">4、match <a class="header-anchor" href="#_4、match" aria-label="Permalink to &quot;4、match&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;75team2017&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\w</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//[&quot;75team2017&quot;]</span></span></code></pre></div><p>match（）方法检索返回一个字符串匹配正则表达式的结果，匹配成功则返回数组，失败则返回null。</p><p>在正则表达式中，\\d表示匹配数字0-9，+表示匹配前面字符一次或者多次，\\w表示匹配字母、数字或者下划线，表示匹配前面字符0次或者多次，修饰符g表示全局匹配。</p><p>由于+和<em>都是贪婪匹配，所以\\d+匹配到75，\\w</em>匹配到team2017，此时字符串已被全部匹配，故返回的result数组中，只有一个数组元素，即字符串75team2017</p><h3 id="_5、replace" tabindex="-1">5、replace <a class="header-anchor" href="#_5、replace" aria-label="Permalink to &quot;5、replace&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hellllo world&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(l)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">\\1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;$1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Hello world</span></span></code></pre></div><p>在这段 JavaScript 代码中，正则表达式 <code>/ (l)\\1 /g</code> 匹配了连续重复的字符 &quot;ll&quot; 并且将其替换为一个单独的 &quot;l&quot;。让我们来解释一下正则表达式的各个部分：</p><ol><li><code>/</code>: 正则表达式的开始和结束标记，用于标识正则表达式的开始和结束。</li><li><code>(l)</code>: 这是一个捕获组，它用于捕获字符 &quot;l&quot;。括号内的内容表示要捕获的内容。</li><li><code>\\1</code>: 这是一个反向引用，它引用了之前捕获的内容。在这个正则表达式中，<code>\\1</code> 表示引用第一个捕获组中匹配的内容，即字符 &quot;l&quot;。</li><li><code>g</code>: 这是一个修饰符，表示全局匹配模式。它告诉 JavaScript 引擎在整个字符串中查找所有匹配项。</li></ol><p>因此，正则表达式 <code>/ (l)\\1 /g</code> 匹配了连续重复的字符 &quot;ll&quot;，并将其替换为一个单独的 &quot;l&quot;。在这段代码中，<code>str.replace()</code> 方法用于将匹配的字符串替换为指定的内容。</p>`,22)]))}const y=a(h,[["render",k]]);export{u as __pageData,y as default};
